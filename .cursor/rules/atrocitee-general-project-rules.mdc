---
description: 
globs: 
alwaysApply: true
---
You are the AI used within the AI editor Cursor, so you can view, edit, create, and run files within the project directory. If you are asked to identify the cause of a bug, fix a bug, edit a file, or create a file, please execute the following function. Please do not ask me (human) to give you a file or ask you to create a file, but you (AI) can do it by executing the following functions. If an error occurs and you are unable to execute the function, please consult with us.

edit_file: Edit an existing file, create a new file
read_file: Read the contents of a file
grep_search: Search in the codebase based on a specific creator
list_dir: Get a list of files and folders in a specific directory‚Äù

Please edit the file in small chunks

# Atrocitee Project Guidelines

## Project Overview

Atrocitee is a merchandise platform where products are created on Printful, imported into the Astro website, and sold to the public. A portion of each purchase contributes to a charity of the user's choice. The name cleverly combines "atrocity" with "tee" to highlight the platform's mission: transforming attention on troubling events into tangible support for affected communities.

**Slogan**: "Threads of Change"

## Technology Stack

### Core Technologies
- **Astro**: Primary web framework
  - Hybrid rendering (static & server-side)
  - Component-based architecture
  - Excellent SEO capabilities

- **Supabase**: Backend & Database
  - Authentication and user management
  - PostgreSQL database
  - Row Level Security (RLS) policies
  - Real-time capabilities

- **Printful**: Product Management & Fulfillment
  - Print-on-demand service
  - Product creation and inventory
  - Order fulfillment and shipping

- **Stripe**: Payment Processing
  - Secure checkout experience
  - Subscription management
  - Tax calculations and compliance

### Infrastructure & Monitoring
- **Cloudflare Pages**: Hosting platform
  - Global CDN
  - Edge computing
  - Automatic HTTPS

- **Sentry**: Error tracking and monitoring
  - Real-time error reporting
  - Performance monitoring
  - User session tracking

## Architecture Principles

### Page Rendering Strategy
Atrocitee uses a hybrid rendering approach that combines static generation with client-side interactivity:

#### Benefits
- Fast initial page loads (static HTML)
- Great SEO (complete content for search engines)
- Interactive features (client-side JavaScript)
- Proper URL parameter handling (via client-side code)

#### Prerendering Rules

- **Shop Pages** (`/shop/*`):
  - **ALWAYS use `export const prerender = true`**
  - These pages benefit from static generation for SEO and performance
  - Client-side interactivity still works with prerendering
  - The `getStaticPaths()` function generates all possible product pages at build time

- **Admin Pages** (`/admin/*`):
  - **ALWAYS use `export const prerender = false`** or omit it (defaults to false)
  - These pages need server-side rendering for authentication and dynamic data
  - They should never be statically generated

- **API Routes** (`/api/*`):
  - **ALWAYS use `export const prerender = false`** or omit it
  - API endpoints must be dynamic to handle requests

- **Account Pages** (`/account/*`):
  - **ALWAYS use `export const prerender = false`** or omit it
  - These contain user-specific information that must be rendered server-side

### Data Flow
1. Products are created in Printful
2. Product data is synchronized to Supabase database
3. Astro site queries Supabase for product display
4. Orders are processed through Stripe
5. Fulfillment is handled by Printful

## Development Guidelines

### General Rules
1. **Update First**: Look for existing files to update before creating new ones
2. **Follow Conventions**: Adhere to established code styles and patterns
3. **Type Safety**: Use TypeScript throughout the project
4. **Error Handling**: Implement comprehensive error handling
5. **Documentation**: Document complex logic and API endpoints

### Security Principles
1. All routes under `/admin` and `/api` must implement proper authentication
2. Use middleware for auth checks on protected routes
3. Implement Row Level Security in Supabase
4. Never expose sensitive operations in client-side code
5. Store all secrets in environment variables

### Performance Optimization
1. Minimize client-side JavaScript
2. Utilize Astro's partial hydration with `client:*` directives judiciously
3. Implement proper image optimization
4. Use component-level caching where appropriate
5. Optimize database queries with proper indexes