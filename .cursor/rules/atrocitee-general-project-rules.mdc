---
description: 
globs: 
alwaysApply: false
---
# Atrocitee Project Guidelines

## Project Overview

Atrocitee is a merchandise platform where products are created on Printful, imported into the Astro website, and sold to the public. A portion of each purchase contributes to a charity of the user's choice. The name cleverly combines "atrocity" with "tee" to highlight the platform's mission: transforming attention on troubling events into tangible support for affected communities.

**Slogan**: "Threads of Change"

## Technology Stack

### Core Technologies
- **Astro**: Primary web framework
  - Hybrid rendering (static & server-side)
  - Component-based architecture
  - Excellent SEO capabilities

- **Supabase**: Backend & Database
  - Authentication and user management
  - PostgreSQL database
  - Row Level Security (RLS) policies
  - Real-time capabilities

- **Printful**: Product Management & Fulfillment
  - Print-on-demand service
  - Product creation and inventory
  - Order fulfillment and shipping

- **Stripe**: Payment Processing
  - Secure checkout experience
  - Subscription management
  - Tax calculations and compliance

### Infrastructure & Monitoring
- **Cloudflare Pages**: Hosting platform
  - Global CDN
  - Edge computing
  - Automatic HTTPS

- **Sentry**: Error tracking and monitoring
  - Real-time error reporting
  - Performance monitoring
  - User session tracking

## Architecture Principles

### Hybrid Rendering Approach
- **Static Rendering**: `/shop/**/*` pages use static site generation for performance and SEO
- **Server Rendering**: `/admin/**/*` and `/api/**/*` routes use server-side rendering for security and dynamic content

### Data Flow
1. Products are created in Printful
2. Product data is synchronized to Supabase database
3. Astro site queries Supabase for product display
4. Orders are processed through Stripe
5. Fulfillment is handled by Printful

## Development Guidelines

### General Rules
1. **Update First**: Look for existing files to update before creating new ones
2. **Follow Conventions**: Adhere to established code styles and patterns
3. **Type Safety**: Use TypeScript throughout the project
4. **Error Handling**: Implement comprehensive error handling
5. **Documentation**: Document complex logic and API endpoints

### Security Principles
1. All routes under `/admin` and `/api` must implement proper authentication
2. Use middleware for auth checks on protected routes
3. Implement Row Level Security in Supabase
4. Never expose sensitive operations in client-side code
5. Store all secrets in environment variables

### Performance Optimization
1. Minimize client-side JavaScript
2. Utilize Astro's partial hydration with `client:*` directives judiciously
3. Implement proper image optimization
4. Use component-level caching where appropriate
5. Optimize database queries with proper indexes

## File Structure & Organization

Key configuration files:
- [astro.config.mjs](mdc:astro.config.mjs): Astro configuration
- [tsconfig.json](mdc:tsconfig.json): TypeScript configuration
- [tailwind.config.js](mdc:tailwind.config.js): Tailwind CSS configuration

Project structure:
```
src/
├── components/     # UI components
│   ├── common/     # Shared UI elements
│   ├── features/   # Feature-specific components
│   └── layouts/    # Page layouts
├── content/        # Static content (MD/MDX)
│   ├── categories/ # Product categories
│   ├── charities/  # Charity information
│   └── rules/      # Project guidelines
├── layouts/        # Astro layouts
├── lib/            # Core business logic
│   ├── auth/       # Authentication logic
│   ├── database/   # Database interactions
│   ├── printful/   # Printful API integration
│   └── stripe/     # Stripe integration
├── pages/          # All routes
│   ├── admin/      # Admin pages (SSR)
│   ├── api/        # API endpoints (SSR)
│   └── shop/       # Shop pages (static)
├── styles/         # Global styles
├── types/          # TypeScript type definitions
└── utils/          # Utility functions
```

## Path Aliases
Use path aliases for all imports:
- `@/*` -> `src/*`
- `@components/*` -> `src/components/*`
- `@layouts/*` -> `src/layouts/*`
- `@lib/*` -> `src/lib/*`
- `@types/*` -> `node_modules/@types/*` (external types)
- `@local-types/*` -> `src/types/*` (project types)
- `@utils/*` -> `src/utils/*`
- `@content/*` -> `src/content/*`
- `@config/*` -> `src/config/*`

## Coding Standards

### Component Development
- Create `.astro` files for Astro components
- Use framework-specific components (React, Vue) only when necessary
- Implement proper component composition and reusability
- Use Astro's component props for data passing

### Astro File Structure Requirements
```astro
---
// Imports and JavaScript/TypeScript code
// Props, data fetching, and other logic
---

<!-- Template code goes here -->
```

### Data Fetching
- Use appropriate data fetching method based on page type:
  - Static pages: fetch at build time
  - Server pages: fetch on request
- Implement proper error handling for all data fetching
- Use type guards for data validation

### Database Interactions
- Follow SQL style guide for all database queries
- Implement Row Level Security (RLS) for all tables
- Use prepared statements to prevent SQL injection
- Keep database schema changes in migration files

### Authentication & Authorization
- Use Supabase auth for all authentication needs
- Implement middleware for protected routes
- Check authentication server-side for admin/API routes
- Use role-based access control for different user types

## Environment-Specific Configuration
- Development: use local Supabase instance
- Testing: use test databases and sandboxed services
- Production: use production services with proper security

## Workflow Integration
- Printful product sync runs on a schedule
- Orders are immediately sent to Printful for fulfillment
- Charity donations are processed monthly

## Error Handling & Logging
- Use Sentry for production error tracking
- Implement structured logging
- Handle API errors gracefully with proper status codes
- Provide user-friendly error messages

## SEO Optimization
- Implement proper meta tags for all pages
- Use semantic HTML throughout the site
- Ensure proper heading hierarchy
- Optimize product pages for search engines

## Accessibility Standards
- Follow WCAG 2.1 AA standards
- Implement proper semantic HTML
- Ensure keyboard navigation
- Provide proper alt text for images

## Related Guidelines
- Astro & Tailwind: See [astro-tailwind-cursor-rules-5-25.mdc](mdc:.cursor/rules/astro-tailwind-cursor-rules-5-25.mdc)
- Supabase Admin Auth: See [supabase-admin-auth.mdc](mdc:.cursor/rules/supabase-admin-auth.mdc)
- Supabase Auth: See [supabase-auth-md-5-25.mdc](mdc:.cursor/rules/supabase-auth-md-5-25.mdc)
- SQL Formatting: See [supabase-code-format-sql-5-25.mdc](mdc:.cursor/rules/supabase-code-format-sql-5-25.mdc)
- Database Functions: See [supabase-database-function-5-25.mdc](mdc:.cursor/rules/supabase-database-function-5-25.mdc)
- RLS Policies: See [supabase-rls-policies-5-25.mdc](mdc:.cursor/rules/supabase-rls-policies-5-25.mdc)
