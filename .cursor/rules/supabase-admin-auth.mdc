---
description: Guidelines for creating protected Admin or API routes for Atrocitee, including Row Level Security policies
globs:
  - "src/pages/admin/**/*"
  - "src/pages/api/**/*"
  - "supabase/migrations/**/*"
  - "supabase/policies/**/*"
alwaysApply: true
---

# Protected Routes and RLS Guide

## ‚ùó Route Access Control

All routes under `/admin` or `/api` must:

- Be accessible **only to authenticated users**.
- Perform an **auth check** at the top of the file or in middleware.
- Use `serverSupabaseClient` or `createServerClient` (for RSC or API routes) to securely access Supabase.

## üîê Supabase Row Level Security (RLS)

All protected Supabase tables **must**:

- Have RLS enabled.
- Use policies that **filter rows by the logged-in user's role, org, or ID**.
- Example policy for `products`:

```sql
CREATE POLICY "Users can view their own products"
  ON public.products
  FOR SELECT
  USING (
    auth.uid() = user_id
  );

```

## üõ°Ô∏è Secure Views

All database views **must**:

- Use `SECURITY INVOKER` (default) instead of `SECURITY DEFINER`
- Add `security_barrier` option to prevent information leakage
- Have explicit column selection (no SELECT *)
- Have proper RLS policies on underlying tables
- Have explicit GRANT statements for access control

### üîç SECURITY DEFINER Exception
**Note**: `SECURITY DEFINER` is appropriate for specific admin functions that need to bypass RLS (like `is_admin()` functions). This is the exception, not the rule, and should be used sparingly with proper justification.

Example of a secure view:

```sql
CREATE OR REPLACE VIEW public_profiles 
WITH (security_barrier)
AS
  SELECT 
    id,
    display_name,
    avatar_url,
    role
  FROM profiles
  WITH (security_invoker = true);

-- Grant minimal necessary permissions
GRANT SELECT ON public_profiles TO authenticated, anon;

COMMENT ON VIEW public_profiles IS 'Safe, publicly accessible profile information. Uses security barrier and invoker rights for protection.';
```

Key security principles for views:
- Only expose necessary columns
- Use RLS on base tables for row-level filtering
- Grant minimal necessary permissions
- Add security barrier to prevent optimization leaks
- Document security measures in view comments
