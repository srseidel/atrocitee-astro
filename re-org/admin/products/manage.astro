---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { createServerSupabaseClient } from "../../../lib/supabase";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Fetch product statistics from the database
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });

// Get total product count
const { data: productCount, error: productCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true });

// Get active product count
const { data: activeProductCount, error: activeProductCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true })
  .eq('atrocitee_active', true);

// Get count of pending product changes
const { data: pendingChanges, error: pendingChangesError } = await supabase
  .from('printful_product_changes')
  .select('count', { count: 'exact', head: true })
  .eq('status', 'pending_review');

// Get recent product updates
const { data: recentUpdates, error: recentUpdatesError } = await supabase
  .from('printful_sync_history')
  .select('*')
  .order('created_at', { ascending: false })
  .limit(3);

// Get categories
const { data: categories, error: categoriesError } = await supabase
  .from('atrocitee_categories')
  .select('*')
  .order('name');

// Define types for our data
interface SyncHistory {
  id: string;
  created_at: string;
  sync_type: string;
  status: string;
  products_synced: number;
  products_failed: number;
}

interface Category {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
  updated_at: string;
}

---
<AdminLayout title="Product Management Hub">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Product Management Hub</h1>

    <!-- Product Management Section -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Product Management</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <a href="/admin/products/all" class="p-4 border rounded-lg hover:bg-gray-50">
          <h3 class="font-medium">All Products</h3>
          <p class="text-gray-600">View and manage all products</p>
          <div class="mt-2 text-sm text-gray-500">
            Total: {productCount?.count || 0} products
          </div>
        </a>
        
        <a href="/admin/products/tags" class="p-4 border rounded-lg hover:bg-gray-50">
          <h3 class="font-medium">Tags</h3>
          <p class="text-gray-600">Manage product tags</p>
        </a>
      </div>
    </div>

    <!-- Category Management Section -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold">Category Management</h2>
        <button
          id="syncCategories"
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Sync Categories
        </button>
      </div>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Updated</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {categories?.map((category: Category) => (
              <tr>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{category.name}</div>
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm text-gray-500">{category.description || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-500">
                    {new Date(category.updated_at).toLocaleString()}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <button
                    class="text-blue-600 hover:text-blue-900"
                    onclick={`editCategory('${category.id}')`}
                  >
                    Edit
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Printful Synchronization Section -->
    <div class="bg-white rounded-lg shadow-md p-6">
      <h2 class="text-xl font-semibold mb-4">Printful Synchronization</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="p-4 border rounded-lg">
          <h3 class="font-medium">Sync Products</h3>
          <p class="text-gray-600">Import and update products from Printful</p>
          <div class="mt-4">
            <button
              id="syncProducts"
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
            >
              Sync Products
            </button>
          </div>
        </div>
      </div>

      <!-- Recent Sync History -->
      {recentUpdates && recentUpdates.length > 0 && (
        <div class="mt-6">
          <h3 class="font-medium mb-2">Recent Sync History</h3>
          <div class="space-y-2">
            {recentUpdates.map((update: SyncHistory) => (
              <div class="p-3 bg-gray-50 rounded-lg">
                <div class="flex justify-between items-center">
                  <span class="font-medium">{update.sync_type}</span>
                  <span class="text-sm text-gray-500">
                    {new Date(update.created_at).toLocaleString()}
                  </span>
                </div>
                <div class="text-sm text-gray-600">
                  Status: {update.status}
                </div>
                <div class="text-sm text-gray-600">
                  Synced: {update.products_synced} | Failed: {update.products_failed}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>

  <script>
    // Handle sync buttons
    document.getElementById('syncProducts')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/products/sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json();
        if (data.success) {
          window.location.reload();
        } else {
          alert('Error syncing products: ' + data.message);
        }
      } catch (error) {
        alert('Error syncing products: ' + error);
      }
    });

    document.getElementById('syncCategories')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/categories/sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json();
        if (data.success) {
          window.location.reload();
        } else {
          alert('Error syncing categories: ' + data.message);
        }
      } catch (error) {
        alert('Error syncing categories: ' + error);
      }
    });

    function editCategory(id: string) {
      window.location.href = `/admin/products/categories/${id}`;
    }
  </script>
</AdminLayout> 