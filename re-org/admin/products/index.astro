---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { createServerSupabaseClient } from "../../../lib/supabase";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Fetch products from the database
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });
const { data: productsData, error } = await supabase
  .from('products')
  .select('*')
  .order('created_at', { ascending: false });

// Fetch variants separately if products were found
let products = productsData;
if (productsData && !error) {
  // Get all product IDs to fetch variants
  const productIds = productsData.map((product: any) => product.id);
  
  // Fetch all variants for these products
  const { data: variantsData, error: variantsError } = await supabase
    .from('product_variants')
    .select('*')
    .in('product_id', productIds);
  
  // Attach variants to their respective products
  if (variantsData && !variantsError) {
    products = productsData.map((product: any) => ({
      ...product,
      product_variants: variantsData.filter((variant: any) => variant.product_id === product.id)
    }));
  }
}

// Get product stats from the database
const { data: productCount, error: productCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true });

const { data: activeProductCount, error: activeProductCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true })
  .eq('active', true);

const { data: pendingChanges, error: pendingChangesError } = await supabase
  .from('printful_product_changes')
  .select('count', { count: 'exact', head: true })
  .eq('status', 'pending_review');

const { data: recentProducts, error: recentProductsError } = await supabase
  .from('products')
  .select('id, name, price, active, created_at, image_urls')
  .order('created_at', { ascending: false })
  .limit(5);

interface Product {
  id: string;
  name: string;
  slug: string;
  thumbnail_url?: string;
  atrocitee_base_price?: number;
  atrocitee_donation_amount?: number;
  atrocitee_active: boolean;
  atrocitee_featured: boolean;
  categories?: {
    name: string;
  };
  product_variants: any[];
}

// Fetch categories for the filter
const { data: categories } = await supabase
  .from('categories')
  .select('id, name')
  .order('name');

interface Category {
  id: string;
  name: string;
}

---
<AdminLayout title="Products">
  <div class="container mx-auto p-6">
    <div class="mb-6 flex justify-between items-center">
      <h1 class="text-3xl font-bold">Products</h1>
      <div class="flex space-x-4">
        <a 
          href="/admin/products/all" 
          class="inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          View All Products
        </a>
      </div>
    </div>

    <!-- Filters -->
    <div class="mb-6 bg-white p-4 rounded-lg shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Status</label>
          <select 
            id="statusFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          >
            <option value="">All</option>
            <option value="true">Active</option>
            <option value="false">Inactive</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Featured</label>
          <select 
            id="featuredFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          >
            <option value="">All</option>
            <option value="true">Featured</option>
            <option value="false">Not Featured</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Category</label>
          <select 
            id="categoryFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          >
            <option value="">All Categories</option>
            {categories?.map((category: Category) => (
              <option value={category.id}>{category.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Search</label>
          <input 
            type="text" 
            id="searchInput"
            placeholder="Search products..."
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
      </div>
    </div>

    <!-- Products Table -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Base Price</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Donation</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Featured</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {products?.map((product: Product) => (
            <tr data-product-id={product.id}>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  {product.thumbnail_url && (
                    <img 
                      src={product.thumbnail_url} 
                      alt={product.name}
                      class="h-10 w-10 rounded-full object-cover mr-3"
                    />
                  )}
                  <div>
                    <div class="text-sm font-medium text-gray-900">{product.name}</div>
                    <div class="text-sm text-gray-500">{product.slug}</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">{product.categories?.name || 'Uncategorized'}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">${product.atrocitee_base_price?.toFixed(2) || '0.00'}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">${product.atrocitee_donation_amount?.toFixed(2) || '0.00'}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  product.atrocitee_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                }`}>
                  {product.atrocitee_active ? 'Active' : 'Inactive'}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  product.atrocitee_featured ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {product.atrocitee_featured ? 'Featured' : 'Not Featured'}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <a 
                  href={`/admin/products/configure/${product.id}`}
                  class="text-blue-600 hover:text-blue-900 mr-4"
                >
                  Configure
                </a>
                <button 
                  onclick={`deleteProduct('${product.id}')`}
                  class="text-red-600 hover:text-red-900"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</AdminLayout>

<script>
  // Add event listeners for filters
  document.getElementById('statusFilter')?.addEventListener('change', filterProducts);
  document.getElementById('featuredFilter')?.addEventListener('change', filterProducts);
  document.getElementById('categoryFilter')?.addEventListener('change', filterProducts);
  document.getElementById('searchInput')?.addEventListener('input', filterProducts);

  // Update filter function to use new field names
  function filterProducts() {
    const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;
    const featuredFilter = document.getElementById('featuredFilter') as HTMLSelectElement;
    const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;

    const status = statusFilter?.value;
    const featured = featuredFilter?.value;
    const category = categoryFilter?.value;
    const search = searchInput?.value.toLowerCase();

    const rows = document.querySelectorAll('tbody tr');
    rows.forEach(row => {
      const productStatus = row.querySelector('td:nth-child(5) span')?.textContent?.toLowerCase() || '';
      const productFeatured = row.querySelector('td:nth-child(6) span')?.textContent?.toLowerCase() || '';
      const productCategory = row.querySelector('td:nth-child(2) div')?.textContent?.toLowerCase() || '';
      const productName = row.querySelector('td:nth-child(1) div:first-child')?.textContent?.toLowerCase() || '';

      const statusMatch = !status || (status === 'true' && productStatus === 'active') || (status === 'false' && productStatus === 'inactive');
      const featuredMatch = !featured || (featured === 'true' && productFeatured === 'featured') || (featured === 'false' && productFeatured === 'not featured');
      const categoryMatch = !category || productCategory === category.toLowerCase();
      const searchMatch = !search || productName.includes(search);

      (row as HTMLElement).style.display = statusMatch && featuredMatch && categoryMatch && searchMatch ? '' : 'none';
    });
  }

  // Handle product deletion
  async function deleteProduct(id: string) {
    if (!confirm('Are you sure you want to delete this product?')) {
      return;
    }

    try {
      const response = await fetch(`/api/admin/products/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Failed to delete product');
      }

      // Remove the row from the table
      const row = document.querySelector(`tr[data-product-id="${id}"]`);
      row?.remove();

      // Show success message
      alert('Product deleted successfully');
    } catch (error) {
      console.error('Error deleting product:', error);
      alert('Failed to delete product. Please try again.');
    }
  }

  // Handle Printful sync
  document.getElementById('syncButton')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/admin/products/sync', {
        method: 'POST',
      });

      if (!response.ok) {
        throw new Error('Failed to sync with Printful');
      }

      // Show success message
      alert('Sync started successfully. This may take a few minutes.');
      
      // Reload the page after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (error) {
      console.error('Error syncing with Printful:', error);
      alert('Failed to sync with Printful. Please try again.');
    }
  });
</script> 