---
// @ts-nocheck - Disable TypeScript checking for this file since Astro uses 'class' instead of 'className'

interface Props {
  productSlug: string;
  variant?: {
    id: string;
    name: string;
    color?: string;
    size?: string;
    mockup_settings?: {
      selected_views?: string[];
    };
  };
}

const { productSlug, variant } = Astro.props;

const viewOptions = [
  { id: 'front', label: 'Front View' },
  { id: 'back', label: 'Back View' },
  { id: 'left', label: 'Left Side' },
  { id: 'right', label: 'Right Side' },
  { id: 'left-front', label: 'Left Front' },
  { id: 'right-front', label: 'Right Front' },
  { id: 'flat', label: 'Flat Layout' },
  { id: 'lifestyle', label: 'Lifestyle Shot' }
] as const;
---

<div class="mockup-modal">
  {/* View Selection */}
  {variant && (
    <div class="mb-4">
      <div class="grid grid-cols-3 gap-2">
        {viewOptions.map(view => (
          <label class="flex items-center space-x-2">
            <input
              type="checkbox"
              name={`mockup-view-${variant.id}-${view.id}`}
              value={view.id}
              class="rounded text-blue-600"
              checked={variant.mockup_settings?.selected_views?.includes(view.id)}
              data-variant-id={variant.id}
              data-view={view.id}
            />
            <span>{view.label}</span>
          </label>
        ))}
      </div>
      <button
        id={`generate-mockups-${variant.id}`}
        class="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
      >
        Generate Mockups
      </button>
      <div class="mockup-progress-container mt-4" data-variant-id={variant.id}></div>
    </div>
  )}

  {/* Modal Container */}
  <div id="mockup-modal" class="fixed inset-0 bg-black/50 items-center justify-center z-50 p-4 opacity-0 pointer-events-none transition-opacity duration-200 flex">
    <div class="w-full max-w-6xl h-[90vh] flex flex-col bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div class="border-b border-gray-200 px-4 py-3 flex-shrink-0">
        <div class="flex justify-between items-center">
          <div>
            <h2 class="text-xl font-semibold text-gray-900" id="variant-name">Loading...</h2>
            <p class="text-xs text-gray-600 mt-1" id="variant-details"></p>
          </div>
          <div class="space-x-2">
            <button 
              id="debug-btn"
              class="inline-flex items-center px-2 py-1 border border-gray-300 rounded-md shadow-sm text-xs font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Debug
            </button>
            <button 
              id="assign-selected-btn"
              class="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Assign Selected
            </button>
            <button 
              id="remove-all-btn"
              class="inline-flex items-center px-3 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Remove All
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div class="p-4 space-y-4 flex-grow overflow-y-auto">
        {/* Assigned Mockups */}
        <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
          <div class="bg-gray-100 px-4 py-2 border-b border-gray-200">
            <h3 class="text-base font-medium text-gray-900">Assigned Mockups</h3>
          </div>
          <div class="p-3">
            <div id="assigned-mockups"></div>
          </div>
        </div>

        {/* Available Mockups */}
        <div class="bg-gray-50 rounded-lg border border-gray-200 overflow-hidden">
          <div class="bg-gray-100 px-4 py-2 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-base font-medium text-gray-900">Available Mockups</h3>
            <div>
              <button id="select-all-btn" class="text-sm text-blue-600 hover:text-blue-800">Select All</button>
              <span class="mx-2 text-gray-400">|</span>
              <button id="deselect-all-btn" class="text-sm text-blue-600 hover:text-blue-800">Deselect All</button>
              <span class="mx-2 text-sm text-gray-600" id="selected-count">0 selected</span>
            </div>
          </div>
          <div class="p-3">
            <div id="available-mockups"></div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div class="bg-gray-50 px-4 py-3 border-t border-gray-200 flex-shrink-0">
        <div class="flex justify-end space-x-3">
          <button
            id="cancel-btn"
            class="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Cancel
          </button>
          <button
            id="save-btn"
            class="inline-flex items-center px-4 py-1 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Save & Process
          </button>
        </div>
      </div>
    </div>
  </div>

  <style>
    /* Ensure modal content doesn't overflow viewport */
    .modal-content {
      max-height: calc(100vh - 4rem);
    }
  </style>
</div>

<script is:inline>
  // Types only - no DOM manipulation
  // Script code moved to inline script with is:inline directive
  
  document.addEventListener('DOMContentLoaded', () => {
    // View options for mockup assignment
    const VIEW_OPTIONS = {
      'front': 'Front View',
      'back': 'Back View',
      'left': 'Left Side',
      'right': 'Right Side',
      'left-front': 'Left Front',
      'right-front': 'Right Front',
      'flat': 'Flat Layout',
      'lifestyle': 'Lifestyle Shot'
    };
    
    // Global variables
    let activeVariantId = '';
    let activeProductSlug = '';
    let selectedMockups = new Map(); // For tracking selected mockups
    let assignedMockups = []; // For tracking currently assigned mockups
    let pendingAssignments = []; // For tracking mockups to be assigned on save
    
    // Initialize modal controls with event delegation
    document.addEventListener('click', (e) => {
      const target = e.target;
      
      // Check if the clicked element is a button or has a parent button
      const button = target.closest('button');
      if (!button) return;
      
      console.log('Button clicked:', button);
      console.log('Button classes:', button.className);
      console.log('Button data attributes:', {
        filename: button.getAttribute('data-filename'),
        view: button.getAttribute('data-view'),
        variantId: button.getAttribute('data-variant-id'),
        productSlug: button.getAttribute('data-product-slug')
      });
      
      const buttonId = button.id;
      
      if (buttonId === 'cancel-btn') {
        hideModal();
      } else if (buttonId === 'save-btn') {
        saveAndProcess();
      } else if (buttonId === 'remove-all-btn') {
        removeAllMockups();
      } else if (buttonId === 'select-all-btn') {
        selectAllMockups();
      } else if (buttonId === 'deselect-all-btn') {
        deselectAllMockups();
      } else if (buttonId === 'assign-selected-btn') {
        assignSelectedMockups();
      } else if (buttonId === 'debug-btn') {
        debugMockupModal();
      } else if (buttonId.startsWith('generate-mockups-')) {
        const variantId = buttonId.replace('generate-mockups-', '');
        handleMockupGeneration(button, variantId);
      }
      
      // Handle assign and remove buttons with data attributes
      if (button.classList.contains('assign-btn')) {
        console.log('Assign button clicked!');
        const filename = button.getAttribute('data-filename');
        const view = button.getAttribute('data-view');
        const variantId = button.getAttribute('data-variant-id');
        const productSlug = button.getAttribute('data-product-slug');
        
        console.log('Assign button data:', { filename, view, variantId, productSlug });
        
        if (filename && view && variantId && productSlug) {
          assignMockup(filename, view, variantId, productSlug);
        } else {
          console.error('Missing required data attributes for assign button');
        }
      } else if (button.classList.contains('remove-btn')) {
        console.log('Remove button clicked!');
        const filename = button.getAttribute('data-filename');
        const variantId = button.getAttribute('data-variant-id');
        
        console.log('Remove button data:', { filename, variantId });
        
        if (filename && variantId) {
          removeMockup(filename, view, variantId, productSlug);
        } else {
          console.error('Missing required data attributes for remove button');
        }
      }
    });
    
    // Add event delegation for mockup selection checkboxes and view selectors
    document.addEventListener('change', (e) => {
      const target = e.target;
      
      // Handle mockup selection checkboxes
      if (target.classList.contains('mockup-select')) {
        const filename = target.getAttribute('data-filename');
        const defaultView = target.getAttribute('data-view');
        const uniqueId = target.getAttribute('data-unique-id');
        
        console.log('Mockup selection changed:', {
          element: target,
          filename,
          defaultView,
          uniqueId,
          checked: target.checked
        });
        
        if (filename) {
          if (target.checked) {
            // Find the associated view select dropdown using the unique ID
            const mockupItem = target.closest('.mockup-item');
            const viewSelect = mockupItem ? mockupItem.querySelector(`.mockup-view-select[data-unique-id="${uniqueId}"]`) : null;
            
            console.log('Found view select:', {
              mockupItem,
              viewSelect,
              viewSelectValue: viewSelect ? viewSelect.value : 'none',
              uniqueId
            });
            
            // Store the mockup with its view and element references
            const viewValue = viewSelect ? viewSelect.value : defaultView;
            selectedMockups.set(filename, { 
              view: viewValue,
              checkbox: target,
              viewSelect: viewSelect,
              uniqueId
            });
            
            console.log('🔍 DEBUG: Mockup selected via checkbox:', {
              filename,
              defaultView,
              viewSelectValue: viewSelect ? viewSelect.value : 'N/A',
              finalViewValue: viewValue,
              uniqueId,
              timestamp: new Date().toISOString()
            });
            
            console.log(`Added to selectedMockups: ${filename} -> ${viewValue} (${uniqueId})`);
            console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
          } else {
            // Remove from selection
            selectedMockups.delete(filename);
            console.log(`Removed from selectedMockups: ${filename}`);
            console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
          }
          updateSelectedCount();
        }
      }
      
      // Handle view select changes
      if (target.classList.contains('mockup-view-select')) {
        const filename = target.getAttribute('data-filename');
        const uniqueId = target.getAttribute('data-unique-id');
        
        console.log('View selection changed:', {
          element: target,
          filename,
          uniqueId,
          value: target.value
        });
        
        const mockupItem = target.closest('.mockup-item');
        const checkbox = mockupItem ? mockupItem.querySelector(`.mockup-select[data-unique-id="${uniqueId}"]`) : null;
        
        console.log('Associated checkbox:', {
          mockupItem,
          checkbox,
          checkboxChecked: checkbox ? checkbox.checked : 'no checkbox',
          checkboxFilename: checkbox ? checkbox.getAttribute('data-filename') : 'no checkbox',
          uniqueId
        });
        
        if (checkbox && checkbox.checked) {
          const checkboxFilename = checkbox.getAttribute('data-filename');
          if (checkboxFilename && selectedMockups.has(checkboxFilename)) {
            // Update the view for this mockup
            const mockupData = selectedMockups.get(checkboxFilename);
            const oldView = mockupData.view;
            mockupData.view = target.value;
            selectedMockups.set(checkboxFilename, mockupData);
            
            console.log('🔍 DEBUG: Updated selectedMockups via dropdown change:', {
              filename,
              checkboxFilename,
              uniqueId,
              oldView,
              newView: target.value,
              mapSizeBefore: selectedMockups.size,
              mapSizeAfter: selectedMockups.size,
              updatedMapEntry: selectedMockups.get(checkboxFilename),
              allMapEntries: Array.from(selectedMockups.entries()),
              timestamp: new Date().toISOString()
            });
            
            console.log(`Updated view in selectedMockups: ${checkboxFilename} from ${oldView} to ${target.value} (${uniqueId})`);
            console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
          } else {
            console.log('🔍 DEBUG: Dropdown change NOT applied because:', {
              checkboxFilename,
              hasInMap: selectedMockups.has(checkboxFilename),
              mapKeys: Array.from(selectedMockups.keys()),
              filename,
              uniqueId,
              timestamp: new Date().toISOString()
            });
          }
        } else {
          console.log('🔍 DEBUG: Dropdown change NOT applied because checkbox not checked:', {
            checkboxExists: !!checkbox,
            checkboxChecked: checkbox ? checkbox.checked : 'N/A',
            filename,
            uniqueId,
            timestamp: new Date().toISOString()
          });
        }
      }
    });
    
    // Add keyboard event listener for Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideModal();
      }
    });
    
    // Expose modal API to window
    window.mockupModal = {
      show: async (variantId, productSlug) => {
        activeVariantId = variantId;
        activeProductSlug = productSlug;
        
        const modal = document.getElementById('mockup-modal');
        if (modal) {
          modal.classList.remove('opacity-0');
          modal.classList.remove('pointer-events-none');
          modal.style.opacity = '1';
          modal.style.pointerEvents = 'auto';
        }
        
        // Clear selected mockups
        selectedMockups.clear();
        updateSelectedCount();
        
        await loadMockups(variantId, productSlug);
        
        // Add direct event handlers to buttons as a fallback
        setTimeout(() => {
          console.log('Adding direct event handlers to buttons');
          
          // Add handlers to assign buttons
          document.querySelectorAll('.assign-btn').forEach(button => {
            console.log('Found assign button:', button);
            button.addEventListener('click', function(e) {
              e.preventDefault();
              console.log('Direct assign button click handler');
              const filename = this.getAttribute('data-filename');
              const view = this.getAttribute('data-view');
              const variantId = this.getAttribute('data-variant-id');
              const productSlug = this.getAttribute('data-product-slug');
              
              console.log('Assign button data from direct handler:', { filename, view, variantId, productSlug });
              
              if (filename && view && variantId && productSlug) {
                assignMockup(filename, view, variantId, productSlug);
              }
            });
          });
          
          // Add handlers to remove buttons
          document.querySelectorAll('.remove-btn').forEach(button => {
            console.log('Found remove button:', button);
            button.addEventListener('click', function(e) {
              e.preventDefault();
              console.log('Direct remove button click handler');
              const filename = this.getAttribute('data-filename');
              const variantId = this.getAttribute('data-variant-id');
              
              console.log('Remove button data from direct handler:', { filename, variantId });
              
              if (filename && variantId) {
                removeMockup(filename, view, variantId, productSlug);
              }
            });
          });
          
          // Add handlers to mockup selection checkboxes
          document.querySelectorAll('.mockup-select').forEach(checkbox => {
            console.log('Setting up direct handler for checkbox:', checkbox);
            checkbox.addEventListener('change', function() {
              const filename = this.getAttribute('data-filename');
              const defaultView = this.getAttribute('data-view');
              const uniqueId = this.getAttribute('data-unique-id');
              
              console.log('Direct checkbox handler triggered:', {
                checkbox: this,
                filename,
                defaultView,
                uniqueId,
                checked: this.checked
              });
              
              if (filename) {
                if (this.checked) {
                  // Find the associated view select dropdown using the unique ID
                  const mockupItem = this.closest('.mockup-item');
                  const viewSelect = mockupItem ? mockupItem.querySelector(`.mockup-view-select[data-unique-id="${uniqueId}"]`) : null;
                  
                  console.log('Direct handler found view select:', {
                    mockupItem,
                    viewSelect,
                    viewSelectValue: viewSelect ? viewSelect.value : 'none',
                    uniqueId
                  });
                  
                  // Store the mockup with its view and element references
                  const viewValue = viewSelect ? viewSelect.value : defaultView;
                  selectedMockups.set(filename, { 
                    view: viewValue,
                    checkbox: this,
                    viewSelect: viewSelect,
                    uniqueId
                  });
                  
                  console.log('🔍 DEBUG: Mockup selected via checkbox:', {
                    filename,
                    defaultView,
                    viewSelectValue: viewSelect ? viewSelect.value : 'N/A',
                    finalViewValue: viewValue,
                    uniqueId,
                    timestamp: new Date().toISOString()
                  });
                  
                  console.log(`Added to selectedMockups: ${filename} -> ${viewValue} (${uniqueId})`);
                  console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
                } else {
                  // Remove from selection
                  selectedMockups.delete(filename);
                  console.log(`Removed from selectedMockups: ${filename}`);
                  console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
                }
                updateSelectedCount();
              }
            });
          });
          
          // Add handlers to view select dropdowns
          document.querySelectorAll('.mockup-view-select').forEach(select => {
            console.log('Setting up direct handler for view select:', select);
            select.addEventListener('change', function() {
              const filename = this.getAttribute('data-filename');
              const uniqueId = this.getAttribute('data-unique-id');
              
              console.log('Direct view select handler triggered:', {
                select: this,
                selectFilename: filename,
                uniqueId,
                value: this.value
              });
              
              console.log('🔍 DEBUG: View dropdown changed:', {
                filename: filename,
                newValue: this.value,
                uniqueId,
                timestamp: new Date().toISOString()
              });
              
              const mockupItem = this.closest('.mockup-item');
              const checkbox = mockupItem ? mockupItem.querySelector(`.mockup-select[data-unique-id="${uniqueId}"]`) : null;
              
              console.log('Direct handler found checkbox:', {
                mockupItem,
                checkbox,
                checkboxChecked: checkbox ? checkbox.checked : 'no checkbox',
                checkboxFilename: checkbox ? checkbox.getAttribute('data-filename') : 'no checkbox',
                uniqueId
              });
              
              if (checkbox && checkbox.checked) {
                const checkboxFilename = checkbox.getAttribute('data-filename');
                if (checkboxFilename && selectedMockups.has(checkboxFilename)) {
                  // Update the view for this mockup
                  const mockupData = selectedMockups.get(checkboxFilename);
                  const oldView = mockupData.view;
                  mockupData.view = this.value;
                  selectedMockups.set(checkboxFilename, mockupData);
                  
                  console.log('🔍 DEBUG: Updated selectedMockups via dropdown change:', {
                    filename,
                    checkboxFilename,
                    uniqueId,
                    oldView,
                    newView: this.value,
                    mapSizeBefore: selectedMockups.size,
                    mapSizeAfter: selectedMockups.size,
                    updatedMapEntry: selectedMockups.get(checkboxFilename),
                    allMapEntries: Array.from(selectedMockups.entries()),
                    timestamp: new Date().toISOString()
                  });
                  
                  console.log(`Updated view in selectedMockups: ${checkboxFilename} from ${oldView} to ${this.value} (${uniqueId})`);
                  console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
                } else {
                  console.log('🔍 DEBUG: Dropdown change NOT applied because:', {
                    checkboxFilename,
                    hasInMap: selectedMockups.has(checkboxFilename),
                    mapKeys: Array.from(selectedMockups.keys()),
                    filename,
                    uniqueId,
                    timestamp: new Date().toISOString()
                  });
                }
              } else {
                console.log('🔍 DEBUG: Dropdown change NOT applied because checkbox not checked:', {
                  checkboxExists: !!checkbox,
                  checkboxChecked: checkbox ? checkbox.checked : 'N/A',
                  filename,
                  uniqueId,
                  timestamp: new Date().toISOString()
                });
              }
            });
          });
        }, 500); // Small delay to ensure DOM is updated
      },
      hide: () => {
        hideModal();
      }
    };
    
    // Helper functions
    function hideModal() {
      console.log('Hiding mockup modal');
      
      const modal = document.getElementById('mockup-modal');
      if (modal) {
        modal.classList.add('opacity-0', 'pointer-events-none');
      }
      
      // Clear any pending changes
      selectedMockups.clear();
      pendingAssignments = [];
      
      // Remove any save reminders
      document.querySelectorAll('.save-reminder').forEach(el => el.remove());
    }
    
    function updateSelectedCount() {
      const countElement = document.getElementById('selected-count');
      if (countElement) {
        const count = selectedMockups.size;
        countElement.textContent = `${count} selected`;
        
        // Update button state based on selection
        const assignButton = document.getElementById('assign-selected-btn');
        if (assignButton) {
          assignButton.disabled = count === 0;
          if (count === 0) {
            assignButton.classList.add('opacity-50', 'cursor-not-allowed');
          } else {
            assignButton.classList.remove('opacity-50', 'cursor-not-allowed');
          }
        }
      }
    }
    
    // Function to select all available mockups
    function selectAllMockups() {
      console.log('Selecting all mockups');
      
      // Get all mockup checkboxes in the available mockups section
      const checkboxes = document.querySelectorAll('#available-mockups .mockup-select');
      console.log(`Found ${checkboxes.length} checkboxes`);
      
      checkboxes.forEach(checkbox => {
        // Only select if not already selected
        if (!checkbox.checked) {
          checkbox.checked = true;
          
          // Trigger the change event to update the selectedMockups map
          const event = new Event('change', { bubbles: true });
          checkbox.dispatchEvent(event);
        }
      });
      
      updateSelectedCount();
    }
    
    // Function to deselect all mockups
    function deselectAllMockups() {
      console.log('Deselecting all mockups');
      
      // Get all selected mockup checkboxes
      const checkboxes = document.querySelectorAll('#available-mockups .mockup-select:checked');
      console.log(`Found ${checkboxes.length} selected checkboxes`);
      
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
        
        // Trigger the change event to update the selectedMockups map
        const event = new Event('change', { bubbles: true });
        checkbox.dispatchEvent(event);
      });
      
      // Clear the selectedMockups map
      selectedMockups.clear();
      updateSelectedCount();
    }
    
    function assignSelectedMockups() {
      if (selectedMockups.size === 0) {
        alert('Please select at least one mockup to assign');
        return;
      }
      
      // Confirm assignment
      if (!confirm(`Assign ${selectedMockups.size} selected mockup(s)?`)) {
        return;
      }
      
      // Convert the Map to an array for easier handling
      const mockupsToAssign = Array.from(selectedMockups.entries()).map(([filename, data]) => ({
        filename,
        view: data.view
      }));
      
      console.log('🔍 DEBUG: About to assign mockups:', {
        selectedMockupsSize: selectedMockups.size,
        selectedMockupsEntries: Array.from(selectedMockups.entries()),
        mockupsToAssign,
        timestamp: new Date().toISOString()
      });
      
      console.log('Mockups to assign:', mockupsToAssign);
      
      // Store in pendingAssignments instead of sending to API immediately
      mockupsToAssign.forEach(mockup => {
        // Add to pending assignments
        pendingAssignments.push({
          mockupFile: mockup.filename,
          view: mockup.view
        });
        
        console.log(`Added to pending assignments: ${mockup.filename} -> ${mockup.view}`);
      });
      
      console.log('Current pending assignments:', pendingAssignments);
      
      // Update UI to show the pending assignments
      // Create temporary mockup objects to show in the UI
      const tempMockups = mockupsToAssign.map(mockup => ({
        view: mockup.view,
        filename: mockup.filename,
        url: `/api/v1/admin/products/mockup?filename=${encodeURIComponent(mockup.filename)}`,
        isPending: true // Mark as pending
      }));
      
      // Combine existing assigned mockups with pending ones for display
      const combinedMockups = [
        ...assignedMockups,
        ...tempMockups
      ];
      
      // Re-render the assigned mockups section
      renderMockups(combinedMockups, document.getElementById('assigned-mockups'), true);
      
      // Clear selections after assigning
      selectedMockups = new Map();
      updateSelectedCount();
      
      // Uncheck all checkboxes
      document.querySelectorAll('.mockup-select:checked').forEach(checkbox => {
        checkbox.checked = false;
      });
      
      // Show a message about saving changes
      const saveReminderEl = document.createElement('div');
      saveReminderEl.className = 'save-reminder bg-yellow-100 text-yellow-800 p-3 rounded-md mt-4 text-center';
      saveReminderEl.innerHTML = `
        <p class="font-medium">You have ${pendingAssignments.length} pending mockup assignment(s).</p>
        <p class="text-sm mt-1">Click "Save & Process" to apply these changes to the database.</p>
      `;
      
      const assignedContainer = document.getElementById('assigned-mockups');
      if (assignedContainer && !document.querySelector('.save-reminder')) {
        assignedContainer.parentNode.insertBefore(saveReminderEl, assignedContainer);
      }
    }
    
    // Function to load mockups for a variant
    async function loadMockups(variantId, productSlug) {
      if (!variantId || !productSlug) {
        console.error('Missing variantId or productSlug');
        return;
      }
      
      // Store active variant and product
      activeVariantId = variantId;
      activeProductSlug = productSlug;
      
      // Reset selections and pending changes
      selectedMockups = new Map();
      pendingAssignments = [];
      
      try {
        // Show loading state
        document.getElementById('assigned-mockups').innerHTML = '<p class="text-center py-4">Loading assigned mockups...</p>';
        document.getElementById('available-mockups').innerHTML = '<p class="text-center py-4">Loading available mockups...</p>';
        
        // Get variant info with assigned mockups
        const variantResponse = await fetch(`/api/v1/admin/products/mockup?action=info&variantId=${variantId}`);
        
        if (!variantResponse.ok) {
          throw new Error(`Failed to fetch variant info: ${variantResponse.status} ${variantResponse.statusText}`);
        }
        
        const variantData = await variantResponse.json();
        console.log('Variant data:', variantData);
        
        // Update variant name and details
        document.getElementById('variant-name').textContent = variantData.variant.name || 'Unknown Variant';
        document.getElementById('variant-details').textContent = `Color: ${variantData.variant.color || 'Unknown'}, Size: ${variantData.variant.size || 'N/A'}`;
        
        // Store assigned mockups
        assignedMockups = Array.isArray(variantData.mockups) ? variantData.mockups : [];
        
        // Render assigned mockups
        renderMockups(assignedMockups, document.getElementById('assigned-mockups'), true);
        
        // Get available mockups
        const availableResponse = await fetch(`/api/v1/admin/products/mockup?action=available&product=${productSlug}`);
        
        if (!availableResponse.ok) {
          throw new Error(`Failed to fetch available mockups: ${availableResponse.status} ${availableResponse.statusText}`);
        }
        
        const availableData = await availableResponse.json();
        console.log('Available mockups data:', availableData);
        
        // Check if mockups is an array
        if (!Array.isArray(availableData.mockups)) {
          console.error('Expected mockups to be an array but got:', typeof availableData.mockups, availableData.mockups);
          throw new Error('Invalid mockups data format');
        }
        
        // Render available mockups
        renderMockups(availableData.mockups, document.getElementById('available-mockups'), false);
        
        // Add handlers to mockup selection checkboxes
        document.querySelectorAll('.mockup-select').forEach(checkbox => {
          console.log('Setting up direct handler for checkbox:', checkbox);
          checkbox.addEventListener('change', function() {
            const filename = this.getAttribute('data-filename');
            const defaultView = this.getAttribute('data-view');
            const uniqueId = this.getAttribute('data-unique-id');
            
            console.log('Direct checkbox handler triggered:', {
              checkbox: this,
              filename,
              defaultView,
              uniqueId,
              checked: this.checked
            });
            
            if (filename) {
              if (this.checked) {
                // Find the associated view select dropdown using the unique ID
                const mockupItem = this.closest('.mockup-item');
                const viewSelect = mockupItem ? mockupItem.querySelector(`.mockup-view-select[data-unique-id="${uniqueId}"]`) : null;
                
                console.log('Direct handler found view select:', {
                  mockupItem,
                  viewSelect,
                  viewSelectValue: viewSelect ? viewSelect.value : 'none',
                  uniqueId
                });
                
                // Store the mockup with its view and element references
                const viewValue = viewSelect ? viewSelect.value : defaultView;
                selectedMockups.set(filename, { 
                  view: viewValue,
                  checkbox: this,
                  viewSelect: viewSelect,
                  uniqueId
                });
                
                console.log('🔍 DEBUG: Mockup selected via checkbox:', {
                  filename,
                  defaultView,
                  viewSelectValue: viewSelect ? viewSelect.value : 'N/A',
                  finalViewValue: viewValue,
                  uniqueId,
                  timestamp: new Date().toISOString()
                });
                
                console.log(`Added to selectedMockups: ${filename} -> ${viewValue} (${uniqueId})`);
                console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
              } else {
                // Remove from selection
                selectedMockups.delete(filename);
                console.log(`Removed from selectedMockups: ${filename}`);
                console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
              }
              updateSelectedCount();
            }
          });
        });
        
        // Add handlers to view select dropdowns
        document.querySelectorAll('.mockup-view-select').forEach(select => {
          console.log('Setting up direct handler for view select:', select);
          select.addEventListener('change', function() {
            const filename = this.getAttribute('data-filename');
            const uniqueId = this.getAttribute('data-unique-id');
            
            console.log('Direct view select handler triggered:', {
              select: this,
              selectFilename: filename,
              uniqueId,
              value: this.value
            });
            
            console.log('🔍 DEBUG: View dropdown changed:', {
              filename: filename,
              newValue: this.value,
              uniqueId,
              timestamp: new Date().toISOString()
            });
            
            const mockupItem = this.closest('.mockup-item');
            const checkbox = mockupItem ? mockupItem.querySelector(`.mockup-select[data-unique-id="${uniqueId}"]`) : null;
            
            console.log('Direct handler found checkbox:', {
              mockupItem,
              checkbox,
              checkboxChecked: checkbox ? checkbox.checked : 'no checkbox',
              checkboxFilename: checkbox ? checkbox.getAttribute('data-filename') : 'no checkbox',
              uniqueId
            });
            
            if (checkbox && checkbox.checked) {
              const checkboxFilename = checkbox.getAttribute('data-filename');
              if (checkboxFilename && selectedMockups.has(checkboxFilename)) {
                // Update the view for this mockup
                const mockupData = selectedMockups.get(checkboxFilename);
                const oldView = mockupData.view;
                mockupData.view = this.value;
                selectedMockups.set(checkboxFilename, mockupData);
                
                console.log('🔍 DEBUG: Updated selectedMockups via dropdown change:', {
                  filename,
                  checkboxFilename,
                  uniqueId,
                  oldView,
                  newView: this.value,
                  mapSizeBefore: selectedMockups.size,
                  mapSizeAfter: selectedMockups.size,
                  updatedMapEntry: selectedMockups.get(checkboxFilename),
                  allMapEntries: Array.from(selectedMockups.entries()),
                  timestamp: new Date().toISOString()
                });
                
                console.log(`Updated view in selectedMockups: ${checkboxFilename} from ${oldView} to ${this.value} (${uniqueId})`);
                console.log('Current selectedMockups:', Array.from(selectedMockups.entries()));
              } else {
                console.log('🔍 DEBUG: Dropdown change NOT applied because:', {
                  checkboxFilename,
                  hasInMap: selectedMockups.has(checkboxFilename),
                  mapKeys: Array.from(selectedMockups.keys()),
                  filename,
                  uniqueId,
                  timestamp: new Date().toISOString()
                });
              }
            } else {
              console.log('🔍 DEBUG: Dropdown change NOT applied because checkbox not checked:', {
                checkboxExists: !!checkbox,
                checkboxChecked: checkbox ? checkbox.checked : 'N/A',
                filename,
                uniqueId,
                timestamp: new Date().toISOString()
              });
            }
          });
        });
        
        // Update selected count
        updateSelectedCount();
        
      } catch (error) {
        console.error('Error loading mockups:', error);
        document.getElementById('assigned-mockups').innerHTML = `<p class="text-center text-red-500 py-4">Error loading assigned mockups: ${error.message}</p>`;
        document.getElementById('available-mockups').innerHTML = `<p class="text-center text-red-500 py-4">Error loading available mockups: ${error.message}</p>`;
      }
    }
    
    // Function to save and process mockups
    async function saveAndProcess() {
      console.log('Save and process called');
      
      if (pendingAssignments.length === 0) {
        alert('No changes to save. Assign mockups first.');
        return;
      }
      
      // Confirm save
      if (!confirm(`Save ${pendingAssignments.length} assignment(s)?`)) {
        return;
      }
      
      // Show loading state
      const saveBtn = document.getElementById('save-btn');
      const originalSaveBtnText = saveBtn.innerHTML;
      saveBtn.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> Saving...';
      saveBtn.disabled = true;
      
      try {
        // Process assignments
        if (pendingAssignments.length > 0) {
          console.log(`Processing ${pendingAssignments.length} assignments...`);
          
          for (const assignment of pendingAssignments) {
            try {
              console.log(`Assigning mockup: ${assignment.mockupFile} -> ${assignment.view}`);
              
              const response = await fetch('/api/v1/admin/products/mockup?action=assign', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  mockupFile: assignment.mockupFile,
                  variantId: activeVariantId,
                  productSlug: activeProductSlug,
                  view: assignment.view
                })
              });
              
              if (!response.ok) {
                const errorText = await response.text().catch(() => 'Unknown error');
                console.error(`Assignment failed for ${assignment.mockupFile}:`, errorText);
              } else {
                const data = await response.json();
                console.log(`Assignment succeeded for ${assignment.mockupFile}:`, data);
              }
            } catch (error) {
              console.error(`Error assigning ${assignment.mockupFile}:`, error);
            }
            
            // Small delay between requests
            await new Promise(resolve => setTimeout(resolve, 100));
          }
        }
        
        // Process the mockups after all assignments are done
        console.log('All database updates completed, processing mockups...');
        
        try {
          const processResponse = await fetch('/api/v1/admin/products/mockup?action=process', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              variantId: activeVariantId,
              productSlug: activeProductSlug
            })
          });
          
          if (!processResponse.ok) {
            const errorText = await processResponse.text().catch(() => 'Unknown error');
            console.error('Process failed:', errorText);
            throw new Error(`Processing failed: ${errorText}`);
          }
          
          const processData = await processResponse.json();
          console.log('Process result:', processData);
          
          // Show success message
          alert(`Successfully processed ${processData.details?.processedCount || 0} mockup(s).`);
          
          // Reload mockups to show the updated state
          await loadMockups(activeVariantId, activeProductSlug);
          
          // Clear pending changes
          pendingAssignments = [];
          
          // Remove any save reminders
          document.querySelectorAll('.save-reminder').forEach(el => el.remove());
          
        } catch (processError) {
          console.error('Error processing mockups:', processError);
          throw processError;
        }
        
      } catch (error) {
        console.error('Error in save and process:', error);
        alert(`Error: ${error.message || 'Unknown error occurred'}`);
      } finally {
        // Restore save button
        saveBtn.innerHTML = originalSaveBtnText;
        saveBtn.disabled = false;
      }
    }
    
    // Function to remove all mockups
    async function removeAllMockups() {
      console.log('Removing all mockups');
      
      if (!confirm('Are you sure you want to remove ALL mockups from this variant?')) {
        return;
      }
      
      try {
        // Show loading state
        const removeAllBtn = document.getElementById('remove-all-btn');
        const originalText = removeAllBtn.innerHTML;
        removeAllBtn.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> Removing...';
        removeAllBtn.disabled = true;
        
        // Show loading in the assigned mockups container
        const assignedContainer = document.getElementById('assigned-mockups');
        if (assignedContainer) {
          assignedContainer.innerHTML = '<p class="text-center py-4">Removing all mockups...</p>';
        }
        
        // Send the removal request to the API immediately
        const response = await fetch('/api/v1/admin/products/mockup?action=remove', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            variantId: activeVariantId,
            removeAll: true
          })
        });
        
        if (!response.ok) {
          const errorText = await response.text().catch(() => 'Unknown error');
          console.error('Remove all failed:', errorText);
          throw new Error(`Failed to remove all mockups: ${errorText}`);
        }
        
        const result = await response.json();
        console.log('Remove all result:', result);
        
        // Clear the assigned mockups array
        assignedMockups = [];
        
        // Re-render the assigned mockups section
        renderMockups(assignedMockups, document.getElementById('assigned-mockups'), true);
        
        // Show a success message
        const successMessage = document.createElement('div');
        successMessage.className = 'bg-green-100 text-green-800 p-2 rounded-md mb-3 text-sm text-center';
        successMessage.innerHTML = `All mockups removed successfully.`;
        
        if (assignedContainer) {
          assignedContainer.parentNode.insertBefore(successMessage, assignedContainer);
          
          // Remove the message after 3 seconds
          setTimeout(() => {
            successMessage.remove();
          }, 3000);
        }
      } catch (error) {
        console.error('Error removing all mockups:', error);
        alert(`Error: ${error.message}`);
        
        // Reset UI
        await loadMockups(activeVariantId, activeProductSlug);
      } finally {
        // Restore the remove all button
        const removeAllBtn = document.getElementById('remove-all-btn');
        if (removeAllBtn) {
          removeAllBtn.innerHTML = 'Remove All';
          removeAllBtn.disabled = false;
        }
      }
    }
    
    function handleMockupGeneration(button, variantId) {
      console.log(`Generating mockups for variant ${variantId}`);
      
      // Get selected views
      const selectedViews = [];
      document.querySelectorAll(`input[type="checkbox"][data-variant-id="${variantId}"]:checked`).forEach(checkbox => {
        const view = checkbox.getAttribute('data-view');
        if (view) selectedViews.push(view);
      });
      
      if (selectedViews.length === 0) {
        alert('Please select at least one view to generate');
        return;
      }
      
      // This would generate mockups
      fetch('/api/v1/admin/products/mockup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ variantId, views: selectedViews })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Generation result:', data);
        if (data.success) {
          alert('Mockup generation started! Check back in a few minutes.');
        } else {
          throw new Error(data.message || 'Failed to generate mockups');
        }
      })
      .catch(error => {
        console.error('Error generating mockups:', error);
        alert('Failed to generate mockups: ' + error.message);
      });
    }

    // Define local functions for event delegation
    async function assignMockup(filename, view, variantId, productSlug, shouldReload = true) {
      console.log(`Assigning mockup ${filename} for view ${view} to variant ${variantId}`);
      
      // If this is a direct button click (not bulk assignment), check if there's a view selector
      if (shouldReload) {
        // Try to find the mockup item and its view selector
        const mockupItems = document.querySelectorAll('.mockup-item');
        for (const item of mockupItems) {
          const itemFilename = item.querySelector('.mockup-select')?.getAttribute('data-filename');
          if (itemFilename === filename) {
            const viewSelect = item.querySelector('.mockup-view-select');
            if (viewSelect) {
              // Use the current value from the view selector
              view = viewSelect.value;
              console.log(`Updated view from selector: ${view}`);
            }
            break;
          }
        }
      }
      
      // Ensure view is not undefined or empty
      if (!view) {
        console.warn(`View is empty for ${filename}, defaulting to 'front'`);
        view = 'front';
      }
      
      console.log(`Making API call to assign mockup:`, {
        mockupFile: filename,
        variantId,
        productSlug,
        view
      });
      
      try {
        const response = await fetch('/api/v1/admin/products/mockup?action=assign', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            mockupFile: filename,
            variantId,
            productSlug,
            view
          })
        });
        
        if (!response.ok) {
          const errorText = await response.text().catch(() => 'Unknown error');
          console.error('Error response from assign API:', errorText);
          throw new Error(`Failed to assign mockup: ${response.status} ${errorText}`);
        }
        
        const result = await response.json();
        console.log('Assign result:', result);
        
        if (result.success) {
          // Reload mockups to show the updated state if shouldReload is true
          if (shouldReload) {
            await loadMockups(variantId, productSlug);
          }
          return result;
        } else {
          throw new Error(result.message || 'Unknown error');
        }
      } catch (error) {
        console.error('Error assigning mockup:', error);
        if (shouldReload) {
          alert('Failed to assign mockup: ' + error.message);
        }
        throw error;
      }
    }
    
    // Function to remove a mockup
    async function removeMockup(filename, view, variantId, productSlug, reloadAfter = true) {
      console.log(`Removing mockup: ${filename} (${view}) from variant ${variantId}`);
      
      if (!confirm(`Remove this mockup (${view})?`)) {
        return;
      }
      
      try {
        // Show loading state on the button if possible
        const removeButtons = document.querySelectorAll('.remove-mockup-btn');
        let targetButton = null;
        
        removeButtons.forEach(button => {
          if (button.getAttribute('data-filename') === filename && 
              button.getAttribute('data-view') === view) {
            targetButton = button;
          }
        });
        
        if (targetButton) {
          const originalHTML = targetButton.innerHTML;
          targetButton.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span>';
          targetButton.disabled = true;
        }
        
        // Send the removal request to the API immediately
        const response = await fetch('/api/v1/admin/products/mockup?action=remove', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            variantId: variantId,
            view: view,
            mockupFilename: filename,
            removeAll: false
          })
        });
        
        if (!response.ok) {
          const errorText = await response.text().catch(() => 'Unknown error');
          console.error(`Removal failed for ${filename}:`, errorText);
          throw new Error(`Failed to remove mockup: ${errorText}`);
        }
        
        const result = await response.json();
        console.log(`Removal succeeded for ${filename}:`, result);
        
        // Update UI by removing this mockup from the assigned mockups list
        const updatedAssignedMockups = assignedMockups.filter(mockup => {
          // Filter out the mockup that matches both filename and view
          return !(mockup.filename === filename && mockup.view === view);
        });
        
        // Update the assignedMockups array
        assignedMockups = updatedAssignedMockups;
        
        // Re-render the assigned mockups section
        renderMockups(assignedMockups, document.getElementById('assigned-mockups'), true);
        
        // Show a success message
        const successMessage = document.createElement('div');
        successMessage.className = 'bg-green-100 text-green-800 p-2 rounded-md mb-3 text-sm text-center';
        successMessage.innerHTML = `Mockup removed successfully.`;
        
        const assignedContainer = document.getElementById('assigned-mockups');
        if (assignedContainer) {
          assignedContainer.parentNode.insertBefore(successMessage, assignedContainer);
          
          // Remove the message after 3 seconds
          setTimeout(() => {
            successMessage.remove();
          }, 3000);
        }
      } catch (error) {
        console.error('Error removing mockup:', error);
        alert(`Error: ${error.message}`);
        
        // Reset UI if there was an error
        if (reloadAfter) {
          await loadMockups(variantId, productSlug);
        }
      }
    }

    // Add assignMockup function to the window object so it can be called from inline onclick handlers
    window.assignMockup = assignMockup;
    
    // Add removeMockup function to the window object
    window.removeMockup = removeMockup;

    function debugMockupModal() {
      console.group('MockupModal Debug');
      console.log('Active Variant ID:', activeVariantId);
      console.log('Active Product Slug:', activeProductSlug);
      console.log('Selected Mockups:', {
        size: selectedMockups.size,
        entries: Array.from(selectedMockups.entries())
      });
      
      // Check if the data-filename attributes match what's in selectedMockups
      const checkboxes = document.querySelectorAll('.mockup-select:checked');
      console.log('Checked checkboxes:', {
        count: checkboxes.length,
        elements: Array.from(checkboxes).map(cb => ({
          filename: cb.getAttribute('data-filename'),
          defaultView: cb.getAttribute('data-view'),
          inSelectedMockups: selectedMockups.has(cb.getAttribute('data-filename'))
        }))
      });
      
      // Check view selectors
      const viewSelects = document.querySelectorAll('.mockup-view-select');
      console.log('View selectors:', {
        count: viewSelects.length,
        elements: Array.from(viewSelects).map(vs => ({
          filename: vs.getAttribute('data-filename'),
          value: vs.value,
          mockupItem: vs.closest('.mockup-item'),
          associatedCheckbox: vs.closest('.mockup-item')?.querySelector('.mockup-select'),
          checkboxChecked: vs.closest('.mockup-item')?.querySelector('.mockup-select')?.checked
        }))
      });
      
      // Check if we have any duplicate data-filename attributes
      const allFilenames = Array.from(document.querySelectorAll('[data-filename]')).map(el => el.getAttribute('data-filename'));
      const filenameCount = allFilenames.reduce((acc, filename) => {
        acc[filename] = (acc[filename] || 0) + 1;
        return acc;
      }, {});
      
      const duplicates = Object.entries(filenameCount).filter(([_, count]) => count > 1);
      console.log('Filename attribute counts:', filenameCount);
      console.log('Duplicate filenames:', duplicates);
      
      // Test direct assignment
      if (selectedMockups.size > 0) {
        const [firstFilename, firstData] = Array.from(selectedMockups.entries())[0];
        console.log('Testing direct assignment for first selected mockup:', {
          filename: firstFilename,
          view: firstData.view
        });
        
        // Create a test assignment function
        const testAssignment = async () => {
          try {
            const result = await fetch('/api/v1/admin/products/mockup?action=assign', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                mockupFile: firstFilename,
                variantId: activeVariantId,
                productSlug: activeProductSlug,
                view: firstData.view
              })
            });
            
            if (!result.ok) {
              const errorText = await result.text().catch(() => 'Unknown error');
              console.error('Test assignment failed:', errorText);
            } else {
              const data = await result.json();
              console.log('Test assignment succeeded:', data);
            }
          } catch (error) {
            console.error('Error in test assignment:', error);
          }
        };
        
        // Ask for confirmation before running the test
        if (confirm('Run test assignment for first selected mockup?')) {
          testAssignment();
        }
      }
      
      console.groupEnd();
    }

    function renderMockups(mockups, container, isAssigned = false) {
      console.log(`Rendering ${isAssigned ? 'assigned' : 'available'} mockups:`, mockups);
      
      if (!Array.isArray(mockups) || mockups.length === 0) {
        container.innerHTML = `<p class="text-center text-gray-500 py-4">No ${isAssigned ? 'assigned' : 'available'} mockups found.</p>`;
        return;
      }
      
      // Start with a grid container
      let html = '<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">';
      
      mockups.forEach((mockup, index) => {
        // Create a unique identifier for this mockup that includes both filename and view
        // This ensures we don't have duplicate data-filename attributes
        const uniqueId = `${mockup.filename || mockup.view}-${index}`;
        
        // Check if this mockup is pending assignment
        const isPending = mockup.isPending === true;
        
        html += `
          <div class="mockup-item border rounded-lg overflow-hidden ${isPending ? 'bg-blue-50' : 'bg-white'} shadow-sm" data-mockup-id="${uniqueId}">
            <div class="relative">
              <img 
                src="${mockup.url || `/api/v1/admin/products/mockup?filename=${encodeURIComponent(mockup.filename)}`}" 
                alt="${mockup.view || 'Mockup'}" 
                class="w-full h-32 object-contain"
                loading="lazy"
              />
              <div class="absolute top-2 left-2 bg-gray-800 bg-opacity-70 text-white text-xs px-2 py-1 rounded">
                ${mockup.view || 'Unknown view'}
              </div>
              ${isPending ? `
                <div class="absolute top-2 right-2 bg-blue-600 text-white text-xs px-2 py-1 rounded">
                  Pending
                </div>
              ` : isAssigned ? `
                <button 
                  class="absolute top-2 right-2 bg-red-600 text-white p-1 rounded-full hover:bg-red-700 remove-mockup-btn"
                  data-filename="${mockup.filename || ''}"
                  data-view="${mockup.view || ''}"
                  title="Remove this mockup"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              ` : ''}
            </div>
            <div class="p-2">
              <div class="text-xs text-gray-500 truncate mb-1" title="${mockup.filename || ''}">
                ${mockup.filename ? mockup.filename.substring(0, 20) + (mockup.filename.length > 20 ? '...' : '') : 'No filename'}
              </div>
              
              ${isAssigned ? `
                <div class="flex justify-between items-center">
                  <span class="text-sm font-medium">${mockup.view || 'Unknown view'}</span>
                  ${isPending ? `<span class="text-xs text-blue-600">Pending</span>` : ''}
                </div>
              ` : `
                <div class="flex flex-col space-y-1">
                  <div class="flex items-center">
                    <input 
                      type="checkbox" 
                      class="mockup-select h-4 w-4 text-blue-600 rounded border-gray-300" 
                      data-filename="${mockup.filename || ''}" 
                      data-view="${mockup.view || 'front'}"
                      data-unique-id="${uniqueId}"
                    />
                    <label class="ml-2 text-xs text-gray-700">Select</label>
                  </div>
                  
                  <div>
                    <select 
                      class="mockup-view-select text-xs border-gray-300 rounded w-full" 
                      data-filename="${mockup.filename || ''}"
                      data-unique-id="${uniqueId}"
                    >
                      <option value="front" ${mockup.view === 'front' ? 'selected' : ''}>Front</option>
                      <option value="back" ${mockup.view === 'back' ? 'selected' : ''}>Back</option>
                      <option value="left" ${mockup.view === 'left' ? 'selected' : ''}>Left</option>
                      <option value="right" ${mockup.view === 'right' ? 'selected' : ''}>Right</option>
                      <option value="left-front" ${mockup.view === 'left-front' ? 'selected' : ''}>Left Front</option>
                      <option value="right-front" ${mockup.view === 'right-front' ? 'selected' : ''}>Right Front</option>
                      <option value="flat" ${mockup.view === 'flat' ? 'selected' : ''}>Flat</option>
                      <option value="lifestyle" ${mockup.view === 'lifestyle' ? 'selected' : ''}>Lifestyle</option>
                    </select>
                  </div>
                </div>
              `}
            </div>
          </div>
        `;
      });
      
      // Close the grid container
      html += '</div>';
      
      container.innerHTML = html;
      
      // Add event handlers to remove buttons if this is for assigned mockups
      if (isAssigned) {
        container.querySelectorAll('.remove-mockup-btn').forEach(button => {
          button.addEventListener('click', function() {
            const filename = this.getAttribute('data-filename');
            const view = this.getAttribute('data-view');
            if (filename || view) {
              console.log(`Removing mockup: ${filename} (${view})`);
              removeMockup(filename, view, activeVariantId, activeProductSlug);
            }
          });
        });
      }
    }

    // Function to show the modal
    function show(variantId, productSlug) {
      console.log(`Showing mockup modal for variant ${variantId} and product ${productSlug}`);
      
      // Make sure we have the necessary elements
      const modal = document.getElementById('mockup-modal');
      const assignedContainer = document.getElementById('assigned-mockups');
      const availableContainer = document.getElementById('available-mockups');
      
      if (!modal || !assignedContainer || !availableContainer) {
        console.error('Missing required elements:', { 
          modal: !!modal, 
          assignedContainer: !!assignedContainer, 
          availableContainer: !!availableContainer 
        });
        alert('Error: Missing required elements in the modal');
        return;
      }
      
      // Show loading state
      assignedContainer.innerHTML = '<p class="text-center py-4">Loading assigned mockups...</p>';
      availableContainer.innerHTML = '<p class="text-center py-4">Loading available mockups...</p>';
      
      // Show the modal
      modal.classList.remove('opacity-0', 'pointer-events-none');
      
      // Store the active variant and product
      activeVariantId = variantId;
      activeProductSlug = productSlug;
      
      // Reset selections and pending changes
      selectedMockups.clear();
      pendingAssignments = [];
      
      // Load mockups
      loadMockups(variantId, productSlug);
    }

    // Expose the show function to the window object
    window.showMockupModal = show;

    // Initialize the modal
    console.log('MockupModal initialized');
  });
</script>