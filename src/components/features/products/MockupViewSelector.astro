---
interface MockupSettings {
  selected_views?: string[];
}

interface Variant {
  id: string;
  mockup_settings?: MockupSettings;
}

interface Props {
  variant: Variant;
}

const { variant } = Astro.props;

const viewOptions = [
  { id: 'front', label: 'Front' },
  { id: 'back', label: 'Back' },
  { id: 'front-2', label: 'Front 2' },
  { id: 'back-2', label: 'Back 2' },
  { id: 'left-front', label: 'Left Front' },
  { id: 'right-front', label: 'Right Front' },
  { id: 'front-and-back', label: 'Front & Back' },
  { id: 'flat', label: 'Flat' },
  { id: 'lifestyle', label: 'Lifestyle' }
];

// Get the initially selected views
const selectedViews = variant.mockup_settings?.selected_views || [];
---

<div class="grid grid-cols-3 gap-2 mb-4">
  {viewOptions.map(view => (
    <label class="flex items-center space-x-2">
      <input
        type="checkbox"
        name={`mockup-view-${variant.id}-${view.id}`}
        value={view.id}
        class="rounded text-blue-600"
        checked={selectedViews.includes(view.id)}
        data-variant-id={variant.id}
        data-view={view.id}
      />
      <span>{view.label}</span>
    </label>
  ))}
</div>

<script define:vars={{ variantId: variant.id, initialSelectedViews: selectedViews }}>
// Handle view selection UI interactivity
document.addEventListener('DOMContentLoaded', () => {
  const checkboxes = document.querySelectorAll(`input[type="checkbox"][data-variant-id="${variantId}"]`);
  
  // Track selected views
  let selectedViews = [...initialSelectedViews];
  
  // Add event listeners to checkboxes
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', (e) => {
      const target = e.target;
      if (!(target instanceof HTMLInputElement)) return;
      
      const viewId = target.getAttribute('data-view');
      if (!viewId) return;
      
      if (target.checked) {
        // Add to selected views
        if (!selectedViews.includes(viewId)) {
          selectedViews.push(viewId);
        }
      } else {
        // Remove from selected views
        selectedViews = selectedViews.filter(id => id !== viewId);
      }
      
      // You could add logic here to save the selection to the server if needed
      console.log('Selected views updated:', selectedViews);
    });
  });
});
</script> 