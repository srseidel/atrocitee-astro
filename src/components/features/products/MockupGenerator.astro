---
interface Props {
  variantId?: string;
}

const { variantId } = Astro.props;
---

<div class="mockup-generator">
  <!-- Progress tracking elements will be inserted here dynamically -->
</div>

<script>
/**
 * Mockup Generator
 * Handles rate-limited generation of mockups with progress tracking (2 requests per minute)
 */

// Define types
interface MockupProgress {
  status: 'initializing' | 'processing' | 'rate-limited' | 'completed' | 'error';
  completed: number;
  total: number;
  currentView?: string;
  message?: string;
}

// Initialize when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  initMockupGenerators();
});

function initMockupGenerators() {
  // Find all mockup generation buttons
  document.querySelectorAll('[data-action="generate-mockups"]').forEach(button => {
    button.addEventListener('click', handleMockupGeneration);
  });
}

async function handleMockupGeneration(e: Event) {
  const target = e.currentTarget as HTMLButtonElement;
  const variantId = target.getAttribute('data-variant-id');
  
  console.log('Generate mockups clicked for variant:', variantId);
  
  if (!variantId) {
    console.error('No variant ID found');
    alert('Error: Could not process variant - missing ID');
    return;
  }
  
  // Get all selected views for this variant
  const selectedViews: string[] = [];
  document.querySelectorAll(`input[type="checkbox"][data-variant-id="${variantId}"]:checked`).forEach(checkbox => {
    const view = checkbox.getAttribute('data-view');
    if (view) {
      selectedViews.push(view);
    }
  });
  
  console.log('Selected views:', selectedViews);
  
  if (selectedViews.length === 0) {
    alert('Please select at least one view to generate');
    return;
  }
  
  // Store the original text for later restoration
  const originalText = target.textContent || 'Generate';
  
  try {
    // Disable button and show loading state
    target.disabled = true;
    target.textContent = 'Generating...';
    
    // Create or get progress container
    const progressContainer = createOrGetProgressContainer(target, variantId, selectedViews.length);
    
    // Set up SSE for progress updates
    const eventSource = new EventSource(`/api/v1/admin/products/mockup?variantId=${variantId}&action=progress`);
    
    eventSource.onmessage = (event) => {
      try {
        const progress = JSON.parse(event.data) as MockupProgress;
        console.log('Progress update:', progress);
        updateProgressUI(progressContainer, progress);
        
        // If completed or error, close the connection
        if (progress.status === 'completed' || progress.status === 'error') {
          eventSource.close();
        }
      } catch (error) {
        console.error('Error parsing SSE data:', error);
      }
    };
    
    eventSource.onerror = (error) => {
      console.error('SSE connection error:', error);
      eventSource.close();
    };
    
    console.log('Sending request to generate mockups:', { 
      variantId, 
      views: selectedViews 
    });
    
    // Call the API to generate mockups
    const response = await fetch('/api/v1/admin/products/mockup', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        variantId,
        views: selectedViews 
      })
    });
    
    const data = await response.json();
    console.log('Response from generate-mockups API:', data);
    
    if (!response.ok) {
      eventSource.close();
      throw new Error(data.message || 'Failed to generate mockups');
    }
    
    // Success message (SSE will continue updating the progress)
    if (data.success) {
      setTimeout(() => {
        alert(`Mockup generation started! ${data.message || 'Check back in a few minutes for results.'}`);
      }, 500);
    }
    
  } catch (error) {
    console.error('Error generating mockups:', error);
    alert(error instanceof Error ? error.message : 'Failed to generate mockups');
  } finally {
    // Reset button state
    target.disabled = false;
    target.textContent = originalText;
  }
}

function createOrGetProgressContainer(buttonElement: HTMLButtonElement, variantId: string, totalViews: number): HTMLElement {
  // Check if the container already exists
  let progressContainer = document.querySelector(`.mockup-progress-container[data-variant-id="${variantId}"]`) as HTMLElement;
  
  if (progressContainer) {
    // Reset existing container
    progressContainer.classList.remove('hidden');
    const progressBar = progressContainer.querySelector('.progress-bar') as HTMLElement;
    const progressCount = progressContainer.querySelector('.progress-count');
    const progressStatus = progressContainer.querySelector('.progress-status');
    
    if (progressBar) progressBar.style.width = '0%';
    if (progressCount) progressCount.textContent = `0/${totalViews}`;
    if (progressStatus) progressStatus.textContent = 'Initializing...';
    
    return progressContainer;
  }
  
  // Container doesn't exist, create it
  const variantSection = buttonElement.closest('.border.rounded-md');
  
  if (!variantSection) {
    console.error('Could not find variant section');
    throw new Error('Could not find variant section');
  }
  
  // Find the note element to insert after
  const noteElement = variantSection.querySelector('.mt-2.text-xs.text-gray-500');
  
  // Create the progress container
  progressContainer = document.createElement('div');
  progressContainer.className = 'mockup-progress-container mt-4';
  progressContainer.setAttribute('data-variant-id', variantId);
  
  // Add progress UI elements
  progressContainer.innerHTML = `
    <div class="mb-1 flex justify-between">
      <span class="text-sm font-medium progress-label">
        Generating mockups...
      </span>
      <span class="text-sm text-gray-500 progress-count">
        0/${totalViews}
      </span>
    </div>
    <div class="w-full bg-gray-200 rounded-full h-2.5">
      <div class="bg-blue-600 h-2.5 rounded-full progress-bar" style="width: 0%"></div>
    </div>
    <div class="mt-1">
      <span class="text-xs text-gray-500 progress-status">
        Initializing...
      </span>
    </div>
  `;
  
  // Insert after the note
  if (noteElement && noteElement.parentNode) {
    noteElement.parentNode.insertBefore(progressContainer, noteElement.nextSibling);
  } else {
    variantSection.appendChild(progressContainer);
  }
  
  return progressContainer;
}

function updateProgressUI(container: HTMLElement, progress: MockupProgress): void {
  const progressBar = container.querySelector('.progress-bar') as HTMLElement;
  const progressCount = container.querySelector('.progress-count');
  const progressStatus = container.querySelector('.progress-status');
  
  // Calculate percentage
  const percent = progress.total > 0 ? (progress.completed / progress.total) * 100 : 0;
  
  // Update UI
  if (progressBar) progressBar.style.width = `${percent}%`;
  if (progressCount) progressCount.textContent = `${progress.completed}/${progress.total}`;
  
  if (progressStatus) {
    if (progress.message) {
      progressStatus.textContent = progress.message;
    } else if (progress.status === 'rate-limited') {
      progressStatus.textContent = 'Rate limited. Waiting before continuing...';
    } else if (progress.status === 'completed') {
      progressStatus.textContent = 'All mockup tasks submitted!';
    } else if (progress.status === 'error') {
      progressStatus.textContent = 'Error: ' + (progress.message || 'Failed to generate mockups');
    } else {
      progressStatus.textContent = `Processing ${progress.currentView || ''}...`;
    }
  }
}
</script> 