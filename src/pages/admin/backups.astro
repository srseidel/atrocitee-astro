---
import MainLayout from '../../layouts/MainLayout.astro';
import Container from '../../components/ui/Container.astro';
import { createServerSupabaseClient } from '../../lib/supabase';


// Define TypeScript interfaces for backup data
interface BackupFile {
  filename: string;
  size: string;
  timestamp: number;
}

interface LastBackupInfo {
  timestamp: number;
  date: string;
  status: 'success' | 'failed';
  filename: string;
  size: string;
  duration_seconds: number;
  error?: string;
}

interface BackupData {
  last_backup: LastBackupInfo;
  backups: BackupFile[];
  retention_days: number;
  backup_dir: string;
}

// Ensure this page is server-rendered, not statically generated
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Get user data for the page
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });
const { data: userData } = await supabase.auth.getUser();
const user = userData?.user;

// Get backup status data
const { data: backupStatus, error } = await supabase
  .from('backup_status')
  .select('*')
  .eq('id', 'latest')
  .single();

const backupData = backupStatus?.data as BackupData | null || null;
const lastBackup = backupData?.last_backup || null;
const backups = backupData?.backups || [];

---
<MainLayout title="Backup Status | Admin">
  <Container>
    <div class="py-12">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-4xl font-bold">Backup Status</h1>
        <a href="/admin" class="btn btn-secondary">Back to Dashboard</a>
      </div>
      
      {error && (
        <div class="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-8">
          <h2 class="font-semibold text-lg">Error Loading Backup Data</h2>
          <p>{error.message}</p>
        </div>
      )}
      
      {!backupData && !error && (
        <div class="bg-yellow-50 border border-yellow-200 text-yellow-700 p-4 rounded-lg mb-8">
          <h2 class="font-semibold text-lg">No Backup Data Available</h2>
          <p>No backup data has been recorded yet. Please run a backup first.</p>
        </div>
      )}
      
      {lastBackup && (
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm mb-8">
          <div class="p-6">
            <h2 class="text-2xl font-semibold mb-4">Last Backup Summary</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">Status</h3>
                <div class:list={['font-medium', 'text-lg', lastBackup.status === 'success' ? 'text-green-600' : 'text-red-600']}>
                  {lastBackup.status === 'success' ? 'Successful' : 'Failed'}
                </div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">Date</h3>
                <div class="font-medium text-lg">{new Date(lastBackup.date).toLocaleString()}</div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">Duration</h3>
                <div class="font-medium text-lg">{lastBackup.duration_seconds} seconds</div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">File</h3>
                <div class="font-medium text-lg">{lastBackup.filename}</div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">Size</h3>
                <div class="font-medium text-lg">{lastBackup.size}</div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-sm text-gray-500 uppercase mb-1">Retention Policy</h3>
                <div class="font-medium text-lg">{backupData?.retention_days} days</div>
              </div>
            </div>
            
            {lastBackup.error && (
              <div class="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
                <h3 class="font-semibold">Error Details</h3>
                <p>{lastBackup.error}</p>
              </div>
            )}
          </div>
        </div>
      )}
      
      {backups && backups.length > 0 && (
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
          <div class="p-6">
            <h2 class="text-2xl font-semibold mb-4">Backup Files</h2>
            
            <div class="overflow-x-auto">
              <table class="w-full text-left">
                <thead>
                  <tr class="bg-gray-50 border-b">
                    <th class="px-4 py-2 font-medium">Filename</th>
                    <th class="px-4 py-2 font-medium">Date</th>
                    <th class="px-4 py-2 font-medium">Size</th>
                  </tr>
                </thead>
                <tbody>
                  {backups.map((backup: BackupFile) => (
                    <tr class="border-b">
                      <td class="px-4 py-3 font-mono text-sm">{backup.filename}</td>
                      <td class="px-4 py-3">{new Date(backup.timestamp * 1000).toLocaleString()}</td>
                      <td class="px-4 py-3">{backup.size}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}
    </div>
  </Container>
</MainLayout> 