---
// Server-side rendering for auth
export const prerender = false;

import AdminLayout from "@layouts/AdminLayout.astro";
import { createServerSupabaseClient } from "@lib/supabase/client";
import { PrintfulService } from "@lib/printful/service";
import type { PrintfulProductList, PrintfulProduct } from "src/types/printful";
import { redirectIfNotAdmin } from "@lib/auth/middleware";
import { CORE_CATEGORIES, CATEGORY_DISPLAY_NAMES } from "src/types/database/models";

interface ProductVariant {
  id: string;
  name: string;
  sku: string;
  retail_price: number;
  in_stock: boolean;
  options: Record<string, string>;
}

interface Charity {
  id: string;
  name: string;
}

interface Tag {
  id: string;
  name: string;
}

interface ProductTag {
  tag_id: string;
  tags: Tag;
}

// Check if user is admin and redirect if not
const redirectResponse = await redirectIfNotAdmin(Astro);
if (redirectResponse) return redirectResponse;

// Get product ID from URL
const { id } = Astro.params;

// Initialize Supabase client
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });

// Get product details
const { data: product, error: productError } = await supabase
  .from('products')
  .select(`
    *,
    product_variants!product_variants_product_id_fkey (*),
    product_tags (
      tag_id,
      tags (
        id,
        name
      )
    )
  `)
  .eq('id', id)
  .single();

// Handle product not found error first
if (productError || !product) {
  console.error('Product error:', productError);
  return new Response('Product not found', { status: 404 });
}

// Get category mapping if it exists
const { data: categoryMapping } = await supabase
  .from('printful_category_mapping')
  .select(`
    atrocitee_category_id,
    categories (
      id,
      name
    )
  `)
  .eq('printful_category_id', product.printful_id)
  .single();

// Get Printful details if product has a Printful ID
let printfulProduct: PrintfulProduct | null = null;
if (product.printful_id) {
  const printfulService = PrintfulService.getInstance();
  try {
    const response = await printfulService.getProduct(product.printful_id);
    printfulProduct = response;
  } catch (error) {
    console.error('Error fetching Printful product:', error);
  }
}

// Fetch all charities for the dropdown
const { data: charities } = await supabase
  .from('charities')
  .select('id, name')
  .eq('active', true)
  .order('name');

// Fetch all tags for the tag selector
const { data: tags } = await supabase
  .from('tags')
  .select('id, name')
  .eq('active', true)
  .order('name');
---

<AdminLayout title={`Configure Product: ${product.name}`}>
  <div class="container mx-auto p-6">
    <div class="mb-6 flex justify-between items-center">
      <h1 class="text-3xl font-bold">Configure Product</h1>
      <a href="/admin/products/dashboard" class="text-blue-600 hover:text-blue-800">
        ‚Üê Back to Products
      </a>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Product Details -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Product Details</h2>
        
        <form id="productConfigForm" class="space-y-4">
          <input type="hidden" name="productId" value={product.id} />
          
          <div>
            <label for="product-name" class="block text-sm font-medium text-gray-700">Product Name</label>
            <input 
              id="product-name"
              type="text" 
              name="name" 
              value={product.name}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              required
              aria-required="true"
            />
          </div>

          <div>
            <label for="product-slug" class="block text-sm font-medium text-gray-700">Product Slug</label>
            <input 
              id="product-slug"
              type="text" 
              name="slug" 
              value={product.slug}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              required
              aria-required="true"
            />
          </div>

          <div>
            <label for="product-description" class="block text-sm font-medium text-gray-700">Product Description</label>
            <textarea 
              id="product-description"
              name="description" 
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Product description"
            >{product.description || ''}</textarea>
          </div>

          <div>
            <label for="product-base-price" class="block text-sm font-medium text-gray-700">Base Price (USD)</label>
            <input 
              id="product-base-price"
              type="number" 
              name="atrocitee_base_price" 
              value={product.atrocitee_base_price || ''}
              step="0.01"
              min="0"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Product base price in USD"
            />
          </div>

          <div>
            <label for="product-donation" class="block text-sm font-medium text-gray-700">Donation Amount (USD)</label>
            <input 
              id="product-donation"
              type="number" 
              name="atrocitee_donation_amount" 
              value={product.atrocitee_donation_amount || ''}
              step="0.01"
              min="0"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Donation amount in USD"
            />
          </div>

          <div>
            <label for="product-charity" class="block text-sm font-medium text-gray-700">Associated Charity</label>
            <select 
              id="product-charity"
              name="atrocitee_charity_id"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select a charity"
            >
              <option value="">Select a charity</option>
              {charities?.map((charity: Charity) => (
                <option 
                  value={charity.id} 
                  selected={charity.id === product.atrocitee_charity_id}
                >
                  {charity.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label for="product-status" class="block text-sm font-medium text-gray-700">Product Status</label>
            <select 
              id="product-status"
              name="atrocitee_active"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select product status"
            >
              <option value="true" selected={product.atrocitee_active}>Published</option>
              <option value="false" selected={!product.atrocitee_active}>Unpublished</option>
            </select>
          </div>

          <div>
            <label for="product-featured" class="block text-sm font-medium text-gray-700">Featured Status</label>
            <select 
              id="product-featured"
              name="atrocitee_featured"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select featured status"
            >
              <option value="true" selected={product.atrocitee_featured}>Yes - Show on homepage</option>
              <option value="false" selected={!product.atrocitee_featured}>No - Regular listing only</option>
            </select>
            <p class="mt-1 text-sm text-gray-500">Featured products will be highlighted on the homepage</p>
          </div>

          <div>
            <label for="product-category" class="block text-sm font-medium text-gray-700">Product Category</label>
            <select 
              id="product-category"
              name="atrocitee_category_id"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select product category"
            >
              <option value="">Select a category</option>
              {Object.entries(CORE_CATEGORIES).map(([key, slug]) => (
                <option 
                  value={slug} 
                  selected={slug === product.atrocitee_category_id}
                >
                  {CATEGORY_DISPLAY_NAMES[slug]}
                </option>
              ))}
            </select>
          </div>

          <div>
            <fieldset>
              <legend class="block text-sm font-medium text-gray-700">Product Tags</legend>
              <div class="mt-2 space-y-2">
                {tags?.map((tag: Tag) => (
                  <div class="flex items-center">
                    <input 
                      type="checkbox" 
                      name="tags" 
                      value={tag.id}
                      id={`tag-${tag.id}`}
                      checked={product.product_tags?.some((pt: ProductTag) => pt.tag_id === tag.id)}
                      class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      aria-label={`Select ${tag.name} tag`}
                    />
                    <label for={`tag-${tag.id}`} class="ml-2 text-sm text-gray-700">
                      {tag.name}
                    </label>
                  </div>
                ))}
              </div>
              <p class="mt-1 text-sm text-gray-500">Select one or more tags for this product</p>
            </fieldset>
          </div>

          <div class="flex justify-end">
            <button 
              type="submit"
              class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
            >
              Save Changes
            </button>
          </div>
        </form>
      </div>

      <!-- Product Variants -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Product Variants</h2>
        
        {product.product_variants && product.product_variants.length > 0 ? (
          <div class="space-y-4">
            {product.product_variants.map((variant: ProductVariant) => (
              <div class="border rounded-md p-4">
                <div class="flex justify-between items-start">
                  <div>
                    <h3 class="font-medium">{variant.name}</h3>
                    <p class="text-sm text-gray-500">SKU: {variant.sku}</p>
                  </div>
                  <div class="text-right">
                    <p class="font-medium">${variant.retail_price}</p>
                    <p class="text-sm text-gray-500">
                      {variant.in_stock ? 'In Stock' : 'Out of Stock'}
                    </p>
                  </div>
                </div>
                
                {variant.options && Object.keys(variant.options).length > 0 && (
                  <div class="mt-2">
                    <p class="text-sm text-gray-500">Options:</p>
                    <ul class="text-sm">
                      {Object.entries(variant.options).map(([key, value]) => (
                        <li>{key}: {value}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">No variants found for this product.</p>
        )}
      </div>
    </div>

    <!-- Printful Details -->
    {printfulProduct && (
      <div class="mt-6 bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Printful Details</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500">Printful ID</p>
            <p class="font-medium">{printfulProduct.id}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500">Last Synced</p>
            <p class="font-medium">
              {new Date(product.updated_at).toLocaleString()}
            </p>
          </div>
        </div>
      </div>
    )}
  </div>
</AdminLayout>

<script>
  // Handle form submission
  const form = document.getElementById('productConfigForm');
  const nameInput = form?.querySelector('input[name="name"]');
  const slugInput = form?.querySelector('input[name="slug"]');
  const submitButton = form?.querySelector('button[type="submit"]');

  // Auto-generate slug from name
  nameInput?.addEventListener('input', (e) => {
    const name = (e.target as HTMLInputElement).value;
    const slug = name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
    if (slugInput) {
      (slugInput as HTMLInputElement).value = slug;
    }
  });

  // Initialize slug if empty
  if (nameInput && slugInput && !(slugInput as HTMLInputElement).value) {
    const name = (nameInput as HTMLInputElement).value;
    const slug = name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
    (slugInput as HTMLInputElement).value = slug;
  }

  // Show alert message
  function showAlert(message: string, type: 'success' | 'error') {
    const alert = document.createElement('div');
    alert.className = `bg-${type === 'success' ? 'green' : 'red'}-100 border border-${type === 'success' ? 'green' : 'red'}-400 text-${type === 'success' ? 'green' : 'red'}-700 px-4 py-3 rounded relative mb-4`;
    alert.role = 'alert';
    alert.innerHTML = `
      <strong class="font-bold">${type === 'success' ? 'Success!' : 'Error!'}</strong>
      <span class="block sm:inline">${message}</span>
    `;
    form?.insertBefore(alert, form.firstChild);

    // Remove alert after 5 seconds
    setTimeout(() => {
      alert.remove();
    }, 5000);
  }

  // Set loading state
  function setLoading(isLoading: boolean) {
    if (submitButton) {
      (submitButton as HTMLButtonElement).disabled = isLoading;
      (submitButton as HTMLButtonElement).textContent = isLoading ? 'Saving...' : 'Save Changes';
      (submitButton as HTMLButtonElement).classList.toggle('opacity-50', isLoading);
    }
  }

  // Validate form data
  function validateForm(formData: FormData): string | null {
    const name = formData.get('name');
    const slug = formData.get('slug');
    const basePrice = formData.get('atrocitee_base_price');
    const donationAmount = formData.get('atrocitee_donation_amount');

    if (!name || typeof name !== 'string' || name.trim().length === 0) {
      return 'Product name is required';
    }

    if (!slug || typeof slug !== 'string' || slug.trim().length === 0) {
      return 'Product slug is required';
    }

    if (basePrice && isNaN(parseFloat(basePrice as string))) {
      return 'Base price must be a valid number';
    }

    if (donationAmount && isNaN(parseFloat(donationAmount as string))) {
      return 'Donation amount must be a valid number';
    }

    return null;
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const data = Object.fromEntries(formData.entries()) as Record<string, string>;
    
    // Convert boolean strings to actual booleans
    const processedData = {
      ...data,
      atrocitee_active: data.atrocitee_active === 'true',
      atrocitee_featured: data.atrocitee_featured === 'true'
    };
    
    try {
      const response = await fetch(`/api/v1/admin/products/${data.productId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(processedData)
      });

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('Server returned non-JSON response');
      }

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'Failed to update product');
      }

      // Show success message
      showAlert(result.message || 'Product updated successfully', 'success');
      
      // Reload the page to show updated data
      window.location.reload();
    } catch (error) {
      console.error('Error updating product:', error);
      showAlert(error instanceof Error ? error.message : 'Failed to update product', 'error');
    }
  });
</script> 