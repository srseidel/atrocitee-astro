---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import PrintfulProductSync from "../../../lib/printful/product-sync";
import PrintfulService from "../../../lib/printful/service";
import { createServerSupabaseClient } from "../../../lib/supabase";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Define types for the data
interface SyncHistory {
  id: string;
  created_at: string;
  sync_type: string;
  status: string;
  products_synced: number;
  products_failed: number;
}

interface ProductChange {
  id: string;
  product?: {
    name: string;
  };
  change_type: string;
  change_severity: string;
  field_name: string;
  old_value: string;
  new_value: string;
}

interface CategoryMapping {
  id: string;
  printful_category_id: number;
  printful_category_name: string;
  atrocitee_category_id: string | null;
  is_active: boolean;
}

// Get necessary data from database
const productSync = new PrintfulProductSync(Astro.cookies);
const pendingChanges = await productSync.getProductChanges('pending_review');
const syncHistory = await productSync.getSyncHistory(5);

// Check if the mapping table exists but don't load all mappings yet
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });
let mappingTableExists = false;
try {
  // Try to query one row from the table directly instead of using RPC
  const { count } = await supabase
    .from('printful_category_mapping')
    .select('*', { count: 'exact', head: true });
  
  // If we get here without error, the table exists
  mappingTableExists = true;
} catch (error) {
  console.error("Error checking mapping table:", error);
  mappingTableExists = false;
}

// Get empty arrays for initial page load - will be populated via JavaScript
let categoryMappings: Array<{
  id: string;
  printful_category_id: number;
  printful_category_name: string;
  atrocitee_category_id: string | null;
  is_active: boolean;
}> = [];

let atrociteeCategories: Array<{
  id: string;
  name: string;
}> = [];

// Get active products from our database that need configuration (no category assigned)
const { data: newProducts, error: newProductsError } = await supabase
  .from('products')
  .select(`
    id,
    name,
    printful_id,
    category_id,
    thumbnail_url,
    active,
    created_at
  `)
  .is('category_id', null)
  .eq('printful_synced', true)
  .order('created_at', { ascending: false });

// Get catalog products (templates)
const printfulService = PrintfulService.getInstance();
let catalogProducts = [];
let catalogError = null;

try {
  catalogProducts = await printfulService.getCatalogProducts();
} catch (error) {
  console.error("Error fetching catalog products:", error);
  catalogError = error instanceof Error ? error.message : "Unknown error fetching catalog products";
}
---
<AdminLayout title="Product Synchronization">
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6">Printful Product Synchronization</h1>
    
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Sync Products from Printful</h2>
      <p class="text-gray-600 mb-4">
        This will import products you've created on Printful into your store. The synchronization process:
      </p>
      <ul class="list-disc pl-6 mb-4 text-gray-600">
        <li>Imports new products that exist on Printful but not in your store</li>
        <li>Updates pricing, inventory, and variants for existing products</li>
        <li>Preserves your custom product descriptions, tags, and categories</li>
        <li>New products will need to be assigned to categories after import</li>
      </ul>
      
      <div class="flex space-x-4 mb-4">
        <button
          id="sync-button"
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Start Synchronization
        </button>
        
        <button
          id="sync-categories-button"
          class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
        >
          Sync Printful Categories
        </button>
        
        <div id="sync-loading" class="hidden mt-2 text-gray-600">
          <div class="animate-spin inline-block w-4 h-4 border-2 border-gray-600 border-t-blue-600 rounded-full mr-2"></div>
          <span id="sync-loading-text">Synchronizing products...</span>
        </div>
      </div>
      
      <div id="sync-result" class="hidden mt-2 py-2 px-4 rounded"></div>
    </div>
    
    <!-- Category Mapping Panel -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Category Mapping</h2>
      <p class="text-gray-600 mb-4">
        Map Printful categories to your Atrocitee store categories. This helps automatically assign categories to new products during sync.
      </p>
      
      <div id="category-mapping-container">
        {!mappingTableExists ? (
          <div class="bg-yellow-100 text-yellow-800 p-4 rounded mb-4">
            <p>The category mapping table doesn't exist yet. Click "Sync Printful Categories" button above to set up the table and import categories.</p>
          </div>
        ) : (
          <div class="bg-blue-100 text-blue-800 p-4 rounded mb-4">
            <p>Click "Sync Printful Categories" above to load or update the available Printful categories.</p>
          </div>
        )}
      </div>
    </div>
    
    <!-- New Products Panel -->
    {newProducts && newProducts.length > 0 && (
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4">New Products Needing Configuration</h2>
        <p class="text-gray-600 mb-4">
          These products have been synced from Printful but need category assignments before they're visible on your site.
        </p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {newProducts.map((product: any) => (
            <div class="border rounded-lg overflow-hidden">
              <div class="h-48 bg-gray-100 flex items-center justify-center">
                {product.thumbnail_url ? (
                  <img src={product.thumbnail_url} alt={product.name} class="max-h-full max-w-full object-contain" />
                ) : (
                  <div class="text-gray-400">No image available</div>
                )}
              </div>
              <div class="p-4">
                <h3 class="font-medium text-lg">{product.name}</h3>
                <p class="text-sm text-gray-600 mb-3">Added on {new Date(product.created_at).toLocaleDateString()}</p>
                <a 
                  href={`/admin/products/edit?id=${product.id}`}
                  class="block bg-green-600 hover:bg-green-700 text-white text-sm font-bold py-1 px-3 rounded text-center"
                >
                  Configure Product
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
    
    <!-- Sync History Panel -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Recent Synchronization History</h2>
      
      {syncHistory.length === 0 ? (
        <p class="text-gray-600">No synchronization history yet.</p>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Products</th>
              </tr>
            </thead>
            <tbody>
              {syncHistory.map((history: SyncHistory) => (
                <tr class="bg-white border-b">
                  <td class="py-2 px-3 text-sm text-gray-900">
                    {new Date(history.created_at).toLocaleDateString()}
                  </td>
                  <td class="py-2 px-3 text-sm text-gray-900 capitalize">
                    {history.sync_type}
                  </td>
                  <td class="py-2 px-3 text-sm">
                    <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${history.status === 'success' ? 'bg-green-100 text-green-800' : 
                        history.status === 'partial' ? 'bg-yellow-100 text-yellow-800' : 
                        'bg-red-100 text-red-800'}`}>
                      {history.status}
                    </span>
                  </td>
                  <td class="py-2 px-3 text-sm text-gray-900">
                    {history.products_synced} succeeded, {history.products_failed} failed
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
    
    <!-- Catalog Products (Templates) Panel -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Printful Catalog Products (Templates)</h2>
      
      {catalogError ? (
        <div class="bg-red-100 p-4 rounded text-red-800 mb-4">
          <p><strong>Error loading templates:</strong> {catalogError}</p>
          <p class="text-sm mt-2">Make sure your Printful API key is properly configured.</p>
        </div>
      ) : catalogProducts.length === 0 ? (
        <p class="text-gray-600">No catalog products found. This could be due to using the mock client.</p>
      ) : (
        <div>
          <p class="text-gray-600 mb-4">
            Browse available product templates from Printful. Select a template to create a new product.
          </p>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {catalogProducts.map((product: any) => (
              <div class="border rounded-lg overflow-hidden catalog-product" data-product-id={product.id}>
                <div class="h-48 bg-gray-100 flex items-center justify-center">
                  {product.image ? (
                    <img src={product.image} alt={product.title} class="max-h-full max-w-full object-contain" />
                  ) : (
                    <div class="text-gray-400">No image available</div>
                  )}
                </div>
                <div class="p-4">
                  <h3 class="font-medium text-lg">{product.title}</h3>
                  <p class="text-sm text-gray-600 mb-2">{product.type_name}</p>
                  <p class="text-sm mb-3">{product.variant_count} variants available</p>
                  <button 
                    class="create-product bg-green-600 hover:bg-green-700 text-white text-sm font-bold py-1 px-3 rounded w-full"
                    data-product-id={product.id}
                  >
                    Create Product
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
    
    <!-- Pending Changes Panel -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Pending Product Changes</h2>
      
      {pendingChanges.length === 0 ? (
        <p class="text-gray-600">No pending changes to review.</p>
      ) : (
        <div>
          <p class="text-gray-600 mb-4">
            Review the following changes detected during synchronization:
          </p>
          
          <div class="space-y-4">
            {pendingChanges.map((change: ProductChange) => (
              <div 
                class="border rounded-lg p-4 change-item"
                data-change-id={change.id}
              >
                <div class="flex items-start justify-between">
                  <div>
                    <h3 class="font-medium text-lg">
                      {change.product?.name || 'Unknown Product'}
                    </h3>
                    <div class="mt-1 space-y-2">
                      <div class="text-sm">
                        <span class="font-medium">Change Type:</span> 
                        <span class={`ml-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                          ${change.change_type === 'price' ? 'bg-red-100 text-red-800' : 
                            change.change_type === 'inventory' ? 'bg-blue-100 text-blue-800' :
                            change.change_type === 'metadata' ? 'bg-purple-100 text-purple-800' :
                            change.change_type === 'image' ? 'bg-yellow-100 text-yellow-800' :
                            change.change_type === 'variant' ? 'bg-green-100 text-green-800' :
                            'bg-gray-100 text-gray-800'}`}>
                          {change.change_type}
                        </span>
                        <span class={`ml-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                          ${change.change_severity === 'critical' ? 'bg-red-100 text-red-800' : 
                            change.change_severity === 'standard' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'}`}>
                          {change.change_severity}
                        </span>
                      </div>
                      <div class="text-sm">
                        <span class="font-medium">Field:</span> 
                        <span class="text-gray-700">{change.field_name}</span>
                      </div>
                      <div class="grid grid-cols-2 gap-4">
                        <div class="bg-red-50 p-2 rounded">
                          <div class="text-xs text-red-700 font-semibold">Old Value:</div>
                          <div class="text-sm text-gray-800">{change.old_value || 'None'}</div>
                        </div>
                        <div class="bg-green-50 p-2 rounded">
                          <div class="text-xs text-green-700 font-semibold">New Value:</div>
                          <div class="text-sm text-gray-800">{change.new_value || 'None'}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="flex space-x-2">
                    <button 
                      class="approve-change bg-green-600 hover:bg-green-700 text-white text-sm font-bold py-1 px-3 rounded"
                      data-change-id={change.id}
                    >
                      Approve
                    </button>
                    <button 
                      class="reject-change bg-red-600 hover:bg-red-700 text-white text-sm font-bold py-1 px-3 rounded"
                      data-change-id={change.id}
                    >
                      Reject
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</AdminLayout>

<script define:vars={{ mappingTableExists }}>
  // Initialize elements
  const syncButton = document.getElementById('sync-button');
  const syncCategoriesButton = document.getElementById('sync-categories-button');
  const syncLoading = document.getElementById('sync-loading');
  const syncLoadingText = document.getElementById('sync-loading-text');
  const syncResult = document.getElementById('sync-result');
  const approveButtons = document.querySelectorAll('.approve-change');
  const rejectButtons = document.querySelectorAll('.reject-change');
  const changeItems = document.querySelectorAll('.change-item');
  const createProductButtons = document.querySelectorAll('.create-product');
  const categoryMappingContainer = document.getElementById('category-mapping-container');
  
  let categoryMappings = [];
  let atrociteeCategories = [];
  
  // Load category mappings and categories
  async function loadCategoryData() {
    try {
      // Show loading indicator
      if (categoryMappingContainer) {
        categoryMappingContainer.innerHTML = `
          <div class="animate-pulse bg-gray-100 p-4 rounded">
            <p>Loading category mappings...</p>
          </div>
        `;
      }
      
      // Fetch Atrocitee categories
      const categoriesResponse = await fetch('/api/categories');
      if (!categoriesResponse.ok) {
        throw new Error('Failed to fetch Atrocitee categories');
      }
      const categoriesData = await categoriesResponse.json();
      atrociteeCategories = categoriesData.data || [];
      
      // Fetch category mappings
      const mappingsResponse = await fetch('/api/printful/category-mapping');
      if (!mappingsResponse.ok) {
        throw new Error('Failed to fetch category mappings');
      }
      const mappingsData = await mappingsResponse.json();
      categoryMappings = mappingsData.data || [];
      
      // Render the mappings
      renderCategoryMappings();
    } catch (error) {
      console.error('Error loading category data:', error);
      if (categoryMappingContainer) {
        categoryMappingContainer.innerHTML = `
          <div class="bg-red-100 text-red-800 p-4 rounded">
            <p>Error loading category mappings: ${error instanceof Error ? error.message : 'Unknown error'}</p>
            <p class="mt-2">Click "Sync Printful Categories" above to try again.</p>
          </div>
        `;
      }
    }
  }
  
  // Render category mappings
  function renderCategoryMappings() {
    if (!categoryMappingContainer) return;
    
    if (categoryMappings.length === 0) {
      categoryMappingContainer.innerHTML = `
        <div class="bg-yellow-100 text-yellow-800 p-4 rounded">
          <p>No Printful categories found. Click "Sync Printful Categories" button above to import categories.</p>
        </div>
      `;
      return;
    }
    
    // Create the table HTML
    let html = `
      <div class="overflow-x-auto">
        <table class="min-w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Printful Category</th>
              <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Atrocitee Category</th>
              <th class="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
    `;
    
    // Add each mapping row
    categoryMappings.forEach(mapping => {
      html += `
        <tr class="bg-white border-b">
          <td class="py-2 px-3 text-sm text-gray-900">${mapping.printful_category_name}</td>
          <td class="py-2 px-3 text-sm text-gray-900">
            <select
              class="category-mapping-select w-full rounded border-gray-300 text-sm"
              data-printful-id="${mapping.printful_category_id}"
            >
              <option value="">-- Select Category --</option>
              ${atrociteeCategories.map(category => `
                <option 
                  value="${category.id}"
                  ${mapping.atrocitee_category_id === category.id ? 'selected' : ''}
                >
                  ${category.name}
                </option>
              `).join('')}
            </select>
          </td>
          <td class="py-2 px-3 text-sm">
            <label class="inline-flex items-center">
              <input 
                type="checkbox" 
                class="category-active-toggle form-checkbox h-4 w-4 text-blue-600"
                data-printful-id="${mapping.printful_category_id}"
                ${mapping.is_active ? 'checked' : ''}
              >
              <span class="ml-2 text-gray-700">Active</span>
            </label>
          </td>
          <td class="py-2 px-3 text-sm text-right">
            <button 
              class="save-mapping bg-blue-600 hover:bg-blue-700 text-white text-xs py-1 px-2 rounded"
              data-printful-id="${mapping.printful_category_id}"
            >
              Save
            </button>
          </td>
        </tr>
      `;
    });
    
    html += `
          </tbody>
        </table>
      </div>
    `;
    
    // Update the DOM
    categoryMappingContainer.innerHTML = html;
    
    // Re-attach event listeners
    attachCategoryEventListeners();
  }
  
  // Attach event listeners for category mapping form elements
  function attachCategoryEventListeners() {
    const saveMappingButtons = document.querySelectorAll('.save-mapping');
    
    saveMappingButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const printfulCategoryId = button.getAttribute('data-printful-id');
        if (!printfulCategoryId) return;
        
        const selectEl = document.querySelector(`.category-mapping-select[data-printful-id="${printfulCategoryId}"]`);
        const toggleEl = document.querySelector(`.category-active-toggle[data-printful-id="${printfulCategoryId}"]`);
        
        if (!selectEl || !toggleEl) return;
        
        const atrociteeCategoryId = selectEl.value;
        const isActive = toggleEl.checked;
        
        try {
          // Disable the button
          if (button instanceof HTMLButtonElement) {
            button.disabled = true;
            button.textContent = 'Saving...';
          }
          
          // Make API request
          const response = await fetch('/api/printful/category-mapping', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              printfulCategoryId: parseInt(printfulCategoryId),
              atrociteeCategoryId: atrociteeCategoryId || null,
              isActive
            })
          });
          
          if (!response.ok) {
            throw new Error(`Server error (${response.status})`);
          }
          
          // Show success indicator
          button.textContent = 'Saved!';
          setTimeout(() => {
            if (button instanceof HTMLButtonElement) {
              button.disabled = false;
              button.textContent = 'Save';
            }
          }, 2000);
        } catch (error) {
          console.error('Error saving category mapping:', error);
          
          // Show error indicator
          button.textContent = 'Error!';
          setTimeout(() => {
            if (button instanceof HTMLButtonElement) {
              button.disabled = false;
              button.textContent = 'Save';
            }
          }, 2000);
        }
      });
    });
  }
  
  // Handle category sync
  syncCategoriesButton?.addEventListener('click', async () => {
    try {
      // Show loading state
      if (syncButton) syncButton.disabled = true;
      if (syncCategoriesButton) syncCategoriesButton.disabled = true;
      if (syncLoading) syncLoading.classList.remove('hidden');
      if (syncLoadingText) syncLoadingText.textContent = 'Synchronizing categories...';
      if (syncResult) {
        syncResult.classList.add('hidden');
        syncResult.classList.remove('bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
      }
      
      // Make API request
      const response = await fetch('/api/printful/sync-categories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });
      
      // Check for network errors first
      if (!response.ok) {
        const responseData = await response.json();
        console.error('Error response:', response.status, responseData);
        
        if (syncResult) {
          syncResult.textContent = `Server error (${response.status}): ${responseData.message || 'Unknown error'}`;
          if (responseData.details) {
            console.error('Error details:', responseData.details);
          }
          syncResult.classList.add('bg-red-100', 'text-red-800');
          syncResult.classList.remove('hidden');
        }
        
        // Still try to load any existing mappings
        await loadCategoryData();
        return;
      }
      
      const data = await response.json();
      
      // Handle successful response
      if (syncResult) {
        syncResult.textContent = data.message || 'Categories synced successfully';
        syncResult.classList.add('bg-green-100', 'text-green-800');
        syncResult.classList.remove('hidden');
      }
      
      // Load the new category mappings
      await loadCategoryData();
    } catch (error) {
      console.error('Error during category sync:', error);
      
      if (syncResult) {
        syncResult.textContent = 'An error occurred while synchronizing categories';
        syncResult.classList.add('bg-red-100', 'text-red-800');
        syncResult.classList.remove('hidden');
      }
    } finally {
      // Reset UI
      if (syncButton) syncButton.disabled = false;
      if (syncCategoriesButton) syncCategoriesButton.disabled = false;
      if (syncLoading) syncLoading.classList.add('hidden');
    }
  });
  
  // Handle manual product sync
  syncButton?.addEventListener('click', async () => {
    try {
      // Show loading state
      if (syncButton) syncButton.disabled = true;
      if (syncCategoriesButton) syncCategoriesButton.disabled = true;
      if (syncLoading) syncLoading.classList.remove('hidden');
      if (syncLoadingText) syncLoadingText.textContent = 'Synchronizing products...';
      if (syncResult) {
        syncResult.classList.add('hidden');
        syncResult.classList.remove('bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
      }
      
      // Set a longer timeout for the fetch request
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout
      
      // Make API request
      const response = await fetch('/api/printful/sync-products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({}),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      // Check for network errors first
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', response.status, errorText);
        
        if (syncResult) {
          syncResult.textContent = `Server error (${response.status}): ${errorText || 'Unknown error'}`;
          syncResult.classList.add('bg-red-100', 'text-red-800');
          syncResult.classList.remove('hidden');
        }
        return;
      }
      
      const data = await response.json();
      
      // Handle successful response
      if (syncResult) {
        syncResult.textContent = data.message || 'Sync completed successfully';
        syncResult.classList.add('bg-green-100', 'text-green-800');
        syncResult.classList.remove('hidden');
      }
      
      // Reload the page after a delay to show the updated history
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (error) {
      console.error('Error during sync:', error);
      
      // Check for timeout/abort errors
      const errorMessage = error instanceof DOMException && error.name === 'AbortError' 
        ? 'The sync operation timed out. It may still be processing in the background.' 
        : 'An error occurred while synchronizing products';
      
      if (syncResult) {
        syncResult.textContent = errorMessage;
        syncResult.classList.add('bg-yellow-100', 'text-yellow-800');
        syncResult.classList.remove('hidden');
      }
    } finally {
      // Reset UI
      if (syncButton) syncButton.disabled = false;
      if (syncCategoriesButton) syncCategoriesButton.disabled = false;
      if (syncLoading) syncLoading.classList.add('hidden');
    }
  });
  
  // Handle creating a product from template
  createProductButtons.forEach(button => {
    button.addEventListener('click', async (event) => {
      const target = event.target;
      const productId = target.getAttribute('data-product-id');
      
      if (!productId) {
        console.error('No product ID found');
        return;
      }
      
      // Ask for a product name
      const productName = prompt('Enter a name for this product:');
      if (!productName) {
        return; // User canceled
      }
      
      try {
        // Disable button and show loading state
        if (target instanceof HTMLButtonElement) {
          target.disabled = true;
          target.innerText = 'Creating...';
        }
        
        // Call API to create product from template
        const response = await fetch('/api/printful/create-from-template', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            catalogId: productId,
            productName
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to create product');
        }
        
        const data = await response.json();
        
        // Show success message
        alert(`Success: ${data.message}`);
        
        // Redirect to product detail page
        if (data.data?.product_id) {
          window.location.href = `/admin/products/edit?id=${data.data.product_id}`;
        } else {
          // Just reload the current page
          window.location.reload();
        }
      } catch (error) {
        console.error('Error creating product from template:', error);
        alert('Error: ' + (error instanceof Error ? error.message : 'Failed to create product'));
        
        // Reset button state
        if (target instanceof HTMLButtonElement) {
          target.disabled = false;
          target.innerText = 'Create Product';
        }
      }
    });
  });
  
  // Handle change approval/rejection
  const handleChangeAction = async (changeId, action) => {
    try {
      // Disable buttons for this change
      const changeItem = document.querySelector(`.change-item[data-change-id="${changeId}"]`);
      const buttons = changeItem?.querySelectorAll('button');
      buttons?.forEach(button => {
        if (button instanceof HTMLButtonElement) {
          button.disabled = true;
        }
      });
      
      // Make API request
      const response = await fetch('/api/printful/product-changes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          changeId,
          status: action,
          userId: 'current-user' // This should be replaced with actual user ID from context
        })
      });
      
      if (response.ok) {
        // Remove the change item from the UI
        changeItem?.classList.add('opacity-50');
        setTimeout(() => {
          changeItem?.remove();
          
          // Check if there are no more changes
          const remainingChanges = document.querySelectorAll('.change-item');
          if (remainingChanges.length === 0) {
            const pendingChangesPanel = document.querySelector('.change-item')?.closest('div');
            if (pendingChangesPanel) {
              pendingChangesPanel.innerHTML = '<p class="text-gray-600">No pending changes to review.</p>';
            }
          }
        }, 500);
      } else {
        // Re-enable buttons on error
        buttons?.forEach(button => {
          if (button instanceof HTMLButtonElement) {
            button.disabled = false;
          }
        });
        console.error('Error applying change action:', await response.json());
        alert('An error occurred while processing the change. Please try again.');
      }
    } catch (error) {
      console.error('Error during change action:', error);
      alert('An error occurred while processing the change. Please try again.');
    }
  };
  
  // Attach event listeners
  approveButtons.forEach(button => {
    button.addEventListener('click', () => {
      const changeId = button.getAttribute('data-change-id');
      if (changeId) {
        handleChangeAction(changeId, 'approved');
      }
    });
  });
  
  rejectButtons.forEach(button => {
    button.addEventListener('click', () => {
      const changeId = button.getAttribute('data-change-id');
      if (changeId) {
        handleChangeAction(changeId, 'rejected');
      }
    });
  });
  
  // Load category data if the table exists
  document.addEventListener('DOMContentLoaded', () => {
    if (mappingTableExists) {
      loadCategoryData();
    }
  });
</script> 