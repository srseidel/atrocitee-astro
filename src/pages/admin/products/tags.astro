---
import { createServerSupabaseClient } from "@lib/supabase/client";

import AdminLayout from "@layouts/AdminLayout.astro";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Fetch tags from the database
const supabase = createServerSupabaseClient({ 
  cookies: Astro.cookies,
  request: Astro.request
});
const { data: tags, error } = await supabase
  .from('tags')
  .select('*')
  .order('name');

interface Tag {
  id: string;
  name: string;
  slug: string;
  description?: string;
  active: boolean;
  created_at: string;
}

---
<AdminLayout title="Tag Management">
  <div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Tag Management</h1>
      <button id="add-tag" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
        Add New Tag
      </button>
    </div>
    
    <!-- Tags List -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      {error && (
        <div class="p-4 bg-red-50 border border-red-200 text-red-700">
          Error loading tags: {error.message}
        </div>
      )}
      
      {(!tags || tags.length === 0) && !error && (
        <div class="p-8 text-center text-gray-500">
          <p class="mb-4">No tags found. Create your first tag to get started.</p>
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Slug
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Products
              </th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {tags.map((tag: Tag) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{tag.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-500">{tag.slug}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${tag.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {tag.active ? 'Active' : 'Inactive'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {/* This would show the product count, but we need to implement that */}
                  -
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button class="text-blue-600 hover:text-blue-900 mr-3 edit-tag" data-id={tag.id}>Edit</button>
                  <button class="text-red-600 hover:text-red-900 delete-tag" data-id={tag.id}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  </div>
  
  <!-- Tag Form Modal (hidden by default) -->
  <div id="tag-modal" class="fixed inset-0 hidden">
    <!-- Modal backdrop -->
    <div class="absolute inset-0 bg-gray-500 bg-opacity-75"></div>
    
    <!-- Modal container -->
    <div class="fixed inset-0 z-10 overflow-y-auto">
      <div class="flex min-h-full items-center justify-center p-4">
        <!-- Modal content -->
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl w-full max-w-md">
          <h2 id="modal-title" class="text-xl font-semibold mb-4">Add New Tag</h2>
          
          <form id="tag-form" class="space-y-4">
            <input type="hidden" id="tag-id">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
              <input type="text" id="name" name="name" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            </div>
            
            <div>
              <label for="slug" class="block text-sm font-medium text-gray-700 mb-1">Slug</label>
              <input type="text" id="slug" name="slug" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            </div>
            
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <textarea id="description" name="description" rows="3" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
            </div>
            
            <div class="flex items-center">
              <input type="checkbox" id="active" name="active" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
              <label for="active" class="ml-2 block text-sm text-gray-900">Active</label>
            </div>
            
            <div class="flex justify-end pt-4">
              <button type="button" id="cancel-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded mr-2">
                Cancel
              </button>
              <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Save Tag
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // DOM elements
  const addTagBtn = document.getElementById('add-tag');
  const tagModal = document.getElementById('tag-modal');
  const modalTitle = document.getElementById('modal-title');
  const tagForm = document.getElementById('tag-form') as HTMLFormElement;
  const cancelBtn = document.getElementById('cancel-btn');
  const tagIdInput = document.getElementById('tag-id') as HTMLInputElement;
  const nameInput = document.getElementById('name') as HTMLInputElement;
  const slugInput = document.getElementById('slug') as HTMLInputElement;
  const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
  const activeInput = document.getElementById('active') as HTMLInputElement;
  const editButtons = document.querySelectorAll('.edit-tag');
  const deleteButtons = document.querySelectorAll('.delete-tag');
  
  // Function to show modal
  const showModal = () => {
    if (tagModal) {
      tagModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
    }
  };

  // Function to hide modal
  const hideModal = () => {
    if (tagModal) {
      tagModal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    }
  };

  // Event Listeners
  addTagBtn?.addEventListener('click', () => {
    modalTitle!.textContent = 'Add New Tag';
    tagForm!.reset();
    tagIdInput!.value = '';
    activeInput!.checked = true;
    showModal();
  });
  
  cancelBtn?.addEventListener('click', hideModal);
  
  // Close modal when clicking outside
  tagModal?.addEventListener('click', (e) => {
    if (e.target === tagModal || e.target === tagModal.firstElementChild) {
      hideModal();
    }
  });
  
  // Generate slug from name
  nameInput?.addEventListener('input', () => {
    if (nameInput.value && !slugInput!.value) {
      slugInput!.value = nameInput.value
        .toLowerCase()
        .replace(/[^\w\s]/gi, '')
        .replace(/\s+/g, '-');
    }
  });
  
  // Tag form submission
  tagForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = {
      name: nameInput!.value,
      slug: slugInput!.value,
      description: descriptionInput!.value,
      active: activeInput!.checked
    };
    
    try {
      // If we have an ID, it's an update operation
      const isUpdate = !!tagIdInput!.value;
      const endpoint = isUpdate 
        ? `/api/v1/tags/${tagIdInput!.value}` 
        : '/api/v1/tags';
      
      const response = await fetch(endpoint, {
        method: isUpdate ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('Server returned non-JSON response');
      }

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'Error saving tag');
      }

      // Reload the page to show updated data
      window.location.reload();
    } catch (error) {
      console.error('Error saving tag:', error);
      alert('An error occurred while saving the tag');
    }
  });
  
  // Edit tag
  editButtons.forEach(button => {
    button.addEventListener('click', async () => {
      const tagId = button.getAttribute('data-id');
      
      try {
        const response = await fetch(`/api/v1/tags/${tagId}`);
        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Server returned non-JSON response');
          }
          const result = await response.json();
          throw new Error(result.message || 'Error loading tag details');
        }
        
        const { data: tag } = await response.json();
        
        if (!tag) {
          throw new Error('Tag not found');
        }
        
        // Fill the form
        tagIdInput!.value = tag.id;
        nameInput!.value = tag.name;
        slugInput!.value = tag.slug;
        descriptionInput!.value = tag.description || '';
        activeInput!.checked = tag.active;
        
        // Show the modal
        modalTitle!.textContent = 'Edit Tag';
        showModal();
      } catch (error) {
        console.error('Error loading tag:', error);
        alert('An error occurred while loading the tag');
      }
    });
  });
  
  // Delete tag
  deleteButtons.forEach(button => {
    button.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete this tag?')) {
        const tagId = button.getAttribute('data-id');
        
        try {
          const response = await fetch(`/api/v1/tags/${tagId}`, {
            method: 'DELETE',
            headers: {
              'Accept': 'application/json'
            }
          });
          
          if (!response.ok) {
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
              throw new Error('Server returned non-JSON response');
            }
            const result = await response.json();
            throw new Error(result.message || 'Error deleting tag');
          }

          // Reload the page to show updated data
          window.location.reload();
        } catch (error) {
          console.error('Error deleting tag:', error);
          alert('An error occurred while deleting the tag');
        }
      }
    });
  });
</script> 