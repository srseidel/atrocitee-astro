---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { createServerSupabaseClient } from "../../../lib/supabase";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Fetch products from the database
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });
const { data: productsData, error } = await supabase
  .from('products')
  .select('*')
  .order('created_at', { ascending: false });

// Fetch variants separately if products were found
let products = productsData;
if (productsData && !error) {
  // Get all product IDs to fetch variants
  const productIds = productsData.map((product: any) => product.id);
  
  // Fetch all variants for these products
  const { data: variantsData, error: variantsError } = await supabase
    .from('product_variants')
    .select('*')
    .in('product_id', productIds);
  
  // Attach variants to their respective products
  if (variantsData && !variantsError) {
    products = productsData.map((product: any) => ({
      ...product,
      product_variants: variantsData.filter((variant: any) => variant.product_id === product.id)
    }));
  }
}

// Get product stats from the database
const { data: productCount, error: productCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true });

const { data: activeProductCount, error: activeProductCountError } = await supabase
  .from('products')
  .select('count', { count: 'exact', head: true })
  .eq('active', true);

const { data: pendingChanges, error: pendingChangesError } = await supabase
  .from('printful_product_changes')
  .select('count', { count: 'exact', head: true })
  .eq('status', 'pending_review');

const { data: recentProducts, error: recentProductsError } = await supabase
  .from('products')
  .select('id, name, price, active, created_at, image_urls')
  .order('created_at', { ascending: false })
  .limit(5);

interface Product {
  id: string;
  name: string;
  price: number;
  active: boolean;
  image_urls: string[];
  donation_amount?: number;
  product_variants: any[];
}

---
<AdminLayout title="Product Management">
  <div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Product Management</h1>
      <div class="flex space-x-2">
        <a href="/admin/products/sync" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Sync with Printful
        </a>
        <a href="/admin/products/categories" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
          Manage Categories
        </a>
      </div>
    </div>

    {error && (
      <div class="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-6">
        <h2 class="font-semibold text-lg">Error Loading Products</h2>
        <p>{error.message}</p>
      </div>
    )}

    {!error && products && products.length === 0 && (
      <div class="bg-yellow-50 border border-yellow-200 text-yellow-700 p-4 rounded-lg mb-6">
        <h2 class="font-semibold text-lg">No Products Available</h2>
        <p>You don't have any products yet. Use the "Sync with Printful" button to import products from Printful.</p>
      </div>
    )}

    {products && products.length > 0 && (
      <div class="bg-white rounded-lg shadow-md overflow-hidden mb-6">
        <div class="p-4 bg-gray-50 border-b">
          <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold">Products ({products.length})</h2>
            <div class="flex items-center space-x-2">
              <div class="relative">
                <input 
                  type="text" 
                  id="product-search"
                  placeholder="Search products..."
                  class="border border-gray-300 rounded-lg px-3 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <span class="absolute right-3 top-2.5 text-gray-400">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                  </svg>
                </span>
              </div>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Product
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Variants
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Donation
                </th>
                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {products.map((product: Product) => (
                <tr class="product-row hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {product.image_urls && product.image_urls.length > 0 ? (
                        <img class="h-10 w-10 rounded-full object-cover mr-3" src={product.image_urls[0]} alt={product.name} />
                      ) : (
                        <div class="h-10 w-10 rounded-full bg-gray-200 mr-3 flex items-center justify-center text-gray-500">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                      )}
                      <div>
                        <div class="text-sm font-medium text-gray-900">{product.name}</div>
                        <div class="text-sm text-gray-500">ID: {product.id.substring(0, 8)}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {product.product_variants ? product.product_variants.length : 0} variants
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${product.price.toFixed(2)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${product.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {product.active ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {product.donation_amount ? `$${product.donation_amount.toFixed(2)}` : 'Not set'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <a href={`/admin/products/edit/${product.id}`} class="text-blue-600 hover:text-blue-900 mr-3">Edit</a>
                    <a href={`/admin/products/view/${product.id}`} class="text-gray-600 hover:text-gray-900">View</a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    )}
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Product Sync</h2>
        <p class="text-gray-600 mb-4">
          Synchronize your products with Printful to import new products and update existing ones.
        </p>
        <a href="/admin/products/sync" class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Go to Sync
        </a>
      </div>
      
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Categories</h2>
        <p class="text-gray-600 mb-4">
          Manage product categories to organize your store and help customers find products.
        </p>
        <a href="/admin/products/categories" class="inline-block bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
          Manage Categories
        </a>
      </div>
      
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Tags</h2>
        <p class="text-gray-600 mb-4">
          Create and manage tags to improve product discovery and filtering.
        </p>
        <a href="/admin/products/tags" class="inline-block bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
          Manage Tags
        </a>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Initialize search functionality
  const searchInput = document.getElementById('product-search');
  const productRows = document.querySelectorAll('.product-row');
  
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
      
      productRows.forEach((row) => {
        const productName = row.querySelector('.text-sm.font-medium')?.textContent?.toLowerCase() || '';
        
        if (productName.includes(searchTerm)) {
          row.classList.remove('hidden');
        } else {
          row.classList.add('hidden');
        }
      });
    });
  }
</script> 