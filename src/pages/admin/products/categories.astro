---

import AdminLayout from "../../../layouts/AdminLayout.astro";
import { createServerSupabaseClient } from "../../../lib/supabase";

// Server-side rendering to ensure we can access cookies
export const prerender = false;

// Authentication is now handled by middleware in src/middleware.ts

// Fetch categories from the database
const supabase = createServerSupabaseClient({ cookies: Astro.cookies });
const { data: categories, error } = await supabase
  .from('categories')
  .select('*')
  .order('name');

interface Category {
  id: string;
  name: string;
  slug: string;
  description?: string;
  active: boolean;
  created_at: string;
  parent_id?: string;
}

---
<AdminLayout title="Category Management">
  <div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Category Management</h1>
      <button id="add-category" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
        Add New Category
      </button>
    </div>
    
    <!-- Categories List -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      {error && (
        <div class="p-4 bg-red-50 border border-red-200 text-red-700">
          Error loading categories: {error.message}
        </div>
      )}
      
      {(!categories || categories.length === 0) && !error && (
        <div class="p-8 text-center text-gray-500">
          <p class="mb-4">No categories found. Create your first category to get started.</p>
        </div>
      )}
      
      {categories && categories.length > 0 && (
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Slug
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Products
              </th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {categories.map((category: Category) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{category.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-500">{category.slug}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${category.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {category.active ? 'Active' : 'Inactive'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {/* This would show the product count, but we need to implement that */}
                  -
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button class="text-blue-600 hover:text-blue-900 mr-3 edit-category" data-id={category.id}>Edit</button>
                  <button class="text-red-600 hover:text-red-900 delete-category" data-id={category.id}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  </div>
  
  <!-- Category Form Modal (hidden by default) -->
  <div id="category-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-auto">
      <h2 id="modal-title" class="text-xl font-semibold mb-4">Add New Category</h2>
      
      <form id="category-form" class="space-y-4">
        <input type="hidden" id="category-id">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
          <input type="text" id="name" name="name" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        
        <div>
          <label for="slug" class="block text-sm font-medium text-gray-700 mb-1">Slug</label>
          <input type="text" id="slug" name="slug" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea id="description" name="description" rows="3" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
        </div>
        
        <div class="flex items-center">
          <input type="checkbox" id="active" name="active" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
          <label for="active" class="ml-2 block text-sm text-gray-900">Active</label>
        </div>
        
        <div class="flex justify-end pt-4">
          <button type="button" id="cancel-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded mr-2">
            Cancel
          </button>
          <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            Save Category
          </button>
        </div>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  // DOM elements
  const addCategoryBtn = document.getElementById('add-category');
  const categoryModal = document.getElementById('category-modal');
  const modalTitle = document.getElementById('modal-title');
  const categoryForm = document.getElementById('category-form') as HTMLFormElement;
  const cancelBtn = document.getElementById('cancel-btn');
  const categoryIdInput = document.getElementById('category-id') as HTMLInputElement;
  const nameInput = document.getElementById('name') as HTMLInputElement;
  const slugInput = document.getElementById('slug') as HTMLInputElement;
  const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
  const activeInput = document.getElementById('active') as HTMLInputElement;
  const editButtons = document.querySelectorAll('.edit-category');
  const deleteButtons = document.querySelectorAll('.delete-category');
  
  // Event Listeners
  addCategoryBtn?.addEventListener('click', () => {
    modalTitle!.textContent = 'Add New Category';
    categoryForm!.reset();
    categoryIdInput!.value = '';
    activeInput!.checked = true;
    categoryModal?.classList.remove('hidden');
  });
  
  cancelBtn?.addEventListener('click', () => {
    categoryModal?.classList.add('hidden');
  });
  
  // Generate slug from name
  nameInput?.addEventListener('input', () => {
    if (nameInput.value && !slugInput!.value) {
      slugInput!.value = nameInput.value
        .toLowerCase()
        .replace(/[^\w\s]/gi, '')
        .replace(/\s+/g, '-');
    }
  });
  
  // Category form submission
  categoryForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = {
      name: nameInput!.value,
      slug: slugInput!.value,
      description: descriptionInput!.value,
      active: activeInput!.checked
    };
    
    try {
      // If we have an ID, it's an update operation
      const isUpdate = !!categoryIdInput!.value;
      const endpoint = isUpdate 
        ? `/api/categories/${categoryIdInput!.value}` 
        : '/api/categories';
      
      const response = await fetch(endpoint, {
        method: isUpdate ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        // Reload the page to show updated data
        window.location.reload();
      } else {
        const data = await response.json();
        alert(data.message || 'Error saving category');
      }
    } catch (error) {
      console.error('Error saving category:', error);
      alert('An error occurred while saving the category');
    }
  });
  
  // Edit category
  editButtons.forEach(button => {
    button.addEventListener('click', async () => {
      const categoryId = button.getAttribute('data-id');
      
      try {
        const response = await fetch(`/api/categories/${categoryId}`);
        if (response.ok) {
          const category = await response.json();
          
          // Fill the form
          categoryIdInput!.value = category.id;
          nameInput!.value = category.name;
          slugInput!.value = category.slug;
          descriptionInput!.value = category.description || '';
          activeInput!.checked = category.active;
          
          // Show the modal
          modalTitle!.textContent = 'Edit Category';
          categoryModal?.classList.remove('hidden');
        } else {
          alert('Error loading category details');
        }
      } catch (error) {
        console.error('Error loading category:', error);
        alert('An error occurred while loading the category');
      }
    });
  });
  
  // Delete category
  deleteButtons.forEach(button => {
    button.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete this category?')) {
        const categoryId = button.getAttribute('data-id');
        
        try {
          const response = await fetch(`/api/categories/${categoryId}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            // Reload the page to show updated data
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.message || 'Error deleting category');
          }
        } catch (error) {
          console.error('Error deleting category:', error);
          alert('An error occurred while deleting the category');
        }
      }
    });
  });
</script> 