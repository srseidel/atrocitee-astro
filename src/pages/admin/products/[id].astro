---
// Server-side rendering for auth
export const prerender = false;

import { PrintfulService } from "@lib/printful/service";
import { createServerSupabaseClient } from "@lib/supabase/client";
import AdminLayout from "@layouts/AdminLayout.astro";
// Import the middleware from the root middleware file
import { onRequest } from "../../../middleware";
import MockupModal from '@components/features/products/MockupModal.astro';

// Export the onRequest middleware for authentication
export { onRequest };

interface ProductVariant {
  id: string;
  name: string;
  sku: string;
  retail_price: number;
    [key: string]: any;
}

interface Charity {
  id: string;
  name: string;
}

interface Tag {
  id: string;
  name: string;
}

interface ProductTag {
  tag_id: string;
  tags: Tag;
}

// Initialize Supabase client
const supabase = createServerSupabaseClient({ cookies: Astro.cookies, request: Astro.request });

// Get the user's session
const { data: { session } } = await supabase.auth.getSession();

// Check if user is admin
const { data: isAdmin } = await supabase.rpc('is_admin');
if (!isAdmin) {
  return new Response('Unauthorized', { status: 401 });
}

// Get product ID from URL
const { id } = Astro.params;
console.log('Fetching product with ID:', id);

// Get product details
const { data: product, error: productError } = await supabase
  .from('products')
  .select(`
    *,
    product_variants (
      id,
      name,
      sku,
      retail_price,
      in_stock,
      options,
      files,
      printful_id,
      printful_external_id,
      printful_product_id,
      printful_synced,
      stock_level,
      mockup_settings
    ),
    product_tags!fk_product_tags_product (
      tag_id,
      tags!fk_product_tags_tag (
        id,
        name
      )
    )
  `)
  .eq('id', id)
  .single();

// Log the query results with better variant details
console.log('Product query results:', {
  id: product?.id,
  name: product?.name,
  atrocitee_base_price: product?.atrocitee_base_price,
  variants: product?.product_variants?.map((variant: ProductVariant) => ({
    id: variant.id,
    name: variant.name,
    sku: variant.sku,
    retail_price: variant.retail_price,
    options: variant.options,
    files: variant.files
  }))
});

// Handle product not found error first
if (productError || !product) {
  console.error('Product error:', {
    error: productError,
    id,
    message: productError?.message,
    details: productError?.details,
    hint: productError?.hint
  });
  return new Response('Product not found', { status: 404 });
}

// Get Printful details if product has a Printful ID
let printfulProduct = null;
if (product.printful_id) {
  const printfulService = PrintfulService.getInstance();
  try {
    const response = await printfulService.getProduct(product.printful_id);
    printfulProduct = response;
  } catch (error) {
    console.error('Error fetching Printful product:', error);
  }
}

// Fetch all charities for the dropdown
const { data: charities } = await supabase
  .from('charities')
  .select('id, name')
  .eq('active', true)
  .order('name');

// Fetch all tags for the tag selector
const { data: tags, error: tagsError } = await supabase
  .from('tags')
  .select('id, name')
  .eq('active', true)
  .order('name');

if (tagsError) {
  console.error('Error fetching tags:', {
    error: tagsError,
    message: tagsError.message,
    details: tagsError.details,
    hint: tagsError.hint
  });
}

// Fetch all categories for the dropdown
const { data: categories, error: categoriesError } = await supabase
  .from('atrocitee_categories')
  .select('id, name, slug')
  .eq('is_active', true)
  .order('name');

console.log('Categories query result:', { categories, error: categoriesError });

// Handle form submission
if (Astro.request.method === 'POST') {
  console.log('Received POST request');
  const formData = await Astro.request.formData();
  
  // Log raw form data
  console.log('Raw form data:');
  for (const [key, value] of formData.entries()) {
    console.log(`${key}: ${value}`);
  }
  
  // Process form data
  const processedData = {
    name: formData.get('name'),
    slug: formData.get('slug'),
    description: formData.get('description'),
    published_status: formData.get('status') === 'true',
    atrocitee_base_price: parseFloat(formData.get('base_price') as string) || null,
    atrocitee_donation_amount: parseFloat(formData.get('donation_amount') as string) || null,
    atrocitee_charity_id: formData.get('atrocitee_charity_id') || null,
    atrocitee_featured: formData.get('featured') === 'true',
    atrocitee_category_id: formData.get('atrocitee_category_id') || null
  };

  console.log('Processed form data:', processedData);

  try {
    // Log the processed data for debugging
    console.log('Updating product with data:', processedData);

    // Update product
    const { data: updatedProduct, error: updateError } = await supabase
      .from('products')
      .update({
        name: processedData.name,
        description: processedData.description,
        slug: processedData.slug,
        atrocitee_category_id: processedData.atrocitee_category_id,
        atrocitee_base_price: processedData.atrocitee_base_price,
        atrocitee_donation_amount: processedData.atrocitee_donation_amount,
        atrocitee_featured: processedData.atrocitee_featured,
        atrocitee_charity_id: processedData.atrocitee_charity_id,
        published_status: processedData.published_status,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();

    if (updateError) {
      console.error('Error updating product:', updateError);
      throw updateError;
    }

    console.log('Product updated successfully:', updatedProduct);

    // Handle tags
    const selectedTags = Array.from(formData.getAll('tags')).filter(tag => tag !== '');
    console.log('Processing tags:', selectedTags);
    
    // First, delete existing tags
    const { error: deleteError } = await supabase
      .from('product_tags')
      .delete()
      .eq('product_id', id);

    if (deleteError) {
      console.error('Error deleting tags:', deleteError);
      throw deleteError;
    }

    // Then insert new tags if there are any
    if (selectedTags.length > 0) {
      const tagInserts = selectedTags.map((tagId) => ({
        product_id: id,
        tag_id: tagId
      }));

      console.log('Inserting tags:', tagInserts);

      const { error: insertError } = await supabase
        .from('product_tags')
        .insert(tagInserts);

      if (insertError) {
        console.error('Error inserting tags:', insertError);
        throw insertError;
      }
    }

    return Astro.redirect(`/admin/products/${id}?success=true`);
  } catch (error) {
    console.error('Error updating product:', error);
    return new Response(JSON.stringify({
      error: 'Update Error',
      message: 'Failed to update product',
      details: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    }), { 
      status: 500,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
}
---

<AdminLayout title={`Edit Product: ${product.name}`}>
  <div class="container mx-auto p-6">
    <div class="mb-6 flex justify-between items-center">
      <h1 class="text-3xl font-bold">Edit Product</h1>
      <a href="/admin/products-dashboard" class="text-blue-600 hover:text-blue-800">
        ‚Üê Back to Products
      </a>
    </div>

    {Astro.url.searchParams.get('success') === 'true' && (
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
        <strong class="font-bold">Success!</strong>
        <span class="block sm:inline">Product updated successfully.</span>
      </div>
    )}

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Product Details -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Product Details</h2>
        
        <form method="POST" class="space-y-4">
          <div>
            <label for="product-name" class="block text-sm font-medium text-gray-700">Product Name</label>
            <input 
              id="product-name"
              type="text" 
              name="name" 
              value={product.name}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              required
              aria-required="true"
            />
          </div>

          <div>
            <label for="product-slug" class="block text-sm font-medium text-gray-700">Product Slug</label>
            <input 
              id="product-slug"
              type="text" 
              name="slug" 
              value={product.slug}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              required
              aria-required="true"
            />
          </div>

          <div>
            <label for="product-description" class="block text-sm font-medium text-gray-700">Product Description</label>
            <textarea 
              id="product-description"
              name="description" 
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Product description"
            >{product.description || ''}</textarea>
          </div>

          <div>
            <label for="product-base-price" class="block text-sm font-medium text-gray-700">Base Price (USD)</label>
            <input 
              id="product-base-price"
              type="number" 
              name="base_price" 
              value={product.atrocitee_base_price !== null ? product.atrocitee_base_price : ''}
              step="0.01"
              min="0"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Product base price in USD"
              required
            />
            <p class="mt-1 text-sm text-gray-500">Set the base price for this product. This will be used as the selling price.</p>
          </div>

          <div>
            <label for="product-donation" class="block text-sm font-medium text-gray-700">Donation Amount (USD)</label>
            <input 
              id="product-donation"
              type="number" 
              name="donation_amount" 
              value={product.atrocitee_donation_amount || ''}
              step="0.01"
              min="0"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Donation amount in USD"
            />
          </div>

          <div>
            <label for="product-charity" class="block text-sm font-medium text-gray-700">Associated Charity</label>
            <select 
              id="product-charity"
              name="atrocitee_charity_id"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select a charity"
            >
              <option value="">Select a charity</option>
              {charities?.map((charity: Charity) => (
                <option 
                  value={charity.id} 
                  selected={charity.id === product.atrocitee_charity_id}
                >
                  {charity.name}
                </option>
              ))}
            </select>
          </div>

          <div class="sm:col-span-3">
            <label for="status" class="block text-sm font-medium text-gray-700">
              Publication Status
            </label>
            <div class="mt-1">
              <select
                id="status"
                name="status"
                class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              >
                <option value="true" selected={product.published_status}>Published</option>
                <option value="false" selected={!product.published_status}>Unpublished</option>
              </select>
            </div>
          </div>

          <div>
            <label for="product-featured" class="block text-sm font-medium text-gray-700">Featured Status</label>
            <select 
              id="product-featured"
              name="featured"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select featured status"
            >
              <option value="true" selected={product.atrocitee_featured}>Yes - Show on homepage</option>
              <option value="false" selected={!product.atrocitee_featured}>No - Regular listing only</option>
            </select>
            <p class="mt-1 text-sm text-gray-500">Featured products will be highlighted on the homepage</p>
          </div>

          <div>
            <label for="product-category" class="block text-sm font-medium text-gray-700">Product Category</label>
            <select 
              id="product-category"
              name="atrocitee_category_id"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              aria-label="Select product category"
            >
              <option value="">Select a category</option>
              {categories?.map((category) => (
                <option 
                  value={category.id} 
                  selected={category.id === product.atrocitee_category_id}
                >
                  {category.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <fieldset>
              <legend class="block text-sm font-medium text-gray-700">Product Tags</legend>
              <div class="mt-2 space-y-2">
                {tags?.map((tag: Tag) => (
                  <div class="flex items-center">
                    <input 
                      type="checkbox" 
                      name="tags" 
                      value={tag.id}
                      id={`tag-${tag.id}`}
                      checked={product.product_tags?.some((pt: ProductTag) => pt.tag_id === tag.id)}
                      class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      aria-label={`Select ${tag.name} tag`}
                    />
                    <label for={`tag-${tag.id}`} class="ml-2 text-sm text-gray-700">
                      {tag.name}
                    </label>
                  </div>
                ))}
              </div>
              <p class="mt-1 text-sm text-gray-500">Select one or more tags for this product</p>
            </fieldset>
          </div>

          <div class="flex justify-between">
            <button 
              type="submit"
              class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
            >
              Save Changes
            </button>
            <button 
              type="button"
              id="deleteProduct"
              class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
            >
              Delete Product
            </button>
          </div>
        </form>
      </div>

      <!-- Product Variants -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Product Variants</h2>
        
        {product.product_variants && product.product_variants.length > 0 ? (
          <div class="space-y-4">
            {product.product_variants.map((variant: ProductVariant) => (
              <div class="border rounded-md p-4">
                <div class="flex justify-between items-start">
                  <div>
                    <h3 class="font-medium">{variant.name}</h3>
                    <p class="text-sm text-gray-500">SKU: {variant.sku}</p>
                  </div>
                  <div class="text-right">
                    <p class="font-medium">${variant.retail_price}</p>
                    <p class="text-sm text-gray-500">
                      {variant.in_stock ? 'In Stock' : 'Out of Stock'}
                    </p>
                  </div>
                </div>
                
                {Array.isArray(variant.options) && variant.options.length > 0 && (
                  <div class="mt-2">
                    <p class="text-sm text-gray-500">Options:</p>
                    <ul class="text-sm">
                      {variant.options.map((option) => (
                        <li class="text-gray-600">
                          {option.id}: {
                            Array.isArray(option.value) 
                              ? option.value.join(', ') || 'None'
                              : String(option.value || 'None')
                          }
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                
                <!-- Mockup Management -->
                <div class="mt-4 border-t pt-3">
                  <div class="flex justify-between items-center mb-2">
                    <h4 class="font-medium text-sm">Mockups</h4>
                    <button 
                      type="button" 
                      class="text-xs bg-blue-50 text-blue-600 px-2 py-1 rounded hover:bg-blue-100"
                      data-variant-id={variant.id}
                      data-action="manage-mockups"
                    >
                      Manage Mockups
                    </button>
                  </div>
                  
                  <!-- Variant Color -->
                  <div class="mb-2 text-xs">
                    <span class="text-gray-600">Color:</span> 
                    <span class="variant-color font-medium" data-variant-id={variant.id}>
                      {(() => {
                        // Extract color from variant name (e.g., "Atrocitee classic tee / white / XL")
                        const parts = variant.name.split('/').map(p => p.trim());
                        return parts.length > 1 ? parts[1] : variant.options?.find((opt: { id: string; value: string }) => opt.id === 'color')?.value || 'Unknown';
                      })()}
                    </span>
                  </div>
                  
                  <!-- Current Mockups Grid -->
                  <div class="variant-mockups-grid grid grid-cols-2 sm:grid-cols-3 gap-2 mt-2" data-variant-id={variant.id}>
                    <div class="mockup-loading-placeholder text-center p-4 text-gray-500 text-sm col-span-full">
                      Loading mockups...
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">No variants found for this product.</p>
        )}
      </div>
    </div>

    <!-- Printful Details -->
    {printfulProduct && (
      <div class="mt-6 bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-4">Printful Details</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500">Printful ID</p>
            <p class="font-medium">{printfulProduct.id}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500">Last Synced</p>
            <p class="font-medium">
              {new Date(product.updated_at).toLocaleString()}
            </p>
          </div>
        </div>
      </div>
    )}

    <MockupModal productSlug={product.slug} />
  </div>
</AdminLayout>

<script define:vars={{ productId: product.id, productSlug: product.slug }}>
  // Auto-generate slug from name
  const nameInput = document.querySelector('input[name="name"]');
  const slugInput = document.querySelector('input[name="slug"]');

  if (nameInput && slugInput) {
    nameInput.addEventListener('input', (e) => {
      const target = e.target;
      if (target instanceof HTMLInputElement) {
        const name = target.value;
        const slug = name
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        if (slugInput instanceof HTMLInputElement) {
          slugInput.value = slug;
        }
      }
    });

    // Initialize slug if empty
    if (slugInput instanceof HTMLInputElement && !slugInput.value) {
      if (nameInput instanceof HTMLInputElement) {
        const name = nameInput.value;
        const slug = name
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        slugInput.value = slug;
      }
    }
  }

  // Add form submission logging
  const form = document.querySelector('form');
  form?.addEventListener('submit', (e) => {
    const formData = new FormData(e.target);
    const data = {};
    
    // Log all form fields
    for (const [key, value] of formData.entries()) {
      data[key] = value;
    }
    
    console.log('Submitting form data:', data);
  });

  // Handle product deletion
  const deleteButton = document.getElementById('deleteProduct');
  deleteButton?.addEventListener('click', async () => {
    if (!confirm('Are you sure you want to delete this product? This action cannot be undone. The product will be re-added on next sync if it still exists in Printful.')) {
      return;
    }

    try {
      const response = await fetch(`/api/v1/admin/products/${productId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        credentials: 'include'
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to delete product');
      }

      // Redirect to products dashboard after successful deletion
      window.location.href = '/admin/products-dashboard';
    } catch (error) {
      console.error('Error deleting product:', error);
      alert(error instanceof Error ? error.message : 'Failed to delete product');
    }
  });

  // Wait for the DOM to be fully loaded before accessing elements
  document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const mockupModal = document.getElementById('mockupManagementModal');
    const closeModalBtn = document.getElementById('closeModal');
    const cancelModalBtn = document.getElementById('cancelModal');
    
    // Current active variant for the modal
    let activeVariantId = null;
    let activeProductSlug = null;
    let activeColor = null;
    let activeSize = null;
    
    // Track available mockups
    let availableMockups = [];

    // Load mockups for all variants on page load
    document.querySelectorAll('.variant-mockups-grid').forEach(grid => {
      const variantId = grid.getAttribute('data-variant-id');
      if (variantId) {
        loadMockups(variantId);
      }
    });
    
    // Open modal when clicking Manage Mockups button
    document.querySelectorAll('[data-action="manage-mockups"]').forEach(button => {
      button.addEventListener('click', async (e) => {
        const variantId = e.currentTarget.getAttribute('data-variant-id');
        if (!variantId) return;
        
        // Use the React component's API
        if (window.mockupModal) {
          window.mockupModal.show(variantId, productSlug);
        }
      });
    });
    
    // Close modal when clicking close buttons
    [closeModalBtn, cancelModalBtn].forEach(btn => {
      btn?.addEventListener('click', () => {
        if (mockupModal) {
          mockupModal.classList.add('hidden');
          mockupModal.classList.remove('flex');
        }
      });
    });
    
    // Save & Close button - Process mockups and close modal
    const saveAndCloseModalBtn = document.getElementById('saveAndCloseModal');
    saveAndCloseModalBtn?.addEventListener('click', async () => {
      // Get all assigned mockup filenames
      const assignedMockups = [];
      document.querySelectorAll('#modalCurrentMockups [data-filename]').forEach(el => {
        const filename = el.getAttribute('data-filename');
        if (filename) {
          assignedMockups.push(filename);
        }
      });

      // Get current variant and product info
      const currentVariantId = activeVariantId;
      const currentProductSlug = productSlug; // Use the global productSlug from define:vars

      console.log('Processing mockups:', {
        assignedMockups,
        currentVariantId,
        currentProductSlug
      });
      
      if (!currentVariantId || !currentProductSlug) {
        console.error('Missing required data:', { currentVariantId, currentProductSlug });
        alert('Error: Missing variant or product information. Please try closing and reopening the modal.');
        return;
      }

      if (assignedMockups.length === 0) {
        if (confirm('No mockups are assigned. Close anyway?')) {
          mockupModal.classList.add('hidden');
          mockupModal.classList.remove('flex');
        }
        return;
      }
      
      // Show processing message
      saveAndCloseModalBtn.disabled = true;
      saveAndCloseModalBtn.textContent = 'Processing...';
      
      try {
        // Call the API to process mockups
        const response = await fetch('/api/v1/admin/products/mockup?action=process', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            mockupFiles: assignedMockups,
            productSlug: currentProductSlug,
            variantId: currentVariantId
          })
        });

        // Log the response for debugging
        console.log('Process mockups response:', {
          status: response.status,
          ok: response.ok
        });
        
        // Check if the response is OK
        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          let errorMessage = `Error ${response.status}: ${response.statusText}`;
          
          if (contentType && contentType.includes('application/json')) {
            // If it's JSON, parse the error message
            const errorData = await response.json();
            errorMessage = errorData.message || errorMessage;
          }
          
          throw new Error(errorMessage);
        }
        
        const data = await response.json();
        console.log('Process mockups success:', data);
        
        // Show success message
        alert(`Mockups processed successfully! ${data.details?.processedCount || 0} files processed.`);
        
        // Close the modal
        mockupModal.classList.add('hidden');
        mockupModal.classList.remove('flex');

        // Refresh the main page display
        loadMockups(currentVariantId);
      } catch (error) {
        console.error('Error processing mockups:', error);
        alert(`Error processing mockups: ${error.message}`);
      } finally {
        // Reset button state
        saveAndCloseModalBtn.disabled = false;
        saveAndCloseModalBtn.textContent = 'Save & Close';
      }
    });
    
    // Close modal when clicking outside
    mockupModal?.addEventListener('click', (e) => {
      if (e.target === mockupModal) {
        mockupModal.classList.add('hidden');
        mockupModal.classList.remove('flex');
      }
    });
    
    // Function to load mockups for a variant
    async function loadMockups(variantId) {
      try {
        activeVariantId = variantId;
        
        // Handle variant mockups response
        const response = await fetch(`/api/v1/admin/products/mockup?variantId=${variantId}`);
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Failed to load mockup data');
        }

        // Update the variant mockups grid
        const mockupsGrid = document.querySelector(`.variant-mockups-grid[data-variant-id="${variantId}"]`);
        if (mockupsGrid && data.mockups) {
          if (data.mockups.length > 0) {
            mockupsGrid.innerHTML = data.mockups.map((mockup) => `
              <div class="border rounded overflow-hidden">
                <img src="${mockup.url}" alt="${mockup.view}" class="w-full h-24 object-contain bg-gray-100">
                <div class="p-2 text-xs">
                  <span class="font-medium">${mockup.view}</span>
                </div>
              </div>
            `).join('');
          } else {
            mockupsGrid.innerHTML = '<div class="text-gray-500 text-sm col-span-full">No mockups assigned</div>';
          }
        }

        // Store the active product slug
        activeProductSlug = productSlug;
      } catch (error) {
        console.error('Error loading mockups:', error);
        const mockupsGrid = document.querySelector(`.variant-mockups-grid[data-variant-id="${variantId}"]`);
        if (mockupsGrid) {
          mockupsGrid.innerHTML = '<div class="text-red-500 text-sm col-span-full">Failed to load mockups</div>';
        }
      }
    }
  });
</script>

<!-- Import Astro components for mockup management -->
<script>
  // Additional JS that might be needed for the page (not using external JS file)
</script> 