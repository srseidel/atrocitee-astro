---
import AdminLayout from "@layouts/AdminLayout.astro";
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@types/database';

// Server-side rendering for dynamic route
export const prerender = false;

// Get the product ID from the URL
const { id } = Astro.params;

// Initialize Supabase client
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// Fetch product data
const { data: product, error: productError } = await supabase
  .from('products')
  .select('*')
  .eq('id', id)
  .single();

if (productError || !product) {
  return Astro.redirect('/admin/products');
}

// Fetch available categories
const { data: categories } = await supabase
  .from('atrocitee_categories')
  .select('*')
  .order('name');

// Fetch available charities
const { data: charities } = await supabase
  .from('charities')
  .select('*')
  .order('name');

// Handle form submission
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const category = formData.get('category') as string;
  const tags = (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(Boolean);
  const charity = formData.get('charity') as string;
  const active = formData.get('active') === 'true';
  const featured = formData.get('featured') === 'true';

  // Update the product
  const { error: updateError } = await supabase
    .from('products')
    .update({
      atrocitee_category: category,
      atrocitee_tags: tags,
      atrocitee_charity_id: charity,
      atrocitee_active: active,
      atrocitee_featured: featured,
      updated_at: new Date().toISOString()
    })
    .eq('id', id);

  if (updateError) {
    console.error('Error updating product:', updateError);
  } else {
    // Redirect back to products page on success
    return Astro.redirect('/admin/products');
  }
}

// Fetch variants
const { data: variants, error: variantsError } = await supabase
  .from('printful_variants')
  .select('*')
  .eq('product_id', id);

// Fetch recent changes
const { data: changes, error: changesError } = await supabase
  .from('printful_product_changes')
  .select('*')
  .eq('product_id', id)
  .order('created_at', { ascending: false })
  .limit(5);

// Log for debugging
console.log('Product details:', {
  product,
  error: productError,
  variants,
  variantsError,
  changes,
  changesError
});
---

<AdminLayout title="Edit Product">
  <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <div class="px-4 py-6 sm:px-0">
      <div class="bg-white shadow overflow-hidden sm:rounded-lg">
        <form method="POST" class="space-y-8 divide-y divide-gray-200">
          <div class="px-4 py-5 sm:p-6">
            <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
              <!-- Product Info (Read-only) -->
              <div class="sm:col-span-6">
                <h3 class="text-lg font-medium text-gray-900">Product Information</h3>
                <p class="mt-1 text-sm text-gray-500">This information is synced from Printful and cannot be edited.</p>
              </div>
              <div class="sm:col-span-4">
                <label class="block text-sm font-medium text-gray-700">Product Name</label>
                <div class="mt-1">
                  <input type="text" value={product.name} disabled class="bg-gray-50 shadow-sm block w-full sm:text-sm border-gray-300 rounded-md" />
                </div>
              </div>
              <div class="sm:col-span-3">
                <label class="block text-sm font-medium text-gray-700">Base Price</label>
                <div class="mt-1">
                  <input type="text" value={`$${product.atrocitee_base_price}`} disabled class="bg-gray-50 shadow-sm block w-full sm:text-sm border-gray-300 rounded-md" />
                </div>
              </div>

              <!-- Atrocitee Configuration -->
              <div class="sm:col-span-6">
                <h3 class="text-lg font-medium text-gray-900">Atrocitee Configuration</h3>
                <p class="mt-1 text-sm text-gray-500">Configure how this product appears on Atrocitee.</p>
              </div>

              <div class="sm:col-span-3">
                <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                <div class="mt-1">
                  <select name="category" id="category" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                    <option value="">Select a category</option>
                    {categories?.map((category) => (
                      <option value={category.id} selected={product.atrocitee_category === category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div class="sm:col-span-3">
                <label for="charity" class="block text-sm font-medium text-gray-700">Charity</label>
                <div class="mt-1">
                  <select name="charity" id="charity" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                    <option value="">Select a charity</option>
                    {charities?.map((charity) => (
                      <option value={charity.id} selected={product.atrocitee_charity_id === charity.id}>
                        {charity.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div class="sm:col-span-6">
                <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                <div class="mt-1">
                  <input type="text" name="tags" id="tags" value={product.atrocitee_tags?.join(', ')} class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="new, politics, featured" />
                  <p class="mt-2 text-sm text-gray-500">Comma-separated list of tags</p>
                </div>
              </div>

              <div class="sm:col-span-3">
                <label for="active" class="block text-sm font-medium text-gray-700">Status</label>
                <div class="mt-1">
                  <select name="active" id="active" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                    <option value="true" selected={product.atrocitee_active}>Active</option>
                    <option value="false" selected={!product.atrocitee_active}>Inactive</option>
                  </select>
                </div>
              </div>

              <div class="sm:col-span-3">
                <label for="featured" class="block text-sm font-medium text-gray-700">Featured</label>
                <div class="mt-1">
                  <select name="featured" id="featured" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                    <option value="true" selected={product.atrocitee_featured}>Yes</option>
                    <option value="false" selected={!product.atrocitee_featured}>No</option>
                  </select>
                </div>
              </div>
            </div>
          </div>

          <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Save Changes
            </button>
          </div>
        </form>

        <!-- Variants Section -->
        <div class="px-4 py-5 sm:p-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Product Variants</h3>
          <div class="mt-4">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {variants?.map((variant) => (
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{variant.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{variant.sku}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${variant.retail_price}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <span class={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${
                        variant.in_stock ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {variant.in_stock ? 'In Stock' : 'Out of Stock'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Recent Changes Section -->
        {changes && changes.length > 0 && (
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Recent Changes</h3>
            <div class="mt-4">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Field</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Old Value</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">New Value</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {changes.map((change) => (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{change.field_name}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{change.old_value}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{change.new_value}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(change.created_at).toLocaleDateString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</AdminLayout> 