---
// @ts-nocheck - Disable TypeScript checking for Astro-specific attributes like 'class' vs 'className'
import Layout from '@layouts/Layout.astro';
import { parseMockupFilename, getViewLabel } from '@utils/helpers/mockups';
import type { Database } from '@local-types/database/schema';
import { createClient } from '@lib/supabase/client';

// Enable prerendering
export const prerender = true;

interface MockupView {
  view: string;
  label: string;
  filename: string;
  url: string;
  webpUrl: string;
}

interface MockupSetting {
  filename: string;
  [key: string]: any;
}

interface MockupSettings {
  [view: string]: MockupSetting;
}

interface ProductVariant {
  id: string;
  name?: string;
  sku?: string;
  retail_price: number | null;
  options: {
    color?: string;
    size?: string;
    [key: string]: string | undefined;
  };
  in_stock: boolean;
  stock_level?: number | null;
  mockup_settings?: {
    [key: string]: {
      filename: string;
      [key: string]: unknown;
    } | undefined;
  };
  mockupViews: MockupView[];
}

interface Product {
  id: string;
  name: string;
  slug: string;
  description: string;
  details?: string;
  published_status: boolean;
  variants: ProductVariant[];
  [key: string]: unknown;
}

// Replace get() with getStaticPaths()
export async function getStaticPaths() {
  const supabase = createClient();
  
  // Get all products to generate static paths
  const { data: products, error } = await supabase
    .from('products')
    .select('slug');
  
  if (error || !products) {
    console.error('Error fetching products for static paths:', error);
    return [];
  }
  
  // For each product, return a path with its data
  return await Promise.all(products.map(async ({ slug }) => {
    // Fetch full product data for this slug
    const { data: product, error } = await supabase
      .from('products')
      .select(`
        *,
        variants:product_variants(*)
      `)
      .eq('slug', slug)
      .single();
      
    if (error || !product) {
      console.error(`Error fetching product ${slug}:`, error);
      return null;
    }
    
    // Process variants the same way as before
    const processedVariants = (product.variants as any[]).map((variant: any): ProductVariant => {
      const mockupSettings = variant.mockup_settings || {};
      const mockupViews: MockupView[] = [];

      if (mockupSettings && typeof mockupSettings === 'object') {
        for (const [view, settings] of Object.entries(mockupSettings)) {
          if (settings && typeof settings === 'object' && 'filename' in settings) {
            const filename = settings.filename as string;
            const parsed = parseMockupFilename(filename);
            if (parsed) {
              const baseUrl = `/images/mockups/${product.slug}/${filename}`;
              const webpUrl = `${baseUrl.substring(0, baseUrl.lastIndexOf('.'))}.webp`;

              mockupViews.push({
                view,
                label: getViewLabel(view),
                filename,
                url: baseUrl,
                webpUrl,
              });
            }
          }
        }
      }

      mockupViews.sort((a, b) => {
        if (a.view.includes('front') && !b.view.includes('front')) return -1;
        if (!a.view.includes('front') && b.view.includes('front')) return 1;
        return 0;
      });

      return {
        ...variant,
        mockupViews,
      };
    });
    
    // Return the path and props
    return {
      params: { slug },
      props: {
        product: product as unknown as Product,
        slug,
        processedVariants,
      },
    };
  })).then(paths => paths.filter(Boolean));
}

// Get props from Astro
const { product, slug, processedVariants } = Astro.props;

// Get URL parameters for color and size
const url = new URL(Astro.request.url);
const initialColor = url.searchParams.get('color') || '';
const initialSize = url.searchParams.get('size') || '';

// Helpers
function findVariant(color: string, size: string): ProductVariant | undefined {
  return processedVariants.find(
    (v: ProductVariant) => v.options.color === color && v.options.size === size
  );
}

const selectedVariant = findVariant(initialColor, initialSize) || processedVariants[0];
const variantViews = selectedVariant?.mockupViews || [];

const availableColors = [...new Set(processedVariants.map((v: ProductVariant) => v.options.color))].filter(Boolean) as string[];
const availableSizes = [...new Set(processedVariants.map((v: ProductVariant) => v.options.size))].filter(Boolean) as string[];
availableSizes.sort((a, b) => {
  const sizeOrder: Record<string, number> = { XS: 1, S: 2, M: 3, L: 4, XL: 5, '2XL': 6, '3XL': 7, '4XL': 8 };
  return (sizeOrder[a] || 99) - (sizeOrder[b] || 99);
});

const colorClasses: Record<string, string> = {
  Black: 'bg-black',
  White: 'bg-white border border-gray-300',
  Gray: 'bg-gray-500',
  Red: 'bg-red-600',
  Blue: 'bg-blue-600',
  Navy: 'bg-blue-900',
  Green: 'bg-green-600',
  Yellow: 'bg-yellow-500',
  Orange: 'bg-orange-500',
  Purple: 'bg-purple-600',
  Pink: 'bg-pink-500',
  Brown: 'bg-amber-800',
  'Heather Gray': 'bg-gray-400',
  Charcoal: 'bg-gray-700',
  'Athletic Heather': 'bg-gray-300',
  'Royal Blue': 'bg-blue-700',
  'Forest Green': 'bg-green-800',
  Maroon: 'bg-red-900',
  Gold: 'bg-yellow-600',
  Teal: 'bg-teal-500',
  Burgundy: 'bg-red-800',
  Olive: 'bg-olive-700',
  Mint: 'bg-mint-400',
  Coral: 'bg-coral-500',
  Cream: 'bg-cream-200',
  Tan: 'bg-tan-400',
  'Light Blue': 'bg-blue-300',
  'Light Pink': 'bg-pink-300',
  'Light Green': 'bg-green-300',
  'Dark Green': 'bg-green-900',
  'Dark Blue': 'bg-blue-950',
  'Dark Gray': 'bg-gray-800',
};

const mainImage = variantViews.length > 0 ? variantViews[0] : null;
const formattedPrice = selectedVariant?.retail_price
  ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(selectedVariant.retail_price)
  : 'Price not available';
---

<Layout title={product.name}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row gap-8">
      {/* Product Images */}
      <div class="w-full md:w-1/2">
        <div class="bg-white rounded-lg overflow-hidden shadow-lg">
          {mainImage ? (
            <picture>
              <source srcset={mainImage.webpUrl} type="image/webp" />
              <img src={mainImage.url} alt={`${product.name} - ${mainImage.label}`} class="w-full h-auto object-cover" width="600" height="600" />
            </picture>
          ) : (
            <div class="bg-gray-200 w-full h-96 flex items-center justify-center">
              <p class="text-gray-500">No image available</p>
            </div>
          )}
        </div>

        {variantViews.length > 1 && (
          <div class="mt-4 grid grid-cols-4 gap-2">
            {variantViews.map((view: MockupView) => (
              <a href={`/shop/product/${slug}?color=${selectedVariant?.options.color || ''}&size=${selectedVariant?.options.size || ''}&view=${view.view}`} class="block">
                <picture>
                  <source srcset={view.webpUrl} type="image/webp" />
                  <img src={view.url} alt={`${product.name} - ${view.label}`} class="w-full h-auto object-cover rounded border hover:border-primary" width="150" height="150" />
                </picture>
              </a>
            ))}
          </div>
        )}
      </div>

      {/* Product Info */}
      <div class="w-full md:w-1/2">
        <h1 class="text-3xl font-bold mb-2">{product.name}</h1>
        <p class="text-2xl font-semibold text-primary mb-4">{formattedPrice}</p>

        <div class="prose max-w-none mb-6">
          <p>{product.description}</p>
        </div>

        {/* Color Selector */}
        {availableColors.length > 0 && (
          <div class="mb-6">
            <h3 class="text-lg font-semibold mb-2">Color: {selectedVariant?.options.color}</h3>
            <div class="flex flex-wrap gap-2">
              {availableColors.map((color: string) => {
                const isSelected = color === selectedVariant?.options.color;
                const colorClass = colorClasses[color] || 'bg-gray-500';
                return (
                  <a
                    href={`/shop/product/${slug}?color=${color}&size=${selectedVariant?.options.size || ''}`}
                    class={`w-8 h-8 rounded-full ${colorClass} ${isSelected ? 'ring-2 ring-offset-2 ring-primary' : ''}`}
                    title={color}
                    aria-selected={isSelected}
                  ></a>
                );
              })}
            </div>
          </div>
        )}

        {/* Size Selector */}
        {availableSizes.length > 0 && (
          <div class="mb-6">
            <div class="flex justify-between items-center mb-2">
              <h3 class="text-lg font-semibold">Size: {selectedVariant?.options.size}</h3>
              <button class="text-sm text-primary hover:underline">Size Guide</button>
            </div>
            <div class="flex flex-wrap gap-2">
              {availableSizes.map((size: string) => {
                const variant = findVariant(selectedVariant?.options.color || '', size);
                const isSelected = size === selectedVariant?.options.size;
                const isOutOfStock = variant && !variant.in_stock;
                return (
                  <a
                    href={isOutOfStock ? '#' : `/shop/product/${slug}?color=${selectedVariant?.options.color || ''}&size=${size}`}
                    class={`
                      min-w-[3rem] h-10 flex items-center justify-center px-3 rounded border 
                      ${isSelected ? 'border-primary bg-primary text-white' : 'border-gray-300'} 
                      ${isOutOfStock ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'hover:border-primary'}
                    `}
                    aria-label={`Select size ${size}`}
                    aria-selected={isSelected}
                    aria-disabled={isOutOfStock}
                  >
                    {size}
                    {isOutOfStock && <span class="ml-1 text-xs">- Out of Stock</span>}
                  </a>
                );
              })}
            </div>
          </div>
        )}

        {/* Add to Cart */}
        <div class="mb-6">
          <form method="post" action="/api/cart/add">
            <input type="hidden" name="product_id" value={product.id} />
            <input type="hidden" name="variant_id" value={selectedVariant?.id} />
            <input type="hidden" name="quantity" value="1" />
            <button
              type="submit"
              class="w-full bg-primary hover:bg-primary-dark text-white font-bold py-3 px-6 rounded transition-colors"
              disabled={!selectedVariant?.in_stock}
            >
              {selectedVariant?.in_stock ? 'Add to Cart' : 'Out of Stock'}
            </button>
          </form>
        </div>

        {/* Product Details */}
        <div class="border-t border-gray-200 pt-4">
          <h3 class="text-lg font-semibold mb-2">Product Details</h3>
          <ul class="list-disc list-inside text-gray-700 space-y-1">
            {product.details && product.details.split('\n').map((detail: string) => (
              <li>{detail}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>
</Layout>
---