---
import { createServerSupabaseClient } from '@lib/supabase/client';
import Layout from '@layouts/Layout.astro';
import type { Database } from '@local-types/database/schema';

interface ProductVariant {
  id: string;
  name: string;
  sku: string;
  retail_price: number | null;
  options: Record<string, string>;
  in_stock: boolean;
  stock_level: number | null;
}

type Product = Database['public']['Tables']['products']['Row'] & {
  product_variants: ProductVariant[];
  charities?: Database['public']['Tables']['charities']['Row'] | null;
  atrocitee_category_id: number;
};

type Category = Database['public']['Tables']['atrocitee_categories']['Row'];

interface VariantOption {
  name: string;
  values: string[];
}

// Type guard to check if a value is a Set<string>
function isStringSet(value: unknown): value is Set<string> {
  return value instanceof Set && Array.from(value).every(item => typeof item === 'string');
}

// Use server-side rendering for dynamic data
export const prerender = false;

// Get the product slug from the URL
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Get the product data
const supabase = createServerSupabaseClient({ cookies: Astro.cookies, request: Astro.request });

// Get all categories for the sidebar
const { data: categories } = await supabase
  .from('atrocitee_categories')
  .select('*')
  .eq('is_active', true);

// Get all products for counts
const { data: allProducts } = await supabase
  .from('products')
  .select('*')
  .eq('published_status', true);

// Get featured products
const featuredProducts = allProducts?.filter(p => p.atrocitee_featured) || [];

// Get the product data
const { data: product, error: productError } = await supabase
  .from('products')
  .select(`
    *,
    product_variants (
      id,
      retail_price,
      options,
      in_stock,
      stock_level,
      name,
      sku
    ),
    charities (
      name,
      description,
      website_url,
      logo_url
    )
  `)
  .eq('slug', slug)
  .eq('published_status', true)
  .single();

if (productError || !product) {
  return Astro.redirect('/404');
}

// Debug full variant data
console.log('Full variant data:', JSON.stringify(product.product_variants, null, 2));

// Extract size and color from variant names (e.g., "Atrocitee classic tee / Black / S")
const variantsByOption = product.product_variants.reduce((acc: Record<string, Set<string>>, variant: ProductVariant) => {
  // Parse the variant name which contains product name, color and size
  const nameParts = variant.name?.split('/').map(part => part.trim());
  if (nameParts?.length === 3) {
    const [_productName, color, size] = nameParts;
    
    // Add color option
    if (!acc['Color']) {
      acc['Color'] = new Set<string>();
    }
    acc['Color'].add(color);

    // Add size option
    if (!acc['Size']) {
      acc['Size'] = new Set<string>();
    }
    acc['Size'].add(size);
  }

  return acc;
}, {} as Record<string, Set<string>>);

// Debug the extracted options
console.log('Extracted variant options:', {
  colors: Array.from(variantsByOption['Color'] || []),
  sizes: Array.from(variantsByOption['Size'] || [])
});

// Sort sizes in specific order
const sizeOrder = ['S', 'M', 'L', 'XL', '2XL', '4XL'];
function sortSizes(sizes: string[]): string[] {
  return sizes.sort((a, b) => sizeOrder.indexOf(a) - sizeOrder.indexOf(b));
}

// Convert Sets to Arrays for template use
const options: VariantOption[] = Object.entries(variantsByOption).map(([name, values]) => {
  if (!isStringSet(values)) {
    return { name, values: [] };
  }
  const valuesArray = Array.from(values);
  return {
    name,
    // Sort sizes in specific order, other options alphabetically
    values: name === 'Size' ? sortSizes(valuesArray) : valuesArray.sort()
  };
});

// Sort options to ensure consistent order (Size first, then Color)
options.sort((a, b) => {
  const order = ['Size', 'Color'];
  return order.indexOf(a.name) - order.indexOf(b.name);
});

// Find available variants for the current selection
function findMatchingVariant(selectedOptions: Record<string, string>): ProductVariant | undefined {
  return product.product_variants.find((variant: ProductVariant) => {
    if (!variant.options || typeof variant.options !== 'object') return false;
    const variantOptions = variant.options as Record<string, string>;
    return Object.entries(selectedOptions).every(([key, value]) => 
      variantOptions[key.toLowerCase()] === value
    );
  });
}

// Get initial variant (first available one)
const initialVariant = product.product_variants[0];

// Initialize selected variant
const selectedVariant = product.product_variants[0];
const selectedOptions: Record<string, string> = {};

// Debug logging
console.log('Product loaded:', product.name);
console.log('Variants:', product.product_variants.length);
console.log('Categories:', categories?.length || 0);
console.log('Featured products:', featuredProducts.length);
---

<Layout title={product.name}>
  {/* Hero section */}
  <div class="relative">
    <div class="absolute inset-0">
      <img
        class="w-full h-64 object-cover"
        src="https://images.unsplash.com/photo-1525268771113-32d9e9021a97?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1920&q=80"
        alt="Shop hero"
      />
      <div class="absolute inset-0 bg-gray-900 bg-opacity-50"></div>
    </div>
    <div class="relative max-w-7xl mx-auto py-24 px-4 sm:py-32 sm:px-6 lg:px-8">
      <h1 class="text-4xl font-extrabold tracking-tight text-white sm:text-5xl lg:text-6xl">
        {product.name}
      </h1>
      <p class="mt-6 text-xl text-white max-w-3xl">
        {product.description}
      </p>
    </div>
  </div>

  <div class="min-h-screen bg-gray-50">
    <div class="flex">
      {/* Category Sidebar - Admin Style */}
      <div class="hidden lg:block lg:w-64 bg-white border-r border-gray-200">
        <div class="flex-1 flex flex-col min-h-0">
          <nav class="flex-1 space-y-1 pt-6" aria-label="Sidebar">
            <div class="px-3 py-2">
              <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">
                Categories
              </h3>
            </div>
            <a
              href="/shop"
              class:list={[
                'group flex items-center px-3 py-2 text-sm font-medium rounded-md',
                'text-gray-700 hover:bg-gray-50'
              ]}
            >
              <span class="truncate">All Products</span>
              {allProducts && (
                <span class="ml-auto inline-block py-0.5 px-3 text-xs rounded-full bg-gray-100 text-gray-700">
                  {allProducts.length}
                </span>
              )}
            </a>
            {categories?.map((category: Category) => {
              const categoryProducts = allProducts?.filter(p => p.atrocitee_category_id === category.id) || [];
              const isCurrentCategory = category.id === product.atrocitee_category_id;
              return (
                <a
                  href={`/shop/${category.slug}`}
                  class:list={[
                    'group flex items-center px-3 py-2 text-sm font-medium rounded-md',
                    isCurrentCategory ? 'bg-gray-200 text-gray-900' : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
                  ]}
                >
                  <span class="truncate">{category.name}</span>
                  <span class="ml-auto inline-block py-0.5 px-3 text-xs rounded-full bg-gray-100 text-gray-700">
                    {categoryProducts.length}
                  </span>
                </a>
              );
            })}

            {/* Featured Filter */}
            {featuredProducts.length > 0 && (
              <div class="mt-8">
                <div class="px-3 py-2">
                  <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">
                    Featured
                  </h3>
                </div>
                <a
                  href="/shop#featured"
                  class="group flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 rounded-md"
                >
                  <span class="truncate">Featured Products</span>
                  <span class="ml-auto inline-block py-0.5 px-3 text-xs rounded-full bg-gray-100 text-gray-700">
                    {featuredProducts.length}
                  </span>
                </a>
              </div>
            )}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div class="flex-1">
        <main class="py-6">
          <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            {/* Back to category link */}
            <div class="mb-8">
              <a
                href={product.atrocitee_category_id ? `/shop/${categories?.find(c => c.id === product.atrocitee_category_id)?.slug}` : '/shop'}
                class="text-sm font-medium text-indigo-600 hover:text-indigo-500"
              >
                <span aria-hidden="true">&larr;</span> Back to {product.atrocitee_category_id ? categories?.find(c => c.id === product.atrocitee_category_id)?.name : 'Shop'}
              </a>
            </div>

            {/* Product */}
            <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
              {/* Image gallery */}
              <div class="flex flex-col">
                <div class="w-full aspect-w-1 aspect-h-1 bg-gray-200 rounded-lg overflow-hidden">
                  <img
                    src={product.thumbnail_url || 'https://via.placeholder.com/600'}
                    alt={product.name}
                    class="w-full h-full object-center object-cover"
                  />
                </div>
              </div>

              {/* Product info */}
              <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
                <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{product.name}</h1>
                <div class="mt-3">
                  <h2 class="sr-only">Product information</h2>
                  <p class="text-3xl text-gray-900" data-variant-price>
                    ${selectedVariant?.retail_price?.toFixed(2) || product.atrocitee_base_price?.toFixed(2)}
                  </p>
                </div>

                <div class="mt-6">
                  <h3 class="sr-only">Description</h3>
                  <div class="text-base text-gray-700 space-y-6">
                    <p>{product.description}</p>
                  </div>
                </div>

                {/* Variant Selectors */}
                <div class="mt-8">
                  {options.map((option) => (
                    <div class="mb-4">
                      <h3 class="text-sm text-gray-900 font-medium">{option.name}</h3>
                      <div class="grid grid-cols-4 gap-4 mt-4" data-option-group={option.name}>
                        {option.values.map((value) => (
                          <button
                            type="button"
                            class="group relative border rounded-md py-3 px-4 flex items-center justify-center text-sm font-medium hover:bg-gray-50 focus:outline-none sm:flex-1 bg-white border-gray-300 text-gray-900"
                            data-value={value}
                            onclick={`updateSelectedOption('${option.name}', '${value}')`}
                          >
                            <span>{value}</span>
                          </button>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Add to cart */}
                <div class="mt-10">
                  <button
                    type="button"
                    class="w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    data-add-to-cart
                  >
                    Add to cart
                  </button>
                </div>

                {/* Charity information */}
                {product.charities && (
                  <div class="mt-8 border-t border-gray-200 pt-8">
                    <h3 class="text-sm font-medium text-gray-900">Default Supported Charity</h3>
                    <div class="mt-3 text-sm text-gray-500">
                      <p>{product.charities.name}</p>
                      <p class="mt-2 italic">Donation goes to the Default Supported Charity unless changed in your profile at checkout.</p>
                      <a
                        href={product.charities.website_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="block mt-4 text-indigo-600 hover:text-indigo-500"
                      >
                        Learn more about {product.charities.name} &rarr;
                      </a>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ variants: product.product_variants, initialPrice: selectedVariant?.retail_price || product.atrocitee_base_price }}>
  /**
   * @typedef {Object} Variant
   * @property {string} name - The variant name (e.g., "Atrocitee classic tee / Black / S")
   * @property {number|null} retail_price - The retail price of the variant
   * @property {boolean} in_stock - Whether the variant is in stock
   * @property {number|null} stock_level - The stock level of the variant
   */

  /** @type {Object.<string, string>} */
  const selectedOptions = {};

  /**
   * Find matching variant based on selected options
   * @param {Object} options - The currently selected options
   * @returns {Object|undefined} - The matching variant or undefined
   */
  function findMatchingVariant(options) {
    return variants.find(variant => {
      const nameParts = variant.name?.split('/').map(part => part.trim());
      if (!nameParts || nameParts.length !== 3) return false;
      
      const [_productName, color, size] = nameParts;
      return options['Color'] === color && options['Size'] === size;
    });
  }

  /**
   * Update the UI based on the selected variant
   * @param {Object|undefined} variant - The selected variant
   */
  function updateUI(variant) {
    // Update price
    const priceElement = document.querySelector('[data-variant-price]');
    if (priceElement) {
      const price = variant?.retail_price ?? initialPrice;
      priceElement.textContent = `$${price.toFixed(2)}`;
    }

    // Update add to cart button state
    const addToCartButton = document.querySelector('[data-add-to-cart]');
    if (addToCartButton) {
      const isAvailable = variant?.in_stock ?? true;
      addToCartButton.disabled = !isAvailable;
      addToCartButton.textContent = isAvailable ? 'Add to cart' : 'Out of stock';
    }
  }

  // Function to update selected option
  window.updateSelectedOption = function(optionName, value) {
    // Update selected options
    selectedOptions[optionName] = value;
    
    // Find matching variant
    const matchingVariant = findMatchingVariant(selectedOptions);
    
    // Update UI
    updateUI(matchingVariant);
    
    // Update button states
    document.querySelectorAll(`[data-option-group="${optionName}"] button`).forEach(button => {
      const isSelected = button.getAttribute('data-value') === value;
      button.classList.toggle('bg-indigo-600', isSelected);
      button.classList.toggle('text-white', isSelected);
      button.classList.toggle('border-transparent', isSelected);
      button.classList.toggle('border-gray-300', !isSelected);
      button.classList.toggle('text-gray-900', !isSelected);
      button.classList.toggle('bg-white', !isSelected);
    });
  };

  // Initialize with first available options
  window.addEventListener('DOMContentLoaded', () => {
    // Get first available option for each type
    const firstColor = document.querySelector('[data-option-group="Color"] button')?.getAttribute('data-value');
    const firstSize = document.querySelector('[data-option-group="Size"] button')?.getAttribute('data-value');
    
    // Select initial options
    if (firstColor) updateSelectedOption('Color', firstColor);
    if (firstSize) updateSelectedOption('Size', firstSize);
  });
</script> 