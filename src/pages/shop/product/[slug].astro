---
import { createClient } from '@lib/supabase/client';
import Layout from '@layouts/Layout.astro';
import type { Database } from '@local-types/database/schema';

// Use server-side rendering to ensure all products are accessible
export const prerender = false;

interface ProductVariant {
  id: string;
  name: string;
  sku: string;
  retail_price: number | null;
  options: Array<{id: string, value: any}>;
  in_stock: boolean;
  stock_level: number | null;
  mockup_settings?: any;
}

interface PublicCharity {
  id: string;
  name: string;
  description: string | null;
  website_url: string | null;
  logo_url: string | null;
  active: boolean;
}

type Product = Database['public']['Tables']['products']['Row'] & {
  product_variants: ProductVariant[];
  public_charities?: PublicCharity | null;
  atrocitee_category_id: number;
  atrocitee_featured?: boolean;
  atrocitee_base_price?: number;
  atrocitee_donation_amount?: number;
};

type Category = Database['public']['Tables']['atrocitee_categories']['Row'];

// Get the slug from the URL
const { slug } = Astro.params;

// Initialize Supabase client
const supabase = createClient();

// Fetch the product by slug
const { data: product, error: productError } = await supabase
  .from('products')
  .select(`
    *,
    product_variants (
      id,
      retail_price,
      options,
      in_stock,
      stock_level,
      name,
      sku,
      mockup_settings
    ),
    public_charities (
      name,
      description,
      website_url,
      logo_url,
      active
    ),
    atrocitee_categories (
      id,
      name,
      slug,
      is_active
    )
  `)
  .eq('slug', slug)
  .eq('published_status', true)
  .single();

// Handle product not found
if (productError || !product) {
  console.error(`Product not found for slug: ${slug}`, productError);
  return Astro.redirect('/404');
}

// Also fetch categories for the product page
const { data: categories } = await supabase
  .from('atrocitee_categories')
  .select('*')
  .eq('is_active', true);

// Get featured products
const { data: allProducts } = await supabase
  .from('products')
  .select('*')
  .eq('published_status', true);

const featuredProducts = allProducts?.filter((p: any) => p.atrocitee_featured) || [];

// Process variants to extract color and size
const processedVariants = product.product_variants.map((variant: ProductVariant) => {
  // Extract color and size from options array
  let color = "";
  let size = "";
  
  if (Array.isArray(variant.options)) {
    // Try to find color and size in the options array
    const colorOption = variant.options.find((opt: {id: string, value: any}) => opt.id === "color");
    const sizeOption = variant.options.find((opt: {id: string, value: any}) => opt.id === "size");
    
    color = colorOption?.value || "";
    size = sizeOption?.value || "";
  }
  
  // If color/size not found in options, extract from the name
  if (!color || !size) {
    const nameParts = variant.name.split('/').map((part: string) => part.trim());
    
    if (nameParts.length >= 2) {
      // For products with both color and size (like t-shirts)
      if (nameParts.length >= 3) {
        color = color || nameParts[1];
        size = size || nameParts[2];
      } 
      // For products with only color (like hats)
      else if (nameParts.length === 2) {
        color = color || nameParts[1];
      }
    }
  }
  
  // Extract mockups if available
  const mockups = variant.mockup_settings?.mockups || {};
  const mockupViews = Object.keys(mockups).map((view: string) => ({
    view,
    filename: mockups[view as keyof typeof mockups]?.filename || '',
    url: `/api/v1/admin/products/mockup?filename=${encodeURIComponent(mockups[view as keyof typeof mockups]?.filename || '')}`,
  }));
  
  return {
    ...variant,
    color,
    size,
    displayName: size ? `${color} - ${size}` : color,
    mockupViews
  };
});

// Extract available colors and sizes
const availableColors = [...new Set(processedVariants.map((v: any) => v.color))].filter(Boolean) as string[];
const availableSizes = [...new Set(processedVariants.map((v: any) => v.size))].filter((size): size is string => Boolean(size)).sort((a, b) => {
  // Common size order: XS, S, M, L, XL, 2XL, etc.
  const sizeOrder: Record<string, number> = { 
    "XS": 1, "S": 2, "M": 3, "L": 4, "XL": 5, "2XL": 6, "3XL": 7, "4XL": 8 
  };
  return (sizeOrder[a] || 99) - (sizeOrder[b] || 99);
});

// Get initial variant
const initialVariant = processedVariants[0];
const initialColor = initialVariant?.color || availableColors[0] || 'Black';
const initialSize = initialVariant?.size || availableSizes[0] || 'M';

// Get all available views for the initial variant
interface MockupView {
  view: string;
  filename: string;
  url: string;
}
const initialViews: MockupView[] = initialVariant?.mockupViews || [];

// Debug logging
console.log('Product loaded:', product.name);
console.log('Product slug:', product.slug);
console.log('Initial color:', initialColor);
console.log('Initial size:', initialSize);
console.log('Total variants:', product.product_variants.length);
console.log('Available colors:', availableColors);
console.log('Available sizes:', availableSizes);
console.log('First processed variant:', JSON.stringify(processedVariants[0], null, 2));
console.log('Initial views:', initialViews);
console.log('Categories:', categories?.length || 0);
console.log('Featured products:', featuredProducts.length);

// Map view IDs to more readable labels
function getViewLabel(viewId: string): string {
  const viewLabels: Record<string, string> = {
    'front': 'Front',
    'back': 'Back',
    'left': 'Left',
    'right': 'Right',
    'left_front': 'Left Front',
    'right_front': 'Right Front',
    'front-2': 'Front Detail',
    'back-2': 'Back Detail',
    'front-and-back': 'Front & Back',
    'flat': 'Flat',
    'lifestyle': 'Lifestyle'
  };
  
  return viewLabels[viewId] || viewId.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
}
---

<Layout title={product.name}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
      {/* Image gallery */}
      <div class="flex flex-col">
        {/* Main image */}
        <div class="aspect-w-1 aspect-h-1 rounded-lg bg-gray-100 overflow-hidden" id="main-image-container">
          <picture id="main-image">
            {initialViews.length > 0 ? (
              <>
                <img
                  src={initialViews[0]?.url || product.thumbnail_url}
                  alt={`${product.name} in ${initialColor}, size ${initialSize}`}
                  class="w-full h-full object-center object-cover"
                  onerror="this.onerror=null; this.src=this.getAttribute('data-fallback');"
                  data-fallback={product.thumbnail_url || ''}
                />
              </>
            ) : (
              <img
                src={product.thumbnail_url || ''}
                alt={`${product.name} in ${initialColor}, size ${initialSize}`}
                class="w-full h-full object-center object-cover"
              />
            )}
          </picture>
        </div>
        
        {/* Thumbnail gallery */}
        <div class="mt-4 grid grid-cols-6 gap-2" id="view-thumbnails">
          {initialViews.map((view: MockupView, index: number) => (
            <div 
              class={`aspect-w-1 aspect-h-1 rounded-md bg-gray-100 overflow-hidden cursor-pointer border-2 ${index === 0 ? 'border-indigo-600' : 'border-gray-200'}`} 
              data-view={view.view}
              data-url={view.url}
            >
              <img
                src={view.url}
                alt={`${getViewLabel(view.view)} view of ${product.name} in ${initialColor}, size ${initialSize}`}
                class="w-full h-full object-center object-cover"
                loading={index > 0 ? "lazy" : "eager"}
                onerror="this.onerror=null; this.closest('[data-view]').style.display='none';"
              />
              <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-20 opacity-0 hover:opacity-100 transition-opacity">
                <span class="text-white text-xs font-medium px-2 py-1 rounded bg-black bg-opacity-50">{getViewLabel(view.view)}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Product info */}
      <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
        <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{product.name}</h1>
        
        <div class="mt-3">
          <h2 class="sr-only">Product information</h2>
          <p class="text-3xl text-gray-900" id="product-price">
            ${initialVariant?.retail_price?.toFixed(2) || product.atrocitee_base_price?.toFixed(2)}
          </p>
        </div>

        <div class="mt-6">
          <h3 class="sr-only">Description</h3>
          <div class="text-base text-gray-700 space-y-6">
            <p>{product.description}</p>
          </div>
        </div>

        {/* Color Selection */}
        {availableColors.length > 0 && (
          <div class="mt-8">
            <h3 class="text-sm text-gray-900 font-medium">Color</h3>
            <div class="grid grid-cols-4 gap-4 mt-4">
              {availableColors.map((color) => (
                <button
                  type="button"
                  class={`group relative border rounded-md py-3 px-4 flex items-center justify-center text-sm font-medium focus:outline-none sm:flex-1 ${
                    color === initialColor 
                      ? 'bg-indigo-600 border-transparent text-white option-selected' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                  data-option="color"
                  data-value={color}
                >
                  {color}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Size Selection */}
        {availableSizes.length > 0 && (
          <div class="mt-8">
            <h3 class="text-sm text-gray-900 font-medium">Size</h3>
            <div class="grid grid-cols-4 gap-4 mt-4">
              {availableSizes.map((size) => (
                <button
                  type="button"
                  class={`group relative border rounded-md py-3 px-4 flex items-center justify-center text-sm font-medium focus:outline-none sm:flex-1 ${
                    size === initialSize 
                      ? 'bg-indigo-600 border-transparent text-white option-selected' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                  data-option="size"
                  data-value={size}
                >
                  {size}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Add to cart */}
        <div class="mt-10">
          <button
            type="button"
            id="add-to-cart"
            class="w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Add to cart
          </button>
        </div>

        {/* Charity Information */}
        {product.public_charities && (
          <div class="mt-10 border-t border-gray-200 pt-10">
            <h3 class="text-sm font-medium text-gray-900">Supporting Charity</h3>
            <div class="mt-4 flex items-center">
              {product.public_charities.logo_url && (
                <img
                  src={product.public_charities.logo_url}
                  alt={product.public_charities.name}
                  class="h-12 w-12 rounded-full"
                />
              )}
              <div class="ml-4">
                <h4 class="text-sm font-medium text-gray-900">{product.public_charities.name}</h4>
                <p class="mt-1 text-sm text-gray-500">{product.public_charities.description}</p>
                {product.public_charities.website_url && (
                  <a
                    href={product.public_charities.website_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="mt-2 text-sm text-indigo-600 hover:text-indigo-500"
                  >
                    Learn more about {product.public_charities.name}
                  </a>
                )}
              </div>
            </div>
            <p class="mt-4 text-sm text-gray-500">
              ${product.atrocitee_donation_amount?.toFixed(2)} from each purchase goes to {product.public_charities.name}
            </p>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>

<script is:inline define:vars={{ processedVariants, getViewLabel }}>
  // Function to update product images based on selected variant
  function updateProductImages(color, size) {
    // Find the matching variant
    const selectedVariant = processedVariants.find(v => v.color === color && (!size || v.size === size));
    
    if (selectedVariant && selectedVariant.mockupViews) {
      // Update main image
      const mainImageContainer = document.getElementById('main-image');
      if (mainImageContainer) {
        const mainImg = mainImageContainer.querySelector('img');
        if (mainImg && selectedVariant.mockupViews.length > 0) {
          mainImg.src = selectedVariant.mockupViews[0].url;
          mainImg.alt = `${selectedVariant.name} in ${color}${size ? `, size ${size}` : ''}`;
        }
      }
      
      // Update thumbnails
      const thumbnailsContainer = document.getElementById('view-thumbnails');
      if (thumbnailsContainer) {
        thumbnailsContainer.innerHTML = selectedVariant.mockupViews.map((view, index) => `
          <div 
            class="aspect-w-1 aspect-h-1 rounded-md bg-gray-100 overflow-hidden cursor-pointer border-2 ${index === 0 ? 'border-indigo-600' : 'border-gray-200'}" 
            data-view="${view.view}"
            data-url="${view.url}"
          >
            <img
              src="${view.url}"
              alt="${getViewLabel(view.view)} view of ${selectedVariant.name} in ${color}${size ? `, size ${size}` : ''}"
              class="w-full h-full object-center object-cover"
              loading="${index > 0 ? 'lazy' : 'eager'}"
              onerror="this.onerror=null; this.closest('[data-view]').style.display='none';"
            />
            <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-20 opacity-0 hover:opacity-100 transition-opacity">
              <span class="text-white text-xs font-medium px-2 py-1 rounded bg-black bg-opacity-50">${getViewLabel(view.view)}</span>
            </div>
          </div>
        `).join('');
        
        // Reattach click handlers for thumbnails
        attachThumbnailHandlers();
      }
      
      // Update price
      const priceElement = document.getElementById('product-price');
      if (priceElement && selectedVariant.retail_price) {
        priceElement.textContent = `$${selectedVariant.retail_price.toFixed(2)}`;
      }
    }
  }
  
  // Function to attach click handlers to thumbnails
  function attachThumbnailHandlers() {
    document.querySelectorAll('#view-thumbnails [data-view]').forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        // Update main image
        const mainImg = document.querySelector('#main-image img');
        if (mainImg) {
          mainImg.src = thumbnail.getAttribute('data-url') || '';
        }
        
        // Update thumbnail selection
        document.querySelectorAll('#view-thumbnails [data-view]').forEach(thumb => {
          thumb.classList.remove('border-indigo-600');
          thumb.classList.add('border-gray-200');
        });
        thumbnail.classList.remove('border-gray-200');
        thumbnail.classList.add('border-indigo-600');
      });
    });
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Attach initial thumbnail handlers
    attachThumbnailHandlers();
    
    // Handle color selection
    document.querySelectorAll('[data-option="color"]').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.currentTarget;
        const color = target.getAttribute('data-value');
        const currentSize = document.querySelector('[data-option="size"].option-selected')?.getAttribute('data-value');
        
        if (color) {
          // Update selection UI
          document.querySelectorAll('[data-option="color"]').forEach(btn => {
            btn.classList.remove('bg-indigo-600', 'border-transparent', 'text-white', 'option-selected');
            btn.classList.add('bg-white', 'border-gray-300', 'text-gray-900');
          });
          target.classList.remove('bg-white', 'border-gray-300', 'text-gray-900');
          target.classList.add('bg-indigo-600', 'border-transparent', 'text-white', 'option-selected');
          
          // Update images
          updateProductImages(color, currentSize || '');
        }
      });
    });
    
    // Handle size selection
    document.querySelectorAll('[data-option="size"]').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.currentTarget;
        const size = target.getAttribute('data-value');
        const currentColor = document.querySelector('[data-option="color"].option-selected')?.getAttribute('data-value');
        
        if (size) {
          // Update selection UI
          document.querySelectorAll('[data-option="size"]').forEach(btn => {
            btn.classList.remove('bg-indigo-600', 'border-transparent', 'text-white', 'option-selected');
            btn.classList.add('bg-white', 'border-gray-300', 'text-gray-900');
          });
          target.classList.remove('bg-white', 'border-gray-300', 'text-gray-900');
          target.classList.add('bg-indigo-600', 'border-transparent', 'text-white', 'option-selected');
          
          // Update images
          if (currentColor) {
            updateProductImages(currentColor, size);
          }
        }
      });
    });
  });
</script>

<div id="product-data" data-variants={JSON.stringify(processedVariants)} style="display: none;"></div> 