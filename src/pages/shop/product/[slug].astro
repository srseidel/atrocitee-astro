---
import { createServerSupabaseClient } from '@lib/supabase/client';
import Layout from '@layouts/Layout.astro';
import type { Database } from '@local-types/database/schema';

interface ProductVariant {
  id: string;
  name: string;
  sku: string;
  retail_price: number | null;
  options: Record<string, string>;
  in_stock: boolean;
  stock_level: number | null;
}

type Product = Database['public']['Tables']['products']['Row'] & {
  product_variants: ProductVariant[];
  charities?: Database['public']['Tables']['charities']['Row'] | null;
  atrocitee_categories?: Database['public']['Tables']['atrocitee_categories']['Row'] | null;
};

interface VariantOption {
  name: string;
  values: string[];
}

// Type guard to check if a value is a Set<string>
function isStringSet(value: unknown): value is Set<string> {
  return value instanceof Set && Array.from(value).every(item => typeof item === 'string');
}

// Use server-side rendering for dynamic data
export const prerender = false;

// Get the product slug from the URL
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// Get the product data
const supabase = createServerSupabaseClient({ cookies: Astro.cookies, request: Astro.request });
const { data: product, error: productError } = await supabase
  .from('products')
  .select(`
    *,
    product_variants (
      id,
      retail_price,
      options,
      in_stock,
      stock_level,
      name,
      sku
    ),
    charities (
      name,
      description,
      website_url,
      logo_url
    ),
    atrocitee_categories (
      name,
      slug,
      description
    )
  `)
  .eq('slug', slug)
  .eq('published_status', true)
  .single();

if (productError || !product) {
  return Astro.redirect('/404');
}

// Debug full variant data
console.log('Full variant data:', JSON.stringify(product.product_variants, null, 2));

// Extract size and color from variant names (e.g., "Atrocitee classic tee / Black / S")
const variantsByOption = product.product_variants.reduce((acc: Record<string, Set<string>>, variant: ProductVariant) => {
  // Parse the variant name which contains product name, color and size
  const nameParts = variant.name?.split('/').map(part => part.trim());
  if (nameParts?.length === 3) {
    const [_productName, color, size] = nameParts;
    
    // Add color option
    if (!acc['Color']) {
      acc['Color'] = new Set<string>();
    }
    acc['Color'].add(color);

    // Add size option
    if (!acc['Size']) {
      acc['Size'] = new Set<string>();
    }
    acc['Size'].add(size);
  }

  return acc;
}, {} as Record<string, Set<string>>);

// Debug the extracted options
console.log('Extracted variant options:', {
  colors: Array.from(variantsByOption['Color'] || []),
  sizes: Array.from(variantsByOption['Size'] || [])
});

// Sort sizes in specific order
const sizeOrder = ['S', 'M', 'L', 'XL', '2XL', '4XL'];
function sortSizes(sizes: string[]): string[] {
  return sizes.sort((a, b) => sizeOrder.indexOf(a) - sizeOrder.indexOf(b));
}

// Convert Sets to Arrays for template use
const options: VariantOption[] = Object.entries(variantsByOption).map(([name, values]) => {
  if (!isStringSet(values)) {
    return { name, values: [] };
  }
  const valuesArray = Array.from(values);
  return {
    name,
    // Sort sizes in specific order, other options alphabetically
    values: name === 'Size' ? sortSizes(valuesArray) : valuesArray.sort()
  };
});

// Sort options to ensure consistent order (Size first, then Color)
options.sort((a, b) => {
  const order = ['Size', 'Color'];
  return order.indexOf(a.name) - order.indexOf(b.name);
});

// Find available variants for the current selection
function findMatchingVariant(selectedOptions: Record<string, string>): ProductVariant | undefined {
  return product.product_variants.find((variant: ProductVariant) => {
    if (!variant.options || typeof variant.options !== 'object') return false;
    const variantOptions = variant.options as Record<string, string>;
    return Object.entries(selectedOptions).every(([key, value]) => 
      variantOptions[key.toLowerCase()] === value
    );
  });
}

// Get initial variant (first available one)
const initialVariant = product.product_variants[0];
---

<Layout title={product.name}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
      {/* Product image */}
      <div class="w-full aspect-w-1 aspect-h-1 rounded-lg overflow-hidden">
        <img
          src={product.thumbnail_url || 'https://via.placeholder.com/600'}
          alt={product.name}
          class="w-full h-full object-center object-cover"
          id="product-image"
        />
      </div>

      {/* Product details */}
      <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
        <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{product.name}</h1>
        
        <div class="mt-3">
          <h2 class="sr-only">Product information</h2>
          <p class="text-3xl text-gray-900" id="variant-price">${initialVariant?.retail_price?.toFixed(2) || product.atrocitee_base_price?.toFixed(2)}</p>
        </div>

        <div class="mt-6">
          <h3 class="sr-only">Description</h3>
          <div class="text-base text-gray-700 space-y-6">
            <p>{product.description}</p>
          </div>
        </div>

        {/* Product options */}
        <div class="mt-8">
          {options.map(option => (
            <div class="mb-4">
              <h3 class="text-sm font-medium text-gray-900">{option.name}</h3>
              <div class="mt-2">
                <div class="flex flex-wrap gap-2" data-option-group={option.name}>
                  {option.values.map(value => (
                    <button
                      type="button"
                      class="relative inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 option-button"
                      data-option-name={option.name}
                      data-option-value={value}
                    >
                      {value}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Stock status */}
        <p class="mt-4 text-sm text-gray-500" id="stock-status">
          {initialVariant?.in_stock ? 'In stock' : 'Out of stock'}
        </p>

        {/* Add to cart button */}
        <div class="mt-8 flex">
          <button
            type="button"
            id="add-to-cart"
            class="w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-50 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={!initialVariant?.in_stock}
          >
            Add to cart
          </button>
        </div>

        {/* Charity information */}
        {product.charities && (
          <div class="mt-8 border-t border-gray-200 pt-8">
            <h3 class="text-sm font-medium text-gray-900">Default Supported Charity</h3>
            <div class="mt-3 text-sm text-gray-500">
              <h4 class="font-medium text-gray-900">{product.charities.name}</h4>
              <p class="mt-1">{product.charities.description}</p>
              <p class="mt-2 italic text-sm">Donation goes to the Default Supported Charity unless changed in your profile at checkout.</p>
              {product.charities.website_url && (
                <a
                  href={product.charities.website_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="mt-2 text-indigo-600 hover:text-indigo-500 block"
                >
                  Learn more about this charity
                </a>
              )}
            </div>
          </div>
        )}

        {/* Category information */}
        {product.atrocitee_categories && (
          <div class="mt-8">
            <a
              href={`/shop/${product.atrocitee_categories.slug}`}
              class="text-sm font-medium text-indigo-600 hover:text-indigo-500"
            >
              Back to {product.atrocitee_categories.name}
            </a>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ variants: product.product_variants }}>
  /**
   * @typedef {Object} Variant
   * @property {string} name - The variant name (e.g., "Atrocitee classic tee / Black / S")
   * @property {number|null} retail_price - The retail price of the variant
   * @property {boolean} in_stock - Whether the variant is in stock
   * @property {number|null} stock_level - The stock level of the variant
   */

  /** @type {Object.<string, string>} */
  const selectedOptions = {};

  /**
   * Update UI based on selected variant
   * @param {Variant|undefined} variant - The selected variant
   */
  function updateVariantUI(variant) {
    // Debug selected variant
    console.log('Updating UI for variant:', variant);
    
    // Update price
    const priceElement = document.getElementById('variant-price');
    if (priceElement) {
      const price = variant?.retail_price ?? 0;
      priceElement.textContent = `$${price.toFixed(2)}`;
    }
    
    // Update stock status
    const stockElement = document.getElementById('stock-status');
    if (stockElement) {
      stockElement.textContent = variant?.in_stock ? 'In stock' : 'Out of stock';
      stockElement.classList.toggle('text-green-600', variant?.in_stock ?? false);
      stockElement.classList.toggle('text-red-600', !(variant?.in_stock ?? true));
    }
    
    // Update add to cart button
    const addToCartButton = document.getElementById('add-to-cart');
    if (addToCartButton instanceof HTMLButtonElement) {
      const isAvailable = variant?.in_stock ?? false;
      addToCartButton.disabled = !isAvailable;
      addToCartButton.textContent = isAvailable ? 'Add to cart' : 'Out of stock';
    }
  }
  
  /**
   * Find matching variant based on selected options
   * @returns {Variant|undefined}
   */
  function findMatchingVariant() {
    const variant = variants.find(variant => {
      const nameParts = variant.name?.split('/').map(part => part.trim());
      if (!nameParts || nameParts.length !== 3) return false;
      
      const [_productName, color, size] = nameParts;
      return selectedOptions['Color'] === color && selectedOptions['Size'] === size;
    });

    // Debug matching variant
    console.log('Found matching variant:', variant);
    return variant;
  }
  
  // Handle option selection
  document.querySelectorAll('.option-button').forEach(button => {
    button.addEventListener('click', (e) => {
      if (!(e.target instanceof HTMLButtonElement)) return;
      const target = e.target;
      const optionName = target.dataset.optionName;
      const optionValue = target.dataset.optionValue;
      
      if (!optionName || !optionValue) return;
      
      // Update selected options
      selectedOptions[optionName] = optionValue;
      
      // Debug current selection
      console.log('Selected options:', selectedOptions);
      
      // Update button styles in the option group
      const optionGroup = target.closest('[data-option-group]');
      if (optionGroup) {
        optionGroup.querySelectorAll('.option-button').forEach(btn => {
          btn.classList.toggle('ring-2', btn === target);
          btn.classList.toggle('ring-indigo-500', btn === target);
          btn.classList.toggle('border-gray-300', btn !== target);
          btn.classList.toggle('border-transparent', btn === target);
          btn.classList.toggle('bg-indigo-50', btn === target);
          btn.classList.toggle('bg-white', btn !== target);
        });
      }
      
      // Find and update variant
      const matchingVariant = findMatchingVariant();
      updateVariantUI(matchingVariant);
    });
  });
  
  // Select first option of each type by default
  document.querySelectorAll('[data-option-group]').forEach(group => {
    const firstButton = group.querySelector('.option-button');
    if (firstButton instanceof HTMLButtonElement) {
      firstButton.click();
    }
  });
</script> 