---
// @ts-nocheck - Disable TypeScript checking for Astro-specific attributes like 'class' vs 'className'
import Layout from '@layouts/Layout.astro';
import { parseMockupFilename, getViewLabel } from '@utils/helpers/mockups';
import { 
  findVariant, 
  findVariantWithImages, 
  generateMockupUrls, 
  colorClasses, 
  type Product, 
  type ProductVariant, 
  type MockupView 
} from '@utils/helpers/product-helpers';
import { createClient } from '@lib/supabase/client';

// Enable prerendering for SEO and performance
export const prerender = true;

// Simplified static path generation - one path per product
export async function getStaticPaths() {
  // Use createClient() for static generation - this is safe for build time
  const supabase = createClient();
  
  // Get all published products
  const { data: products = [], error } = await supabase
    .from('products')
    .select(`
      *,
      variants:product_variants(*)
    `)
    .eq('published_status', true);

  if (error) {
    console.error('Error fetching products for static paths:', error);
    return [];
  }

  // Generate one static path per product (not per variant)
  return products.map(product => {
    // Process variants to extract mockup views and options
    const processedVariants = (product.variants || []).map((variant: any): ProductVariant => {
      const mockupSettings = variant.mockup_settings || {};
      const mockupViews: MockupView[] = [];

      // Handle the "views" array structure
      if (mockupSettings.views && Array.isArray(mockupSettings.views)) {
        mockupViews.push(...mockupSettings.views);
      }
      // Handle the "mockups" object structure
      else if (mockupSettings.mockups && typeof mockupSettings.mockups === 'object') {
        for (const [view, settings] of Object.entries(mockupSettings.mockups)) {
          if (settings && typeof settings === 'object' && 'filename' in settings) {
            const filename = settings.filename as string;
            const viewName = view.replace('_', '-');
            
            const { url, webpUrl } = generateMockupUrls(product.slug, filename);
            
            mockupViews.push({
              view: viewName,
              label: getViewLabel(viewName),
              filename,
              url,
              webpUrl,
            });
          }
        }
      }
      // Handle direct object structure (legacy format)
      else if (typeof mockupSettings === 'object') {
        for (const [view, settings] of Object.entries(mockupSettings)) {
          if (settings && typeof settings === 'object' && 'filename' in settings) {
            const filename = settings.filename as string;
            const { url, webpUrl } = generateMockupUrls(product.slug, filename);

            mockupViews.push({
              view,
              label: getViewLabel(view),
              filename,
              url,
              webpUrl,
            });
          }
        }
      }

      // Sort views to prioritize front views
      mockupViews.sort((a, b) => {
        if (a.view.includes('front') && !b.view.includes('front')) return -1;
        if (!a.view.includes('front') && b.view.includes('front')) return 1;
        return 0;
      });

      // Extract color and size from variant options or filename
      let options: ProductVariantOptions = {};
      
      // Transform Printful options array to simple object
      if (variant.options && Array.isArray(variant.options)) {
        // Find color and size from Printful options array
        const colorOption = variant.options.find((opt: any) => opt.id === 'color');
        const sizeOption = variant.options.find((opt: any) => opt.id === 'size');
        
        if (colorOption?.value) options.color = colorOption.value;
        if (sizeOption?.value) options.size = sizeOption.value;
      } else if (variant.options && typeof variant.options === 'object') {
        // Already in the correct format
        options = variant.options;
      }
      
      // If options are not properly set, try to extract from filename
      if (mockupViews.length > 0 && (!options.color || !options.size)) {
        const filename = mockupViews[0].filename;
        const parsedInfo = parseMockupFilename(filename);
        
        if (!options.color && parsedInfo?.color) {
          options.color = parsedInfo.color.charAt(0).toUpperCase() + parsedInfo.color.slice(1);
        }
        
        if (!options.size && parsedInfo?.size) {
          options.size = parsedInfo.size.toUpperCase();
        }
      }
      
      // Set default values if still missing
      if (mockupViews.length > 0 && (!options.color || !options.size)) {
        if (!options.color) options.color = "Black";
        if (!options.size) options.size = "One Size";
      }
  
      return {
        ...variant,
        options,
        mockupViews,
      };
    });

    return {
      params: { slug: product.slug },
      props: {
        product: product as unknown as Product,
        processedVariants,
      }
    };
  });
}

// Get props from Astro
const { product, processedVariants } = Astro.props;

// Get URL parameters for color and size
const url = new URL(Astro.request.url);
const colorParam = url.searchParams.get('color') || '';
const sizeParam = url.searchParams.get('size') || '';

// Find the selected variant based on URL parameters
let selectedVariant = findVariant(colorParam, sizeParam, processedVariants);

// If no variant found or the variant has no images, find a better one
if (!selectedVariant || !selectedVariant.mockupViews || selectedVariant.mockupViews.length === 0) {
  selectedVariant = findVariantWithImages(processedVariants);
}

const variantViews = selectedVariant?.mockupViews || [];

// Get available colors and sizes for UI
const availableColors = [...new Set(processedVariants.map((v: ProductVariant) => v.options.color))].filter(Boolean) as string[];
const availableSizes = [...new Set(processedVariants.map((v: ProductVariant) => v.options.size))].filter(Boolean) as string[];

// Sort sizes in logical order
availableSizes.sort((a, b) => {
  const sizeOrder: Record<string, number> = { 
    'XS': 1, 'S': 2, 'M': 3, 'L': 4, 'XL': 5, '2XL': 6, '3XL': 7, '4XL': 8, 'One Size': 9
  };
  return (sizeOrder[a] || 99) - (sizeOrder[b] || 99);
});

// Get main image and format price
const mainImage = variantViews.length > 0 ? variantViews[0] : null;
const formattedPrice = selectedVariant?.retail_price
  ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(selectedVariant.retail_price)
  : 'Price not available';

// Prepare data for client-side JavaScript
const clientData = {
  variants: processedVariants.map(v => ({
    id: v.id,
    options: v.options,
    mockupViews: v.mockupViews,
    in_stock: v.in_stock,
    retail_price: v.retail_price
  })),
  productName: product.name,
  productSlug: product.slug,
  isDevelopment: import.meta.env.DEV
};
---

<Layout title={product.name}>
  <div class="container mx-auto px-4 py-8">
    <!-- Debug info - controlled by environment variable -->
    {import.meta.env.DEV && import.meta.env.PUBLIC_SHOW_DEBUG === 'true' && (
      <div class="bg-gray-100 p-4 mb-4 text-sm rounded">
        <div class="flex justify-between items-center mb-2">
          <strong>Debug Info</strong>
          <button id="toggle-debug" class="bg-blue-500 text-white px-2 py-1 rounded text-xs">Toggle Details</button>
        </div>
        <div>
          <p>URL: {Astro.request.url}</p>
          <p>Color Param: {colorParam || 'None'}</p>
          <p>Size Param: {sizeParam || 'None'}</p>
          <p>Selected Variant: {selectedVariant?.id} ({selectedVariant?.options?.color || 'No color'}, {selectedVariant?.options?.size || 'No size'})</p>
          <p>Available Colors: {availableColors.join(', ')}</p>
          <p>Available Sizes: {availableSizes.join(', ')}</p>
        </div>
        <div id="debug-details" class="mt-2 hidden">
          <p>Total Variants: {processedVariants.length}</p>
          <p>Variant Views: {variantViews.length}</p>
          {variantViews.length > 0 && (
            <div class="mt-2">
              <strong>Available Views:</strong>
              <ul class="list-disc list-inside ml-4">
                {variantViews.map(view => (
                  <li>{view.view}: {view.url}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    )}
    
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Product Images -->
      <div class="w-full md:w-1/2">
        <div class="bg-white rounded-lg overflow-hidden shadow-lg">
          {mainImage ? (
            <picture>
              <source srcset={mainImage.webpUrl} type="image/webp" />
              <img 
                src={mainImage.url} 
                alt={`${product.name} - ${mainImage.label}`} 
                class="w-full h-auto object-cover" 
                width="600" 
                height="600" 
                id="main-product-image"
              />
            </picture>
          ) : (
            <div class="bg-gray-200 w-full h-96 flex items-center justify-center">
              <img 
                src={product.thumbnail_url || 'https://via.placeholder.com/600'} 
                alt={product.name} 
                class="w-full h-auto object-cover" 
                id="main-product-image"
              />
            </div>
          )}
        </div>
        
        {/* Thumbnail Gallery */}
        {variantViews.length > 1 && (
          <div class="mt-4 grid grid-cols-4 gap-2" id="thumbnail-container">
            {variantViews.map((view: MockupView, index: number) => (
              <button 
                type="button"
                class={`block cursor-pointer thumbnail-btn ${index === 0 ? 'active' : ''}`}
                data-src={view.url}
                data-webp={view.webpUrl}
                data-view={view.view}
                data-label={view.label}
              >
                <picture>
                  <source srcset={view.webpUrl} type="image/webp" />
                  <img 
                    src={view.url} 
                    alt={`${product.name} - ${view.label}`} 
                    class={`w-full h-auto object-cover rounded border hover:border-primary ${index === 0 ? 'border-primary' : 'border-gray-300'}`}
                    width="150" 
                    height="150" 
                  />
                </picture>
              </button>
            ))}
          </div>
        )}
      </div>

      <!-- Product Info -->
      <div class="w-full md:w-1/2">
        <h1 class="text-3xl font-bold mb-2">{product.name}</h1>
        <p class="text-2xl font-semibold text-primary mb-4" id="product-price">{formattedPrice}</p>

        <div class="prose max-w-none mb-6">
          <p>{product.description}</p>
        </div>

        {/* Color Selector */}
        {availableColors.length > 0 && (
          <div class="mb-6">
            <h3 class="text-lg font-semibold mb-2">Color: <span id="selected-color">{selectedVariant?.options.color}</span></h3>
            <div class="flex flex-wrap gap-2">
              {availableColors.map((color: string) => {
                const isSelected = color === selectedVariant?.options.color;
                const colorClass = colorClasses[color] || 'bg-gray-500';
                
                return (
                  <button
                    type="button"
                    class={`color-btn inline-block w-8 h-8 rounded-full ${colorClass} ${isSelected ? 'ring-2 ring-offset-2 ring-primary' : ''} cursor-pointer hover:ring-2 hover:ring-offset-2 hover:ring-primary/50`}
                    title={`Select ${color} color`}
                    data-color={color}
                    aria-label={`Select ${color} color`}
                    aria-pressed={isSelected}
                  >
                    <span class="sr-only">{color}</span>
                  </button>
                );
              })}
            </div>
          </div>
        )}

        {/* Size Selector */}
        {availableSizes.length > 0 && (
          <div class="mb-6">
            <div class="flex justify-between items-center mb-2">
              <h3 class="text-lg font-semibold">Size: <span id="selected-size">{selectedVariant?.options.size}</span></h3>
              <button type="button" class="text-sm text-primary hover:underline">Size Guide</button>
            </div>
            <div class="flex flex-wrap gap-2">
              {availableSizes.map((size: string) => {
                const isSelected = size === selectedVariant?.options.size;
                
                return (
                  <button
                    type="button"
                    class={`size-btn min-w-[3rem] h-10 flex items-center justify-center px-3 rounded border transition-colors ${isSelected ? 'border-primary bg-primary text-white' : 'border-gray-300 hover:border-primary'}`}
                    data-size={size}
                    aria-label={`Select size ${size}`}
                    aria-pressed={isSelected}
                  >
                    {size}
                  </button>
                );
              })}
            </div>
          </div>
        )}

        {/* Add to Cart */}
        <div class="mb-6">
          <form method="post" action="/api/cart/add" id="add-to-cart-form">
            <input type="hidden" name="product_id" value={product.id} />
            <input type="hidden" name="variant_id" value={selectedVariant?.id} id="variant-id-input" />
            <input type="hidden" name="quantity" value="1" />
            <button
              type="submit"
              class="w-full bg-primary hover:bg-primary-dark text-white font-bold py-3 px-6 rounded transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              disabled={!selectedVariant?.in_stock}
              id="add-to-cart-button"
            >
              {selectedVariant?.in_stock ? 'Add to Cart' : 'Out of Stock'}
            </button>
          </form>
        </div>

        {/* Product Details */}
        <div class="border-t border-gray-200 pt-4">
          <h3 class="text-lg font-semibold mb-2">Product Details</h3>
          <ul class="list-disc list-inside text-gray-700 space-y-1">
            {product.details && product.details.split('\n').map((detail: string) => (
              <li>{detail}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Pass data to client-side JavaScript -->
  <script type="application/json" id="product-data" set:html={JSON.stringify(clientData)}></script>
</Layout>

<script>
  import type { ClientVariant } from '@utils/helpers/product-helpers';

  // Get product data from the JSON script tag
  const productDataEl = document.getElementById('product-data');
  if (!productDataEl) {
    console.error('Product data not found');
    throw new Error('Product data not found');
  }

  let productData;
  try {
    productData = JSON.parse(productDataEl.textContent || '{}');
  } catch (error) {
    console.error('Failed to parse product data:', error);
    throw error;
  }

  const { variants, productName, productSlug, isDevelopment } = productData;

  // Helper functions for client-side
  function findVariant(color: string, size: string, variants: ClientVariant[]): ClientVariant | undefined {
    if (!color && !size) return undefined;
    
    return variants.find(variant => {
      const matchesColor = !color || variant.options.color === color;
      const matchesSize = !size || variant.options.size === size;
      return matchesColor && matchesSize && variant.mockupViews && variant.mockupViews.length > 0;
    });
  }

  function findVariantWithImages(variants: ClientVariant[]): ClientVariant | undefined {
    return variants.find(variant => variant.mockupViews && variant.mockupViews.length > 0);
  }

  // Current selected variant
  let currentVariant: ClientVariant | undefined;

  // Initialize with URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const initialColor = urlParams.get('color') || '';
  const initialSize = urlParams.get('size') || '';

  // Find initial variant
  currentVariant = findVariant(initialColor, initialSize, variants);
  if (!currentVariant) {
    currentVariant = findVariantWithImages(variants);
  }

  // Update UI for a selected variant
  function updateUI(variant: ClientVariant) {
    if (!variant) return;

    currentVariant = variant;

    // Update selected color and size display
    const colorEl = document.getElementById('selected-color');
    const sizeEl = document.getElementById('selected-size');
    if (colorEl) colorEl.textContent = variant.options.color || 'Not set';
    if (sizeEl) sizeEl.textContent = variant.options.size || 'Not set';

    // Update form input
    const variantInput = document.getElementById('variant-id-input') as HTMLInputElement;
    if (variantInput) variantInput.value = variant.id;

    // Update price
    if (variant.retail_price) {
      const formattedPrice = new Intl.NumberFormat('en-US', { 
        style: 'currency', 
        currency: 'USD' 
      }).format(variant.retail_price);
      
      const priceEl = document.getElementById('product-price');
      if (priceEl) priceEl.textContent = formattedPrice;
    }

    // Update add to cart button
    const addToCartButton = document.getElementById('add-to-cart-button') as HTMLButtonElement;
    if (addToCartButton) {
      addToCartButton.disabled = !variant.in_stock;
      addToCartButton.textContent = variant.in_stock ? 'Add to Cart' : 'Out of Stock';
    }

    // Update color buttons
    document.querySelectorAll('.color-btn').forEach(btn => {
      const isSelected = (btn as HTMLElement).dataset.color === variant.options.color;
      btn.setAttribute('aria-pressed', isSelected.toString());
      if (isSelected) {
        btn.classList.add('ring-2', 'ring-offset-2', 'ring-primary');
      } else {
        btn.classList.remove('ring-2', 'ring-offset-2', 'ring-primary');
      }
    });

    // Update size buttons
    document.querySelectorAll('.size-btn').forEach(btn => {
      const isSelected = (btn as HTMLElement).dataset.size === variant.options.size;
      btn.setAttribute('aria-pressed', isSelected.toString());
      if (isSelected) {
        btn.classList.add('border-primary', 'bg-primary', 'text-white');
        btn.classList.remove('border-gray-300');
      } else {
        btn.classList.remove('border-primary', 'bg-primary', 'text-white');
        btn.classList.add('border-gray-300');
      }
    });

    // Update images
    updateImages(variant);

    // Update URL without reloading
    const url = new URL(window.location.href);
    if (variant.options.color) url.searchParams.set('color', variant.options.color);
    if (variant.options.size) url.searchParams.set('size', variant.options.size);
    window.history.replaceState({}, '', url.toString());
  }

  // Update images for a variant
  function updateImages(variant: ClientVariant) {
    const variantViews = variant.mockupViews || [];
    if (variantViews.length === 0) return;

    // Update main image
    const mainImage = variantViews[0];
    const mainImg = document.getElementById('main-product-image') as HTMLImageElement;
    const mainWebp = document.querySelector('source[type="image/webp"]');

    if (mainImg && mainImage) {
      mainImg.src = mainImage.url;
      mainImg.alt = `${productName} - ${variant.options.color} - ${mainImage.label}`;
    }

    if (mainWebp && mainImage) {
      (mainWebp as HTMLSourceElement).srcset = mainImage.webpUrl;
    }

    // Update thumbnails
    const thumbnailContainer = document.getElementById('thumbnail-container');
    if (thumbnailContainer && variantViews.length > 1) {
      thumbnailContainer.innerHTML = '';

      variantViews.forEach((view, index) => {
        const thumbnailBtn = document.createElement('button');
        thumbnailBtn.type = 'button';
        thumbnailBtn.className = `block cursor-pointer thumbnail-btn ${index === 0 ? 'active' : ''}`;
        thumbnailBtn.dataset.src = view.url;
        thumbnailBtn.dataset.webp = view.webpUrl;
        thumbnailBtn.dataset.view = view.view;
        thumbnailBtn.dataset.label = view.label;

        thumbnailBtn.innerHTML = `
          <picture>
            <source srcset="${view.webpUrl}" type="image/webp" />
            <img 
              src="${view.url}" 
              alt="${productName} - ${variant.options.color} - ${view.label}" 
              class="w-full h-auto object-cover rounded border hover:border-primary ${index === 0 ? 'border-primary' : 'border-gray-300'}" 
              width="150" 
              height="150" 
            />
          </picture>
        `;

        thumbnailBtn.addEventListener('click', () => {
          if (mainImg) {
            mainImg.src = view.url;
            mainImg.alt = `${productName} - ${variant.options.color} - ${view.label}`;
          }
          if (mainWebp) (mainWebp as HTMLSourceElement).srcset = view.webpUrl;

          // Update active state
          document.querySelectorAll('.thumbnail-btn').forEach(btn => {
            btn.classList.remove('active');
            const img = btn.querySelector('img');
            if (img) img.classList.remove('border-primary');
            if (img) img.classList.add('border-gray-300');
          });
          thumbnailBtn.classList.add('active');
          const img = thumbnailBtn.querySelector('img');
          if (img) img.classList.add('border-primary');
          if (img) img.classList.remove('border-gray-300');
        });

        thumbnailContainer.appendChild(thumbnailBtn);
      });
    }
  }

  // Color selection handler
  document.querySelectorAll('.color-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const color = (btn as HTMLElement).dataset.color || '';
      const currentSize = currentVariant?.options.size || '';
      
      // Find variant with this color
      let newVariant = findVariant(color, currentSize, variants);
      
             // If no exact match, find any variant with this color
       if (!newVariant) {
         newVariant = variants.find((v: ClientVariant) => v.options.color === color);
       }
      
      // If still no match, use first variant with images
      if (!newVariant) {
        newVariant = findVariantWithImages(variants);
      }
      
      if (newVariant) {
        updateUI(newVariant);
      }
    });
  });

  // Size selection handler
  document.querySelectorAll('.size-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const size = (btn as HTMLElement).dataset.size || '';
      const currentColor = currentVariant?.options.color || '';
      
      // Find variant with this size
      let newVariant = findVariant(currentColor, size, variants);
      
             // If no exact match, find any variant with this size
       if (!newVariant) {
         newVariant = variants.find((v: ClientVariant) => v.options.size === size);
       }
      
      // If still no match, use first variant with images
      if (!newVariant) {
        newVariant = findVariantWithImages(variants);
      }
      
      if (newVariant) {
        updateUI(newVariant);
      }
    });
  });

  // Thumbnail click handlers (for initial load)
  document.querySelectorAll('.thumbnail-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const mainImg = document.getElementById('main-product-image') as HTMLImageElement;
      const mainWebp = document.querySelector('source[type="image/webp"]');
      
      if (mainImg) {
        mainImg.src = (btn as HTMLElement).dataset.src || '';
        mainImg.alt = `${productName} - ${(btn as HTMLElement).dataset.label || ''}`;
      }
      if (mainWebp) {
        (mainWebp as HTMLSourceElement).srcset = (btn as HTMLElement).dataset.webp || '';
      }
      
      // Update active state
      document.querySelectorAll('.thumbnail-btn').forEach(b => {
        b.classList.remove('active');
        const img = b.querySelector('img');
        if (img) img.classList.remove('border-primary');
        if (img) img.classList.add('border-gray-300');
      });
      btn.classList.add('active');
      const img = btn.querySelector('img');
      if (img) img.classList.add('border-primary');
      if (img) img.classList.remove('border-gray-300');
    });
  });

  // Debug toggle
  if (isDevelopment) {
    const debugBtn = document.getElementById('toggle-debug');
    const debugDetails = document.getElementById('debug-details');
    
    if (debugBtn && debugDetails) {
      debugBtn.addEventListener('click', () => {
        debugDetails.classList.toggle('hidden');
      });
    }
  }

  // Initialize the page
  if (currentVariant) {
    updateUI(currentVariant);
  }
</script>
---