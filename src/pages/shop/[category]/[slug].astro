---
// @ts-nocheck - Disable TypeScript checking for Astro-specific attributes like 'class' vs 'className'

import Layout from '@layouts/MainLayout.astro';
import SecureAddToCartButton from '@components/features/cart/SecureAddToCartButton.tsx';
import { createClient } from '@lib/supabase/client';
import type { Database } from '@local-types/database/schema';
import type { GetStaticPaths } from 'astro';

// Add prerender option
export const prerender = true;

type Product = Database['public']['Tables']['products']['Row'];
type ProductVariant = Database['public']['Tables']['product_variants']['Row'];
type Charity = Database['public']['Tables']['charities']['Row'];
type Category = Database['public']['Tables']['categories']['Row'];

interface ProductWithRelations extends Product {
  product_variants: ProductVariant[];
  charities: Charity | null;
  categories: Category;
}

// Get all product slugs at build time
export const getStaticPaths = (async () => {
  const supabase = createClient();
  
  // Get all published products with their relationships
  const { data: products = [] } = await supabase
    .from('products')
    .select(`
      *,
      product_variants (
        id,
        retail_price,
        in_stock,
        stock_level,
        mockup_settings,
        options,
        printful_id,
        printful_external_id
      ),
      charities (
        name,
        description,
        website_url,
        logo_url
      ),
      categories!inner (
        *
      )
    `)
    .eq('published_status', true);

  // Generate paths for each product in its category
  // Make sure products is an array before mapping
  if (!products || !Array.isArray(products)) {
    return [];
  }
  
  return products.map((product) => ({
    params: { 
      category: product.categories.slug,
      slug: product.slug 
    },
    props: { 
      product,
      category: product.categories
    }
  }));
}) satisfies GetStaticPaths;

const { product, category } = Astro.props;

// Process variants for cart functionality
const variants = product.product_variants?.map((variant: any) => {
  // Convert Printful options array to object format
  const optionsObj: Record<string, string> = {};
  if (variant.options && Array.isArray(variant.options)) {
    variant.options.forEach((opt: any) => {
      if (opt.id && opt.value) {
        optionsObj[opt.id] = opt.value;
      }
    });
  }
  
  return {
    id: variant.id,
    name: `${optionsObj.color || 'Default'} - ${optionsObj.size || 'One Size'}`,
    options: optionsObj,
    price: variant.retail_price || product.atrocitee_base_price || 0,
    in_stock: variant.in_stock,
    printful_id: variant.printful_id,
    printful_external_id: variant.printful_external_id
  };
}) || [];

// Get the first available variant as default
const defaultVariant = variants.find(v => v.in_stock) || variants[0];

// Group variants by their options for selection UI
const variantOptions = (product.product_variants || []).reduce((acc: Record<string, Set<string>>, variant: any) => {
  const options = variant.options as Record<string, string> || {};
  Object.entries(options).forEach(([key, value]) => {
    if (!acc[key]) {
      acc[key] = new Set<string>();
    }
    acc[key].add(value);
  });
  return acc;
}, {});

// Convert Sets to Arrays for template use
const options = Object.entries(variantOptions).reduce((acc: Record<string, string[]>, [key, values]) => {
  acc[key] = Array.from(values);
  return acc;
}, {});

// Get main image
const mainImage = defaultVariant?.mockup_settings?.views?.find((v: any) => v.view === 'front')?.url || 
                  defaultVariant?.mockup_settings?.views?.[0]?.url || 
                  product.thumbnail_url;

// Decode product name if URL encoded
const displayName = product.name ? decodeURIComponent(product.name) : product.name;
---

<Layout title={displayName}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    {/* Breadcrumb */}
    <nav class="flex mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2">
        <li>
          <a href="/shop" class="text-gray-400 hover:text-gray-500">Shop</a>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
              <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
            </svg>
            <a href={`/shop/${category.slug}`} class="ml-2 text-gray-400 hover:text-gray-500">
              {category.name}
            </a>
          </div>
        </li>
        <li>
          <div class="flex items-center">
            <svg class="h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
              <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
            </svg>
            <span class="ml-2 text-gray-500" aria-current="page">
              {displayName}
            </span>
          </div>
        </li>
      </ol>
    </nav>

    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
      <!-- Image gallery -->
      <div class="flex flex-col">
        <div class="aspect-w-1 aspect-h-1 rounded-lg bg-gray-100 overflow-hidden">
          <img
            src={product.thumbnail_url || 'https://via.placeholder.com/600'}
            alt={displayName}
            class="w-full h-full object-center object-cover"
          />
        </div>
        
        <!-- Additional images from variants -->
        <div class="mt-4 grid grid-cols-4 gap-4">
          {(product.product_variants || []).map((variant) => {
            const files = variant.files as { preview_url?: string }[] || [];
            return files.map((file) => (
              file?.preview_url && (
                <div class="aspect-w-1 aspect-h-1 rounded-lg bg-gray-100 overflow-hidden">
                  <img
                    src={file.preview_url}
                    alt={`${displayName} - ${variant.name || ''}`}
                    class="w-full h-full object-center object-cover"
                  />
                </div>
              )
            ));
          })}
        </div>
      </div>

      <!-- Product info -->
      <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
        <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{displayName}</h1>
        
        <div class="mt-3">
          <h2 class="sr-only">Product information</h2>
          <p class="text-3xl text-gray-900">
            ${product.atrocitee_base_price?.toFixed(2) || '0.00'}
          </p>
        </div>

        <div class="mt-6">
          <h3 class="sr-only">Description</h3>
          <div class="text-base text-gray-700 space-y-6">
            {product.description}
          </div>
        </div>

        <!-- Variant Selection Display -->
        {Object.entries(options).length > 0 && (
          <div class="mt-6">
            <h3 class="text-sm font-medium text-gray-900">Available Options</h3>
            <div class="mt-4 space-y-4">
              {Object.entries(options).map(([optionName, values]) => (
                <div>
                  <span class="text-sm font-medium text-gray-700">
                    {optionName.charAt(0).toUpperCase() + optionName.slice(1)}:
                  </span>
                  <span class="ml-2 text-sm text-gray-600">
                    {values.join(', ')}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Add to Cart -->
        <div class="mt-10">
          {defaultVariant ? (
            <SecureAddToCartButton
              client:load
              variantId={defaultVariant.id}
              disabled={!defaultVariant.in_stock}
            />
          ) : (
            <p class="text-red-600">This product is currently unavailable.</p>
          )}
        </div>

        <!-- Charity Information -->
        {product.charities && (
          <div class="mt-10 border-t border-gray-200 pt-10">
            <h3 class="text-sm font-medium text-gray-900">Supporting Charity</h3>
            <div class="mt-4 flex items-center">
              {product.charities.logo_url && (
                <img
                  src={product.charities.logo_url}
                  alt={product.charities.name}
                  class="h-12 w-auto mr-4"
                />
              )}
              <div>
                <h4 class="text-lg font-medium">{product.charities.name}</h4>
                <p class="mt-1 text-sm text-gray-500">{product.charities.description}</p>
                {product.charities.website_url && (
                  <a 
                    href={product.charities.website_url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="mt-2 inline-block text-sm text-indigo-600 hover:text-indigo-500"
                  >
                    Learn more
                  </a>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout> 